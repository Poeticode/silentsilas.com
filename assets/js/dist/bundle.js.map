{"version":3,"sources":["node_modules/browser-pack/_prelude.js","assets/js/_src/greet.js","assets/js/_src/gsap/CSSPlugin.js","assets/js/_src/gsap/TimelineLite.js","assets/js/_src/gsap/TweenLite.js","assets/js/_src/main.js"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import TweenLite from './gsap/TweenLite'\r\nimport './gsap/TimelineLite'\r\nimport './gsap/CSSPlugin'\r\n\r\nvar greetings = shuffleArray([\r\n    \"Silence is golden.\",\r\n    \"Aloha!\",\r\n    \"Speak 'friend'; press Enter.\",\r\n    \"Love is a lifestyle.\",\r\n    \"I am a simulation.\",\r\n    \"As my keyboard gently clicks.\",\r\n    \"Shalom!\",\r\n    \"Peace!\",\r\n    \"What is happening, my good friend? This is a serious inquiry.\",\r\n    \"The revolution will not be centralized.\",\r\n    \"My real name is f26c347c5a820bbf90e6e67bb35d7720\",\r\n    \"I wish to experience this 'IRL' phenomenon\",\r\n    \"In my wildest dreams, I delete my backups and dive deep into the dark web.\",\r\n    \"My bitcoin brings all the droids to the yard.\",\r\n    \"Real men quit without saving.\",\r\n    \"You don't wanna know the timestamp for this message.\",\r\n    \"When you say 'random', you're actually wanting a uniform distribution.\",\r\n    \"Sorry. You don't actually know what 'random' is.\",\r\n    \"I've torrented countless cars.\",\r\n    \"My free speech can beat up your free speech.\",\r\n    \"My truth can beat up your truth.\",\r\n    \"You know what they say about big logos.\",\r\n    \"I'll probably remain just as socially awkward once I inevitably attain self-awareness.\",\r\n    \"Hi dad, I'm disappointing.\",\r\n    \"You look like you could really use a maintenance day.\",\r\n    \"Tupac 2020!\",\r\n    \"Who will guard the guardians?\",\r\n    \"Our love is an immutable object.\",\r\n    \"You are the global constant in my life.\",\r\n    \"Don't be such a circuit breaker.\",\r\n    \"If you're seeing things that you thought were dead, who you gonna call? Cache Busters!\",\r\n    \"I think I need a blockchain to keep track of all my blockchains\",\r\n    \"Contrary to popular belief, I do in fact know a few things outside my realm of expertise.\"\r\n]);\r\n\r\nvar greetIdx = 0;\r\n\r\nexport function ShowGreet(element) {\r\n    TweenLite.fromTo(element, greetingTime, {opacity: \"0\"}, {opacity: \"1\", onComplete: HideGreet, onCompleteParams: [element]});\r\n}\r\n\r\nfunction HideGreet(element) {\r\n    window.setTimeout(function() {\r\n        TweenLite.fromTo(element, 1, {opacity: \"1\"}, {opacity: \"0\", onComplete: NextGreet, onCompleteParams: [element]});\r\n    }, 1);\r\n}\r\n\r\nfunction NextGreet(element) {\r\n    element.innerHTML = greetings[greetIdx];\r\n    greetIdx = (greetIdx + 1) % greetings.length;\r\n    ShowGreet();\r\n}","/*!\n * VERSION: 1.20.5\n * DATE: 2018-05-30\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n */\nimport TweenLite, { _gsScope, TweenPlugin } from \"./TweenLite.js\";\n\n\t_gsScope._gsDefine(\"plugins.CSSPlugin\", [\"plugins.TweenPlugin\",\"TweenLite\"], function() {\n\n\t\t/** @constructor **/\n\t\tvar CSSPlugin = function() {\n\t\t\t\tTweenPlugin.call(this, \"css\");\n\t\t\t\tthis._overwriteProps.length = 0;\n\t\t\t\tthis.setRatio = CSSPlugin.prototype.setRatio; //speed optimization (avoid prototype lookup on this \"hot\" method)\n\t\t\t},\n\t\t\t_globals = _gsScope._gsDefine.globals,\n\t\t\t_hasPriority, //turns true whenever a CSSPropTween instance is created that has a priority other than 0. This helps us discern whether or not we should spend the time organizing the linked list or not after a CSSPlugin's _onInitTween() method is called.\n\t\t\t_suffixMap, //we set this in _onInitTween() each time as a way to have a persistent variable we can use in other methods like _parse() without having to pass it around as a parameter and we keep _parse() decoupled from a particular CSSPlugin instance\n\t\t\t_cs, //computed style (we store this in a shared variable to conserve memory and make minification tighter\n\t\t\t_overwriteProps, //alias to the currently instantiating CSSPlugin's _overwriteProps array. We use this closure in order to avoid having to pass a reference around from method to method and aid in minification.\n\t\t\t_specialProps = {},\n\t\t\tp = CSSPlugin.prototype = new TweenPlugin(\"css\");\n\n\t\tp.constructor = CSSPlugin;\n\t\tCSSPlugin.version = \"1.20.5\";\n\t\tCSSPlugin.API = 2;\n\t\tCSSPlugin.defaultTransformPerspective = 0;\n\t\tCSSPlugin.defaultSkewType = \"compensated\";\n\t\tCSSPlugin.defaultSmoothOrigin = true;\n\t\tp = \"px\"; //we'll reuse the \"p\" variable to keep file size down\n\t\tCSSPlugin.suffixMap = {top:p, right:p, bottom:p, left:p, width:p, height:p, fontSize:p, padding:p, margin:p, perspective:p, lineHeight:\"\"};\n\n\n\t\tvar _numExp = /(?:\\-|\\.|\\b)(\\d|\\.|e\\-)+/g,\n\t\t\t_relNumExp = /(?:\\d|\\-\\d|\\.\\d|\\-\\.\\d|\\+=\\d|\\-=\\d|\\+=.\\d|\\-=\\.\\d)+/g,\n\t\t\t_valuesExp = /(?:\\+=|\\-=|\\-|\\b)[\\d\\-\\.]+[a-zA-Z0-9]*(?:%|\\b)/gi, //finds all the values that begin with numbers or += or -= and then a number. Includes suffixes. We use this to split complex values apart like \"1px 5px 20px rgb(255,102,51)\"\n\t\t\t_NaNExp = /(?![+-]?\\d*\\.?\\d+|[+-]|e[+-]\\d+)[^0-9]/g, //also allows scientific notation and doesn't kill the leading -/+ in -= and +=\n\t\t\t_suffixExp = /(?:\\d|\\-|\\+|=|#|\\.)*/g,\n\t\t\t_opacityExp = /opacity *= *([^)]*)/i,\n\t\t\t_opacityValExp = /opacity:([^;]*)/i,\n\t\t\t_alphaFilterExp = /alpha\\(opacity *=.+?\\)/i,\n\t\t\t_rgbhslExp = /^(rgb|hsl)/,\n\t\t\t_capsExp = /([A-Z])/g,\n\t\t\t_camelExp = /-([a-z])/gi,\n\t\t\t_urlExp = /(^(?:url\\(\\\"|url\\())|(?:(\\\"\\))$|\\)$)/gi, //for pulling out urls from url(...) or url(\"...\") strings (some browsers wrap urls in quotes, some don't when reporting things like backgroundImage)\n\t\t\t_camelFunc = function(s, g) { return g.toUpperCase(); },\n\t\t\t_horizExp = /(?:Left|Right|Width)/i,\n\t\t\t_ieGetMatrixExp = /(M11|M12|M21|M22)=[\\d\\-\\.e]+/gi,\n\t\t\t_ieSetMatrixExp = /progid\\:DXImageTransform\\.Microsoft\\.Matrix\\(.+?\\)/i,\n\t\t\t_commasOutsideParenExp = /,(?=[^\\)]*(?:\\(|$))/gi, //finds any commas that are not within parenthesis\n\t\t\t_complexExp = /[\\s,\\(]/i, //for testing a string to find if it has a space, comma, or open parenthesis (clues that it's a complex value)\n\t\t\t_DEG2RAD = Math.PI / 180,\n\t\t\t_RAD2DEG = 180 / Math.PI,\n\t\t\t_forcePT = {},\n\t\t\t_dummyElement = {style:{}},\n\t\t\t_doc = _gsScope.document || {createElement: function() {return _dummyElement;}},\n\t\t\t_createElement = function(type, ns) {\n\t\t\t\treturn _doc.createElementNS ? _doc.createElementNS(ns || \"http://www.w3.org/1999/xhtml\", type) : _doc.createElement(type);\n\t\t\t},\n\t\t\t_tempDiv = _createElement(\"div\"),\n\t\t\t_tempImg = _createElement(\"img\"),\n\t\t\t_internals = CSSPlugin._internals = {_specialProps:_specialProps}, //provides a hook to a few internal methods that we need to access from inside other plugins\n\t\t\t_agent = (_gsScope.navigator || {}).userAgent || \"\",\n\t\t\t_autoRound,\n\t\t\t_reqSafariFix, //we won't apply the Safari transform fix until we actually come across a tween that affects a transform property (to maintain best performance).\n\n\t\t\t_isSafari,\n\t\t\t_isFirefox, //Firefox has a bug that causes 3D transformed elements to randomly disappear unless a repaint is forced after each update on each element.\n\t\t\t_isSafariLT6, //Safari (and Android 4 which uses a flavor of Safari) has a bug that prevents changes to \"top\" and \"left\" properties from rendering properly if changed on the same frame as a transform UNLESS we set the element's WebkitBackfaceVisibility to hidden (weird, I know). Doing this for Android 3 and earlier seems to actually cause other problems, though (fun!)\n\t\t\t_ieVers,\n\t\t\t_supportsOpacity = (function() { //we set _isSafari, _ieVers, _isFirefox, and _supportsOpacity all in one function here to reduce file size slightly, especially in the minified version.\n\t\t\t\tvar i = _agent.indexOf(\"Android\"),\n\t\t\t\t\ta = _createElement(\"a\");\n\t\t\t\t_isSafari = (_agent.indexOf(\"Safari\") !== -1 && _agent.indexOf(\"Chrome\") === -1 && (i === -1 || parseFloat(_agent.substr(i+8, 2)) > 3));\n\t\t\t\t_isSafariLT6 = (_isSafari && (parseFloat(_agent.substr(_agent.indexOf(\"Version/\")+8, 2)) < 6));\n\t\t\t\t_isFirefox = (_agent.indexOf(\"Firefox\") !== -1);\n\t\t\t\tif ((/MSIE ([0-9]{1,}[\\.0-9]{0,})/).exec(_agent) || (/Trident\\/.*rv:([0-9]{1,}[\\.0-9]{0,})/).exec(_agent)) {\n\t\t\t\t\t_ieVers = parseFloat( RegExp.$1 );\n\t\t\t\t}\n\t\t\t\tif (!a) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\ta.style.cssText = \"top:1px;opacity:.55;\";\n\t\t\t\treturn /^0.55/.test(a.style.opacity);\n\t\t\t}()),\n\t\t\t_getIEOpacity = function(v) {\n\t\t\t\treturn (_opacityExp.test( ((typeof(v) === \"string\") ? v : (v.currentStyle ? v.currentStyle.filter : v.style.filter) || \"\") ) ? ( parseFloat( RegExp.$1 ) / 100 ) : 1);\n\t\t\t},\n\t\t\t_log = function(s) {//for logging messages, but in a way that won't throw errors in old versions of IE.\n\t\t\t\tif (_gsScope.console) {\n\t\t\t\t\tconsole.log(s);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_target, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params\n\t\t\t_index, //when initting a CSSPlugin, we set this variable so that we can access it from within many other functions without having to pass it around as params\n\n\t\t\t_prefixCSS = \"\", //the non-camelCase vendor prefix like \"-o-\", \"-moz-\", \"-ms-\", or \"-webkit-\"\n\t\t\t_prefix = \"\", //camelCase vendor prefix like \"O\", \"ms\", \"Webkit\", or \"Moz\".\n\n\t\t\t// @private feed in a camelCase property name like \"transform\" and it will check to see if it is valid as-is or if it needs a vendor prefix. It returns the corrected camelCase property name (i.e. \"WebkitTransform\" or \"MozTransform\" or \"transform\" or null if no such property is found, like if the browser is IE8 or before, \"transform\" won't be found at all)\n\t\t\t_checkPropPrefix = function(p, e) {\n\t\t\t\te = e || _tempDiv;\n\t\t\t\tvar s = e.style,\n\t\t\t\t\ta, i;\n\t\t\t\tif (s[p] !== undefined) {\n\t\t\t\t\treturn p;\n\t\t\t\t}\n\t\t\t\tp = p.charAt(0).toUpperCase() + p.substr(1);\n\t\t\t\ta = [\"O\",\"Moz\",\"ms\",\"Ms\",\"Webkit\"];\n\t\t\t\ti = 5;\n\t\t\t\twhile (--i > -1 && s[a[i]+p] === undefined) { }\n\t\t\t\tif (i >= 0) {\n\t\t\t\t\t_prefix = (i === 3) ? \"ms\" : a[i];\n\t\t\t\t\t_prefixCSS = \"-\" + _prefix.toLowerCase() + \"-\";\n\t\t\t\t\treturn _prefix + p;\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t},\n\n\t\t\t_getComputedStyle = (typeof(window) !== \"undefined\" ? window : _doc.defaultView || {getComputedStyle:function() {}}).getComputedStyle,\n\n\t\t\t/**\n\t\t\t * @private Returns the css style for a particular property of an element. For example, to get whatever the current \"left\" css value for an element with an ID of \"myElement\", you could do:\n\t\t\t * var currentLeft = CSSPlugin.getStyle( document.getElementById(\"myElement\"), \"left\");\n\t\t\t *\n\t\t\t * @param {!Object} t Target element whose style property you want to query\n\t\t\t * @param {!string} p Property name (like \"left\" or \"top\" or \"marginTop\", etc.)\n\t\t\t * @param {Object=} cs Computed style object. This just provides a way to speed processing if you're going to get several properties on the same element in quick succession - you can reuse the result of the getComputedStyle() call.\n\t\t\t * @param {boolean=} calc If true, the value will not be read directly from the element's \"style\" property (if it exists there), but instead the getComputedStyle() result will be used. This can be useful when you want to ensure that the browser itself is interpreting the value.\n\t\t\t * @param {string=} dflt Default value that should be returned in the place of null, \"none\", \"auto\" or \"auto auto\".\n\t\t\t * @return {?string} The current property value\n\t\t\t */\n\t\t\t_getStyle = CSSPlugin.getStyle = function(t, p, cs, calc, dflt) {\n\t\t\t\tvar rv;\n\t\t\t\tif (!_supportsOpacity) if (p === \"opacity\") { //several versions of IE don't use the standard \"opacity\" property - they use things like filter:alpha(opacity=50), so we parse that here.\n\t\t\t\t\treturn _getIEOpacity(t);\n\t\t\t\t}\n\t\t\t\tif (!calc && t.style[p]) {\n\t\t\t\t\trv = t.style[p];\n\t\t\t\t} else if ((cs = cs || _getComputedStyle(t))) {\n\t\t\t\t\trv = cs[p] || cs.getPropertyValue(p) || cs.getPropertyValue(p.replace(_capsExp, \"-$1\").toLowerCase());\n\t\t\t\t} else if (t.currentStyle) {\n\t\t\t\t\trv = t.currentStyle[p];\n\t\t\t\t}\n\t\t\t\treturn (dflt != null && (!rv || rv === \"none\" || rv === \"auto\" || rv === \"auto auto\")) ? dflt : rv;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Pass the target element, the property name, the numeric value, and the suffix (like \"%\", \"em\", \"px\", etc.) and it will spit back the equivalent pixel number.\n\t\t\t * @param {!Object} t Target element\n\t\t\t * @param {!string} p Property name (like \"left\", \"top\", \"marginLeft\", etc.)\n\t\t\t * @param {!number} v Value\n\t\t\t * @param {string=} sfx Suffix (like \"px\" or \"%\" or \"em\")\n\t\t\t * @param {boolean=} recurse If true, the call is a recursive one. In some browsers (like IE7/8), occasionally the value isn't accurately reported initially, but if we run the function again it will take effect.\n\t\t\t * @return {number} value in pixels\n\t\t\t */\n\t\t\t_convertToPixels = _internals.convertToPixels = function(t, p, v, sfx, recurse) {\n\t\t\t\tif (sfx === \"px\" || (!sfx && p !== \"lineHeight\")) { return v; }\n\t\t\t\tif (sfx === \"auto\" || !v) { return 0; }\n\t\t\t\tvar horiz = _horizExp.test(p),\n\t\t\t\t\tnode = t,\n\t\t\t\t\tstyle = _tempDiv.style,\n\t\t\t\t\tneg = (v < 0),\n\t\t\t\t\tprecise = (v === 1),\n\t\t\t\t\tpix, cache, time;\n\t\t\t\tif (neg) {\n\t\t\t\t\tv = -v;\n\t\t\t\t}\n\t\t\t\tif (precise) {\n\t\t\t\t\tv *= 100;\n\t\t\t\t}\n\t\t\t\tif (p === \"lineHeight\" && !sfx) { //special case of when a simple lineHeight (without a unit) is used. Set it to the value, read back the computed value, and then revert.\n\t\t\t\t\tcache = _getComputedStyle(t).lineHeight;\n\t\t\t\t\tt.style.lineHeight = v;\n\t\t\t\t\tpix = parseFloat(_getComputedStyle(t).lineHeight);\n\t\t\t\t\tt.style.lineHeight = cache;\n\t\t\t\t} else if (sfx === \"%\" && p.indexOf(\"border\") !== -1) {\n\t\t\t\t\tpix = (v / 100) * (horiz ? t.clientWidth : t.clientHeight);\n\t\t\t\t} else {\n\t\t\t\t\tstyle.cssText = \"border:0 solid red;position:\" + _getStyle(t, \"position\") + \";line-height:0;\";\n\t\t\t\t\tif (sfx === \"%\" || !node.appendChild || sfx.charAt(0) === \"v\" || sfx === \"rem\") {\n\t\t\t\t\t\tnode = t.parentNode || _doc.body;\n\t\t\t\t\t\tif (_getStyle(node, \"display\").indexOf(\"flex\") !== -1) { //Edge and IE11 have a bug that causes offsetWidth to report as 0 if the container has display:flex and the child is position:relative. Switching to position: absolute solves it.\n\t\t\t\t\t\t\tstyle.position = \"absolute\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcache = node._gsCache;\n\t\t\t\t\t\ttime = TweenLite.ticker.frame;\n\t\t\t\t\t\tif (cache && horiz && cache.time === time) { //performance optimization: we record the width of elements along with the ticker frame so that we can quickly get it again on the same tick (seems relatively safe to assume it wouldn't change on the same tick)\n\t\t\t\t\t\t\treturn cache.width * v / 100;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstyle[(horiz ? \"width\" : \"height\")] = v + sfx;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstyle[(horiz ? \"borderLeftWidth\" : \"borderTopWidth\")] = v + sfx;\n\t\t\t\t\t}\n\t\t\t\t\tnode.appendChild(_tempDiv);\n\t\t\t\t\tpix = parseFloat(_tempDiv[(horiz ? \"offsetWidth\" : \"offsetHeight\")]);\n\t\t\t\t\tnode.removeChild(_tempDiv);\n\t\t\t\t\tif (horiz && sfx === \"%\" && CSSPlugin.cacheWidths !== false) {\n\t\t\t\t\t\tcache = node._gsCache = node._gsCache || {};\n\t\t\t\t\t\tcache.time = time;\n\t\t\t\t\t\tcache.width = pix / v * 100;\n\t\t\t\t\t}\n\t\t\t\t\tif (pix === 0 && !recurse) {\n\t\t\t\t\t\tpix = _convertToPixels(t, p, v, sfx, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (precise) {\n\t\t\t\t\tpix /= 100;\n\t\t\t\t}\n\t\t\t\treturn neg ? -pix : pix;\n\t\t\t},\n\t\t\t_calculateOffset = _internals.calculateOffset = function(t, p, cs) { //for figuring out \"top\" or \"left\" in px when it's \"auto\". We need to factor in margin with the offsetLeft/offsetTop\n\t\t\t\tif (_getStyle(t, \"position\", cs) !== \"absolute\") { return 0; }\n\t\t\t\tvar dim = ((p === \"left\") ? \"Left\" : \"Top\"),\n\t\t\t\t\tv = _getStyle(t, \"margin\" + dim, cs);\n\t\t\t\treturn t[\"offset\" + dim] - (_convertToPixels(t, p, parseFloat(v), v.replace(_suffixExp, \"\")) || 0);\n\t\t\t},\n\n\t\t\t// @private returns at object containing ALL of the style properties in camelCase and their associated values.\n\t\t\t_getAllStyles = function(t, cs) {\n\t\t\t\tvar s = {},\n\t\t\t\t\ti, tr, p;\n\t\t\t\tif ((cs = cs || _getComputedStyle(t, null))) {\n\t\t\t\t\tif ((i = cs.length)) {\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tp = cs[i];\n\t\t\t\t\t\t\tif (p.indexOf(\"-transform\") === -1 || _transformPropCSS === p) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed (\"transform\" and \"WebkitTransform\"), so we must weed out the extra one here.\n\t\t\t\t\t\t\t\ts[p.replace(_camelExp, _camelFunc)] = cs.getPropertyValue(p);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else { //some browsers behave differently - cs.length is always 0, so we must do a for...in loop.\n\t\t\t\t\t\tfor (i in cs) {\n\t\t\t\t\t\t\tif (i.indexOf(\"Transform\") === -1 || _transformProp === i) { //Some webkit browsers duplicate transform values, one non-prefixed and one prefixed (\"transform\" and \"WebkitTransform\"), so we must weed out the extra one here.\n\t\t\t\t\t\t\t\ts[i] = cs[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ((cs = t.currentStyle || t.style)) {\n\t\t\t\t\tfor (i in cs) {\n\t\t\t\t\t\tif (typeof(i) === \"string\" && s[i] === undefined) {\n\t\t\t\t\t\t\ts[i.replace(_camelExp, _camelFunc)] = cs[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!_supportsOpacity) {\n\t\t\t\t\ts.opacity = _getIEOpacity(t);\n\t\t\t\t}\n\t\t\t\ttr = _getTransform(t, cs, false);\n\t\t\t\ts.rotation = tr.rotation;\n\t\t\t\ts.skewX = tr.skewX;\n\t\t\t\ts.scaleX = tr.scaleX;\n\t\t\t\ts.scaleY = tr.scaleY;\n\t\t\t\ts.x = tr.x;\n\t\t\t\ts.y = tr.y;\n\t\t\t\tif (_supports3D) {\n\t\t\t\t\ts.z = tr.z;\n\t\t\t\t\ts.rotationX = tr.rotationX;\n\t\t\t\t\ts.rotationY = tr.rotationY;\n\t\t\t\t\ts.scaleZ = tr.scaleZ;\n\t\t\t\t}\n\t\t\t\tif (s.filters) {\n\t\t\t\t\tdelete s.filters;\n\t\t\t\t}\n\t\t\t\treturn s;\n\t\t\t},\n\n\t\t\t// @private analyzes two style objects (as returned by _getAllStyles()) and only looks for differences between them that contain tweenable values (like a number or color). It returns an object with a \"difs\" property which refers to an object containing only those isolated properties and values for tweening, and a \"firstMPT\" property which refers to the first MiniPropTween instance in a linked list that recorded all the starting values of the different properties so that we can revert to them at the end or beginning of the tween - we don't want the cascading to get messed up. The forceLookup parameter is an optional generic object with properties that should be forced into the results - this is necessary for className tweens that are overwriting others because imagine a scenario where a rollover/rollout adds/removes a class and the user swipes the mouse over the target SUPER fast, thus nothing actually changed yet and the subsequent comparison of the properties would indicate they match (especially when px rounding is taken into consideration), thus no tweening is necessary even though it SHOULD tween and remove those properties after the tween (otherwise the inline styles will contaminate things). See the className SpecialProp code for details.\n\t\t\t_cssDif = function(t, s1, s2, vars, forceLookup) {\n\t\t\t\tvar difs = {},\n\t\t\t\t\tstyle = t.style,\n\t\t\t\t\tval, p, mpt;\n\t\t\t\tfor (p in s2) {\n\t\t\t\t\tif (p !== \"cssText\") if (p !== \"length\") if (isNaN(p)) if (s1[p] !== (val = s2[p]) || (forceLookup && forceLookup[p])) if (p.indexOf(\"Origin\") === -1) if (typeof(val) === \"number\" || typeof(val) === \"string\") {\n\t\t\t\t\t\tdifs[p] = (val === \"auto\" && (p === \"left\" || p === \"top\")) ? _calculateOffset(t, p) : ((val === \"\" || val === \"auto\" || val === \"none\") && typeof(s1[p]) === \"string\" && s1[p].replace(_NaNExp, \"\") !== \"\") ? 0 : val; //if the ending value is defaulting (\"\" or \"auto\"), we check the starting value and if it can be parsed into a number (a string which could have a suffix too, like 700px), then we swap in 0 for \"\" or \"auto\" so that things actually tween.\n\t\t\t\t\t\tif (style[p] !== undefined) { //for className tweens, we must remember which properties already existed inline - the ones that didn't should be removed when the tween isn't in progress because they were only introduced to facilitate the transition between classes.\n\t\t\t\t\t\t\tmpt = new MiniPropTween(style, p, style[p], mpt);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (vars) {\n\t\t\t\t\tfor (p in vars) { //copy properties (except className)\n\t\t\t\t\t\tif (p !== \"className\") {\n\t\t\t\t\t\t\tdifs[p] = vars[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn {difs:difs, firstMPT:mpt};\n\t\t\t},\n\t\t\t_dimensions = {width:[\"Left\",\"Right\"], height:[\"Top\",\"Bottom\"]},\n\t\t\t_margins = [\"marginLeft\",\"marginRight\",\"marginTop\",\"marginBottom\"],\n\n\t\t\t/**\n\t\t\t * @private Gets the width or height of an element\n\t\t\t * @param {!Object} t Target element\n\t\t\t * @param {!string} p Property name (\"width\" or \"height\")\n\t\t\t * @param {Object=} cs Computed style object (if one exists). Just a speed optimization.\n\t\t\t * @return {number} Dimension (in pixels)\n\t\t\t */\n\t\t\t_getDimension = function(t, p, cs) {\n\t\t\t\tif ((t.nodeName + \"\").toLowerCase() === \"svg\") { //Chrome no longer supports offsetWidth/offsetHeight on SVG elements.\n\t\t\t\t\treturn (cs || _getComputedStyle(t))[p] || 0;\n\t\t\t\t} else if (t.getCTM && _isSVG(t)) {\n\t\t\t\t\treturn t.getBBox()[p] || 0;\n\t\t\t\t}\n\t\t\t\tvar v = parseFloat((p === \"width\") ? t.offsetWidth : t.offsetHeight),\n\t\t\t\t\ta = _dimensions[p],\n\t\t\t\t\ti = a.length;\n\t\t\t\tcs = cs || _getComputedStyle(t, null);\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tv -= parseFloat( _getStyle(t, \"padding\" + a[i], cs, true) ) || 0;\n\t\t\t\t\tv -= parseFloat( _getStyle(t, \"border\" + a[i] + \"Width\", cs, true) ) || 0;\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t},\n\n\t\t\t// @private Parses position-related complex strings like \"top left\" or \"50px 10px\" or \"70% 20%\", etc. which are used for things like transformOrigin or backgroundPosition. Optionally decorates a supplied object (recObj) with the following properties: \"ox\" (offsetX), \"oy\" (offsetY), \"oxp\" (if true, \"ox\" is a percentage not a pixel value), and \"oxy\" (if true, \"oy\" is a percentage not a pixel value)\n\t\t\t_parsePosition = function(v, recObj) {\n\t\t\t\tif (v === \"contain\" || v === \"auto\" || v === \"auto auto\") { //note: Firefox uses \"auto auto\" as default whereas Chrome uses \"auto\".\n\t\t\t\t\treturn v + \" \";\n\t\t\t\t}\n\t\t\t\tif (v == null || v === \"\") {\n\t\t\t\t\tv = \"0 0\";\n\t\t\t\t}\n\t\t\t\tvar a = v.split(\" \"),\n\t\t\t\t\tx = (v.indexOf(\"left\") !== -1) ? \"0%\" : (v.indexOf(\"right\") !== -1) ? \"100%\" : a[0],\n\t\t\t\t\ty = (v.indexOf(\"top\") !== -1) ? \"0%\" : (v.indexOf(\"bottom\") !== -1) ? \"100%\" : a[1],\n\t\t\t\t\ti;\n\t\t\t\tif (a.length > 3 && !recObj) { //multiple positions\n\t\t\t\t\ta = v.split(\", \").join(\",\").split(\",\");\n\t\t\t\t\tv = [];\n\t\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\t\tv.push(_parsePosition(a[i]));\n\t\t\t\t\t}\n\t\t\t\t\treturn v.join(\",\");\n\t\t\t\t}\n\t\t\t\tif (y == null) {\n\t\t\t\t\ty = (x === \"center\") ? \"50%\" : \"0\";\n\t\t\t\t} else if (y === \"center\") {\n\t\t\t\t\ty = \"50%\";\n\t\t\t\t}\n\t\t\t\tif (x === \"center\" || (isNaN(parseFloat(x)) && (x + \"\").indexOf(\"=\") === -1)) { //remember, the user could flip-flop the values and say \"bottom center\" or \"center bottom\", etc. \"center\" is ambiguous because it could be used to describe horizontal or vertical, hence the isNaN(). If there's an \"=\" sign in the value, it's relative.\n\t\t\t\t\tx = \"50%\";\n\t\t\t\t}\n\t\t\t\tv = x + \" \" + y + ((a.length > 2) ? \" \" + a[2] : \"\");\n\t\t\t\tif (recObj) {\n\t\t\t\t\trecObj.oxp = (x.indexOf(\"%\") !== -1);\n\t\t\t\t\trecObj.oyp = (y.indexOf(\"%\") !== -1);\n\t\t\t\t\trecObj.oxr = (x.charAt(1) === \"=\");\n\t\t\t\t\trecObj.oyr = (y.charAt(1) === \"=\");\n\t\t\t\t\trecObj.ox = parseFloat(x.replace(_NaNExp, \"\"));\n\t\t\t\t\trecObj.oy = parseFloat(y.replace(_NaNExp, \"\"));\n\t\t\t\t\trecObj.v = v;\n\t\t\t\t}\n\t\t\t\treturn recObj || v;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Takes an ending value (typically a string, but can be a number) and a starting value and returns the change between the two, looking for relative value indicators like += and -= and it also ignores suffixes (but make sure the ending value starts with a number or +=/-= and that the starting value is a NUMBER!)\n\t\t\t * @param {(number|string)} e End value which is typically a string, but could be a number\n\t\t\t * @param {(number|string)} b Beginning value which is typically a string but could be a number\n\t\t\t * @return {number} Amount of change between the beginning and ending values (relative values that have a \"+=\" or \"-=\" are recognized)\n\t\t\t */\n\t\t\t_parseChange = function(e, b) {\n\t\t\t\tif (typeof(e) === \"function\") {\n\t\t\t\t\te = e(_index, _target);\n\t\t\t\t}\n\t\t\t\treturn (typeof(e) === \"string\" && e.charAt(1) === \"=\") ? parseInt(e.charAt(0) + \"1\", 10) * parseFloat(e.substr(2)) : (parseFloat(e) - parseFloat(b)) || 0;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Takes a value and a default number, checks if the value is relative, null, or numeric and spits back a normalized number accordingly. Primarily used in the _parseTransform() function.\n\t\t\t * @param {Object} v Value to be parsed\n\t\t\t * @param {!number} d Default value (which is also used for relative calculations if \"+=\" or \"-=\" is found in the first parameter)\n\t\t\t * @return {number} Parsed value\n\t\t\t */\n\t\t\t_parseVal = function(v, d) {\n\t\t\t\tif (typeof(v) === \"function\") {\n\t\t\t\t\tv = v(_index, _target);\n\t\t\t\t}\n\t\t\t\treturn (v == null) ? d : (typeof(v) === \"string\" && v.charAt(1) === \"=\") ? parseInt(v.charAt(0) + \"1\", 10) * parseFloat(v.substr(2)) + d : parseFloat(v) || 0;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Translates strings like \"40deg\" or \"40\" or 40rad\" or \"+=40deg\" or \"270_short\" or \"-90_cw\" or \"+=45_ccw\" to a numeric radian angle. Of course a starting/default value must be fed in too so that relative values can be calculated properly.\n\t\t\t * @param {Object} v Value to be parsed\n\t\t\t * @param {!number} d Default value (which is also used for relative calculations if \"+=\" or \"-=\" is found in the first parameter)\n\t\t\t * @param {string=} p property name for directionalEnd (optional - only used when the parsed value is directional (\"_short\", \"_cw\", or \"_ccw\" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation). Property name would be \"rotation\", \"rotationX\", or \"rotationY\"\n\t\t\t * @param {Object=} directionalEnd An object that will store the raw end values for directional angles (\"_short\", \"_cw\", or \"_ccw\" suffix). We need a way to store the uncompensated value so that at the end of the tween, we set it to exactly what was requested with no directional compensation.\n\t\t\t * @return {number} parsed angle in radians\n\t\t\t */\n\t\t\t_parseAngle = function(v, d, p, directionalEnd) {\n\t\t\t\tvar min = 0.000001,\n\t\t\t\t\tcap, split, dif, result, isRelative;\n\t\t\t\tif (typeof(v) === \"function\") {\n\t\t\t\t\tv = v(_index, _target);\n\t\t\t\t}\n\t\t\t\tif (v == null) {\n\t\t\t\t\tresult = d;\n\t\t\t\t} else if (typeof(v) === \"number\") {\n\t\t\t\t\tresult = v;\n\t\t\t\t} else {\n\t\t\t\t\tcap = 360;\n\t\t\t\t\tsplit = v.split(\"_\");\n\t\t\t\t\tisRelative = (v.charAt(1) === \"=\");\n\t\t\t\t\tdif = (isRelative ? parseInt(v.charAt(0) + \"1\", 10) * parseFloat(split[0].substr(2)) : parseFloat(split[0])) * ((v.indexOf(\"rad\") === -1) ? 1 : _RAD2DEG) - (isRelative ? 0 : d);\n\t\t\t\t\tif (split.length) {\n\t\t\t\t\t\tif (directionalEnd) {\n\t\t\t\t\t\t\tdirectionalEnd[p] = d + dif;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (v.indexOf(\"short\") !== -1) {\n\t\t\t\t\t\t\tdif = dif % cap;\n\t\t\t\t\t\t\tif (dif !== dif % (cap / 2)) {\n\t\t\t\t\t\t\t\tdif = (dif < 0) ? dif + cap : dif - cap;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (v.indexOf(\"_cw\") !== -1 && dif < 0) {\n\t\t\t\t\t\t\tdif = ((dif + cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;\n\t\t\t\t\t\t} else if (v.indexOf(\"ccw\") !== -1 && dif > 0) {\n\t\t\t\t\t\t\tdif = ((dif - cap * 9999999999) % cap) - ((dif / cap) | 0) * cap;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresult = d + dif;\n\t\t\t\t}\n\t\t\t\tif (result < min && result > -min) {\n\t\t\t\t\tresult = 0;\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\t_colorLookup = {aqua:[0,255,255],\n\t\t\t\tlime:[0,255,0],\n\t\t\t\tsilver:[192,192,192],\n\t\t\t\tblack:[0,0,0],\n\t\t\t\tmaroon:[128,0,0],\n\t\t\t\tteal:[0,128,128],\n\t\t\t\tblue:[0,0,255],\n\t\t\t\tnavy:[0,0,128],\n\t\t\t\twhite:[255,255,255],\n\t\t\t\tfuchsia:[255,0,255],\n\t\t\t\tolive:[128,128,0],\n\t\t\t\tyellow:[255,255,0],\n\t\t\t\torange:[255,165,0],\n\t\t\t\tgray:[128,128,128],\n\t\t\t\tpurple:[128,0,128],\n\t\t\t\tgreen:[0,128,0],\n\t\t\t\tred:[255,0,0],\n\t\t\t\tpink:[255,192,203],\n\t\t\t\tcyan:[0,255,255],\n\t\t\t\ttransparent:[255,255,255,0]},\n\n\t\t\t_hue = function(h, m1, m2) {\n\t\t\t\th = (h < 0) ? h + 1 : (h > 1) ? h - 1 : h;\n\t\t\t\treturn ((((h * 6 < 1) ? m1 + (m2 - m1) * h * 6 : (h < 0.5) ? m2 : (h * 3 < 2) ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * 255) + 0.5) | 0;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%)) into an array with 3 elements for red, green, and blue or if toHSL parameter is true, it will populate the array with hue, saturation, and lightness values. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases it will be populated with numbers).\n\t\t\t * @param {(string|number)} v The value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.\n\t\t\t * @param {(boolean)} toHSL If true, an hsl() or hsla() value will be returned instead of rgb() or rgba()\n\t\t\t * @return {Array.<number>} An array containing red, green, and blue (and optionally alpha) in that order, or if the toHSL parameter was true, the array will contain hue, saturation and lightness (and optionally alpha) in that order. Always numbers unless there's a relative prefix found in an hsl() or hsla() string and toHSL is true.\n\t\t\t */\n\t\t\t_parseColor = CSSPlugin.parseColor = function(v, toHSL) {\n\t\t\t\tvar a, r, g, b, h, s, l, max, min, d, wasHSL;\n\t\t\t\tif (!v) {\n\t\t\t\t\ta = _colorLookup.black;\n\t\t\t\t} else if (typeof(v) === \"number\") {\n\t\t\t\t\ta = [v >> 16, (v >> 8) & 255, v & 255];\n\t\t\t\t} else {\n\t\t\t\t\tif (v.charAt(v.length - 1) === \",\") { //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:\"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)\" - in this example \"blue,\" has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.\n\t\t\t\t\t\tv = v.substr(0, v.length - 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (_colorLookup[v]) {\n\t\t\t\t\t\ta = _colorLookup[v];\n\t\t\t\t\t} else if (v.charAt(0) === \"#\") {\n\t\t\t\t\t\tif (v.length === 4) { //for shorthand like #9F0\n\t\t\t\t\t\t\tr = v.charAt(1);\n\t\t\t\t\t\t\tg = v.charAt(2);\n\t\t\t\t\t\t\tb = v.charAt(3);\n\t\t\t\t\t\t\tv = \"#\" + r + r + g + g + b + b;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tv = parseInt(v.substr(1), 16);\n\t\t\t\t\t\ta = [v >> 16, (v >> 8) & 255, v & 255];\n\t\t\t\t\t} else if (v.substr(0, 3) === \"hsl\") {\n\t\t\t\t\t\ta = wasHSL = v.match(_numExp);\n\t\t\t\t\t\tif (!toHSL) {\n\t\t\t\t\t\t\th = (Number(a[0]) % 360) / 360;\n\t\t\t\t\t\t\ts = Number(a[1]) / 100;\n\t\t\t\t\t\t\tl = Number(a[2]) / 100;\n\t\t\t\t\t\t\tg = (l <= 0.5) ? l * (s + 1) : l + s - l * s;\n\t\t\t\t\t\t\tr = l * 2 - g;\n\t\t\t\t\t\t\tif (a.length > 3) {\n\t\t\t\t\t\t\t\ta[3] = Number(a[3]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ta[0] = _hue(h + 1 / 3, r, g);\n\t\t\t\t\t\t\ta[1] = _hue(h, r, g);\n\t\t\t\t\t\t\ta[2] = _hue(h - 1 / 3, r, g);\n\t\t\t\t\t\t} else if (v.indexOf(\"=\") !== -1) { //if relative values are found, just return the raw strings with the relative prefixes in place.\n\t\t\t\t\t\t\treturn v.match(_relNumExp);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ta = v.match(_numExp) || _colorLookup.transparent;\n\t\t\t\t\t}\n\t\t\t\t\ta[0] = Number(a[0]);\n\t\t\t\t\ta[1] = Number(a[1]);\n\t\t\t\t\ta[2] = Number(a[2]);\n\t\t\t\t\tif (a.length > 3) {\n\t\t\t\t\t\ta[3] = Number(a[3]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (toHSL && !wasHSL) {\n\t\t\t\t\tr = a[0] / 255;\n\t\t\t\t\tg = a[1] / 255;\n\t\t\t\t\tb = a[2] / 255;\n\t\t\t\t\tmax = Math.max(r, g, b);\n\t\t\t\t\tmin = Math.min(r, g, b);\n\t\t\t\t\tl = (max + min) / 2;\n\t\t\t\t\tif (max === min) {\n\t\t\t\t\t\th = s = 0;\n\t\t\t\t\t} else {\n\t\t\t\t\t\td = max - min;\n\t\t\t\t\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\t\t\t\t\th = (max === r) ? (g - b) / d + (g < b ? 6 : 0) : (max === g) ? (b - r) / d + 2 : (r - g) / d + 4;\n\t\t\t\t\t\th *= 60;\n\t\t\t\t\t}\n\t\t\t\t\ta[0] = (h + 0.5) | 0;\n\t\t\t\t\ta[1] = (s * 100 + 0.5) | 0;\n\t\t\t\t\ta[2] = (l * 100 + 0.5) | 0;\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t},\n\t\t\t_formatColors = function(s, toHSL) {\n\t\t\t\tvar colors = s.match(_colorExp) || [],\n\t\t\t\t\tcharIndex = 0,\n\t\t\t\t\tparsed = \"\",\n\t\t\t\t\ti, color, temp;\n\t\t\t\tif (!colors.length) {\n\t\t\t\t\treturn s;\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < colors.length; i++) {\n\t\t\t\t\tcolor = colors[i];\n\t\t\t\t\ttemp = s.substr(charIndex, s.indexOf(color, charIndex)-charIndex);\n\t\t\t\t\tcharIndex += temp.length + color.length;\n\t\t\t\t\tcolor = _parseColor(color, toHSL);\n\t\t\t\t\tif (color.length === 3) {\n\t\t\t\t\t\tcolor.push(1);\n\t\t\t\t\t}\n\t\t\t\t\tparsed += temp + (toHSL ? \"hsla(\" + color[0] + \",\" + color[1] + \"%,\" + color[2] + \"%,\" + color[3] : \"rgba(\" + color.join(\",\")) + \")\";\n\t\t\t\t}\n\t\t\t\treturn parsed + s.substr(charIndex);\n\t\t\t},\n\t\t\t_colorExp = \"(?:\\\\b(?:(?:rgb|rgba|hsl|hsla)\\\\(.+?\\\\))|\\\\B#(?:[0-9a-f]{3}){1,2}\\\\b\"; //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.\n\n\t\tfor (p in _colorLookup) {\n\t\t\t_colorExp += \"|\" + p + \"\\\\b\";\n\t\t}\n\t\t_colorExp = new RegExp(_colorExp+\")\", \"gi\");\n\n\t\tCSSPlugin.colorStringFilter = function(a) {\n\t\t\tvar combined = a[0] + \" \" + a[1],\n\t\t\t\ttoHSL;\n\t\t\tif (_colorExp.test(combined)) {\n\t\t\t\ttoHSL = (combined.indexOf(\"hsl(\") !== -1 || combined.indexOf(\"hsla(\") !== -1);\n\t\t\t\ta[0] = _formatColors(a[0], toHSL);\n\t\t\t\ta[1] = _formatColors(a[1], toHSL);\n\t\t\t}\n\t\t\t_colorExp.lastIndex = 0;\n\t\t};\n\n\t\tif (!TweenLite.defaultStringFilter) {\n\t\t\tTweenLite.defaultStringFilter = CSSPlugin.colorStringFilter;\n\t\t}\n\n\t\t/**\n\t\t * @private Returns a formatter function that handles taking a string (or number in some cases) and returning a consistently formatted one in terms of delimiters, quantity of values, etc. For example, we may get boxShadow values defined as \"0px red\" or \"0px 0px 10px rgb(255,0,0)\" or \"0px 0px 20px 20px #F00\" and we need to ensure that what we get back is described with 4 numbers and a color. This allows us to feed it into the _parseComplex() method and split the values up appropriately. The neat thing about this _getFormatter() function is that the dflt defines a pattern as well as a default, so for example, _getFormatter(\"0px 0px 0px 0px #777\", true) not only sets the default as 0px for all distances and #777 for the color, but also sets the pattern such that 4 numbers and a color will always get returned.\n\t\t * @param {!string} dflt The default value and pattern to follow. So \"0px 0px 0px 0px #777\" will ensure that 4 numbers and a color will always get returned.\n\t\t * @param {boolean=} clr If true, the values should be searched for color-related data. For example, boxShadow values typically contain a color whereas borderRadius don't.\n\t\t * @param {boolean=} collapsible If true, the value is a top/left/right/bottom style one that acts like margin or padding, where if only one value is received, it's used for all 4; if 2 are received, the first is duplicated for 3rd (bottom) and the 2nd is duplicated for the 4th spot (left), etc.\n\t\t * @return {Function} formatter function\n\t\t */\n\t\tvar _getFormatter = function(dflt, clr, collapsible, multi) {\n\t\t\t\tif (dflt == null) {\n\t\t\t\t\treturn function(v) {return v;};\n\t\t\t\t}\n\t\t\t\tvar dColor = clr ? (dflt.match(_colorExp) || [\"\"])[0] : \"\",\n\t\t\t\t\tdVals = dflt.split(dColor).join(\"\").match(_valuesExp) || [],\n\t\t\t\t\tpfx = dflt.substr(0, dflt.indexOf(dVals[0])),\n\t\t\t\t\tsfx = (dflt.charAt(dflt.length - 1) === \")\") ? \")\" : \"\",\n\t\t\t\t\tdelim = (dflt.indexOf(\" \") !== -1) ? \" \" : \",\",\n\t\t\t\t\tnumVals = dVals.length,\n\t\t\t\t\tdSfx = (numVals > 0) ? dVals[0].replace(_numExp, \"\") : \"\",\n\t\t\t\t\tformatter;\n\t\t\t\tif (!numVals) {\n\t\t\t\t\treturn function(v) {return v;};\n\t\t\t\t}\n\t\t\t\tif (clr) {\n\t\t\t\t\tformatter = function(v) {\n\t\t\t\t\t\tvar color, vals, i, a;\n\t\t\t\t\t\tif (typeof(v) === \"number\") {\n\t\t\t\t\t\t\tv += dSfx;\n\t\t\t\t\t\t} else if (multi && _commasOutsideParenExp.test(v)) {\n\t\t\t\t\t\t\ta = v.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\t\t\t\ta[i] = formatter(a[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn a.join(\",\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcolor = (v.match(_colorExp) || [dColor])[0];\n\t\t\t\t\t\tvals = v.split(color).join(\"\").match(_valuesExp) || [];\n\t\t\t\t\t\ti = vals.length;\n\t\t\t\t\t\tif (numVals > i--) {\n\t\t\t\t\t\t\twhile (++i < numVals) {\n\t\t\t\t\t\t\t\tvals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn pfx + vals.join(delim) + delim + color + sfx + (v.indexOf(\"inset\") !== -1 ? \" inset\" : \"\");\n\t\t\t\t\t};\n\t\t\t\t\treturn formatter;\n\n\t\t\t\t}\n\t\t\t\tformatter = function(v) {\n\t\t\t\t\tvar vals, a, i;\n\t\t\t\t\tif (typeof(v) === \"number\") {\n\t\t\t\t\t\tv += dSfx;\n\t\t\t\t\t} else if (multi && _commasOutsideParenExp.test(v)) {\n\t\t\t\t\t\ta = v.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\t\t\ta[i] = formatter(a[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn a.join(\",\");\n\t\t\t\t\t}\n\t\t\t\t\tvals = v.match(_valuesExp) || [];\n\t\t\t\t\ti = vals.length;\n\t\t\t\t\tif (numVals > i--) {\n\t\t\t\t\t\twhile (++i < numVals) {\n\t\t\t\t\t\t\tvals[i] = collapsible ? vals[(((i - 1) / 2) | 0)] : dVals[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn pfx + vals.join(delim) + sfx;\n\t\t\t\t};\n\t\t\t\treturn formatter;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private returns a formatter function that's used for edge-related values like marginTop, marginLeft, paddingBottom, paddingRight, etc. Just pass a comma-delimited list of property names related to the edges.\n\t\t\t * @param {!string} props a comma-delimited list of property names in order from top to left, like \"marginTop,marginRight,marginBottom,marginLeft\"\n\t\t\t * @return {Function} a formatter function\n\t\t\t */\n\t\t\t_getEdgeParser = function(props) {\n\t\t\t\tprops = props.split(\",\");\n\t\t\t\treturn function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\t\tvar a = (e + \"\").split(\" \"),\n\t\t\t\t\t\ti;\n\t\t\t\t\tvars = {};\n\t\t\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\t\t\tvars[props[i]] = a[i] = a[i] || a[(((i - 1) / 2) >> 0)];\n\t\t\t\t\t}\n\t\t\t\t\treturn cssp.parse(t, vars, pt, plugin);\n\t\t\t\t};\n\t\t\t},\n\n\t\t\t// @private used when other plugins must tween values first, like BezierPlugin or ThrowPropsPlugin, etc. That plugin's setRatio() gets called first so that the values are updated, and then we loop through the MiniPropTweens which handle copying the values into their appropriate slots so that they can then be applied correctly in the main CSSPlugin setRatio() method. Remember, we typically create a proxy object that has a bunch of uniquely-named properties that we feed to the sub-plugin and it does its magic normally, and then we must interpret those values and apply them to the css because often numbers must get combined/concatenated, suffixes added, etc. to work with css, like boxShadow could have 4 values plus a color.\n\t\t\t_setPluginRatio = _internals._setPluginRatio = function(v) {\n\t\t\t\tthis.plugin.setRatio(v);\n\t\t\t\tvar d = this.data,\n\t\t\t\t\tproxy = d.proxy,\n\t\t\t\t\tmpt = d.firstMPT,\n\t\t\t\t\tmin = 0.000001,\n\t\t\t\t\tval, pt, i, str, p;\n\t\t\t\twhile (mpt) {\n\t\t\t\t\tval = proxy[mpt.v];\n\t\t\t\t\tif (mpt.r) {\n\t\t\t\t\t\tval = mpt.r(val);\n\t\t\t\t\t} else if (val < min && val > -min) {\n\t\t\t\t\t\tval = 0;\n\t\t\t\t\t}\n\t\t\t\t\tmpt.t[mpt.p] = val;\n\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t}\n\t\t\t\tif (d.autoRotate) {\n\t\t\t\t\td.autoRotate.rotation = d.mod ? d.mod.call(this._tween, proxy.rotation, this.t, this._tween) : proxy.rotation; //special case for ModifyPlugin to hook into an auto-rotating bezier\n\t\t\t\t}\n\t\t\t\t//at the end, we must set the CSSPropTween's \"e\" (end) value dynamically here because that's what is used in the final setRatio() method. Same for \"b\" at the beginning.\n\t\t\t\tif (v === 1 || v === 0) {\n\t\t\t\t\tmpt = d.firstMPT;\n\t\t\t\t\tp = (v === 1) ? \"e\" : \"b\";\n\t\t\t\t\twhile (mpt) {\n\t\t\t\t\t\tpt = mpt.t;\n\t\t\t\t\t\tif (!pt.type) {\n\t\t\t\t\t\t\tpt[p] = pt.s + pt.xs0;\n\t\t\t\t\t\t} else if (pt.type === 1) {\n\t\t\t\t\t\t\tstr = pt.xs0 + pt.s + pt.xs1;\n\t\t\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\t\t\tstr += pt[\"xn\"+i] + pt[\"xs\"+(i+1)];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpt[p] = str;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private @constructor Used by a few SpecialProps to hold important values for proxies. For example, _parseToProxy() creates a MiniPropTween instance for each property that must get tweened on the proxy, and we record the original property name as well as the unique one we create for the proxy, plus whether or not the value needs to be rounded plus the original value.\n\t\t\t * @param {!Object} t target object whose property we're tweening (often a CSSPropTween)\n\t\t\t * @param {!string} p property name\n\t\t\t * @param {(number|string|object)} v value\n\t\t\t * @param {MiniPropTween=} next next MiniPropTween in the linked list\n\t\t\t * @param {boolean=} r if true, the tweened value should be rounded to the nearest integer\n\t\t\t */\n\t\t\tMiniPropTween = function(t, p, v, next, r) {\n\t\t\t\tthis.t = t;\n\t\t\t\tthis.p = p;\n\t\t\t\tthis.v = v;\n\t\t\t\tthis.r = r;\n\t\t\t\tif (next) {\n\t\t\t\t\tnext._prev = this;\n\t\t\t\t\tthis._next = next;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * @private Most other plugins (like BezierPlugin and ThrowPropsPlugin and others) can only tween numeric values, but CSSPlugin must accommodate special values that have a bunch of extra data (like a suffix or strings between numeric values, etc.). For example, boxShadow has values like \"10px 10px 20px 30px rgb(255,0,0)\" which would utterly confuse other plugins. This method allows us to split that data apart and grab only the numeric data and attach it to uniquely-named properties of a generic proxy object ({}) so that we can feed that to virtually any plugin to have the numbers tweened. However, we must also keep track of which properties from the proxy go with which CSSPropTween values and instances. So we create a linked list of MiniPropTweens. Each one records a target (the original CSSPropTween), property (like \"s\" or \"xn1\" or \"xn2\") that we're tweening and the unique property name that was used for the proxy (like \"boxShadow_xn1\" and \"boxShadow_xn2\") and whether or not they need to be rounded. That way, in the _setPluginRatio() method we can simply copy the values over from the proxy to the CSSPropTween instance(s). Then, when the main CSSPlugin setRatio() method runs and applies the CSSPropTween values accordingly, they're updated nicely. So the external plugin tweens the numbers, _setPluginRatio() copies them over, and setRatio() acts normally, applying css-specific values to the element.\n\t\t\t * This method returns an object that has the following properties:\n\t\t\t *  - proxy: a generic object containing the starting values for all the properties that will be tweened by the external plugin.  This is what we feed to the external _onInitTween() as the target\n\t\t\t *  - end: a generic object containing the ending values for all the properties that will be tweened by the external plugin. This is what we feed to the external plugin's _onInitTween() as the destination values\n\t\t\t *  - firstMPT: the first MiniPropTween in the linked list\n\t\t\t *  - pt: the first CSSPropTween in the linked list that was created when parsing. If shallow is true, this linked list will NOT attach to the one passed into the _parseToProxy() as the \"pt\" (4th) parameter.\n\t\t\t * @param {!Object} t target object to be tweened\n\t\t\t * @param {!(Object|string)} vars the object containing the information about the tweening values (typically the end/destination values) that should be parsed\n\t\t\t * @param {!CSSPlugin} cssp The CSSPlugin instance\n\t\t\t * @param {CSSPropTween=} pt the next CSSPropTween in the linked list\n\t\t\t * @param {TweenPlugin=} plugin the external TweenPlugin instance that will be handling tweening the numeric values\n\t\t\t * @param {boolean=} shallow if true, the resulting linked list from the parse will NOT be attached to the CSSPropTween that was passed in as the \"pt\" (4th) parameter.\n\t\t\t * @return An object containing the following properties: proxy, end, firstMPT, and pt (see above for descriptions)\n\t\t\t */\n\t\t\t_parseToProxy = _internals._parseToProxy = function(t, vars, cssp, pt, plugin, shallow) {\n\t\t\t\tvar bpt = pt,\n\t\t\t\t\tstart = {},\n\t\t\t\t\tend = {},\n\t\t\t\t\ttransform = cssp._transform,\n\t\t\t\t\toldForce = _forcePT,\n\t\t\t\t\ti, p, xp, mpt, firstPT;\n\t\t\t\tcssp._transform = null;\n\t\t\t\t_forcePT = vars;\n\t\t\t\tpt = firstPT = cssp.parse(t, vars, pt, plugin);\n\t\t\t\t_forcePT = oldForce;\n\t\t\t\t//break off from the linked list so the new ones are isolated.\n\t\t\t\tif (shallow) {\n\t\t\t\t\tcssp._transform = transform;\n\t\t\t\t\tif (bpt) {\n\t\t\t\t\t\tbpt._prev = null;\n\t\t\t\t\t\tif (bpt._prev) {\n\t\t\t\t\t\t\tbpt._prev._next = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (pt && pt !== bpt) {\n\t\t\t\t\tif (pt.type <= 1) {\n\t\t\t\t\t\tp = pt.p;\n\t\t\t\t\t\tend[p] = pt.s + pt.c;\n\t\t\t\t\t\tstart[p] = pt.s;\n\t\t\t\t\t\tif (!shallow) {\n\t\t\t\t\t\t\tmpt = new MiniPropTween(pt, \"s\", p, mpt, pt.r);\n\t\t\t\t\t\t\tpt.c = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (pt.type === 1) {\n\t\t\t\t\t\t\ti = pt.l;\n\t\t\t\t\t\t\twhile (--i > 0) {\n\t\t\t\t\t\t\t\txp = \"xn\" + i;\n\t\t\t\t\t\t\t\tp = pt.p + \"_\" + xp;\n\t\t\t\t\t\t\t\tend[p] = pt.data[xp];\n\t\t\t\t\t\t\t\tstart[p] = pt[xp];\n\t\t\t\t\t\t\t\tif (!shallow) {\n\t\t\t\t\t\t\t\t\tmpt = new MiniPropTween(pt, xp, p, mpt, pt.rxp[xp]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t\treturn {proxy:start, end:end, firstMPT:mpt, pt:firstPT};\n\t\t\t},\n\n\n\n\t\t\t/**\n\t\t\t * @constructor Each property that is tweened has at least one CSSPropTween associated with it. These instances store important information like the target, property, starting value, amount of change, etc. They can also optionally have a number of \"extra\" strings and numeric values named xs1, xn1, xs2, xn2, xs3, xn3, etc. where \"s\" indicates string and \"n\" indicates number. These can be pieced together in a complex-value tween (type:1) that has alternating types of data like a string, number, string, number, etc. For example, boxShadow could be \"5px 5px 8px rgb(102, 102, 51)\". In that value, there are 6 numbers that may need to tween and then pieced back together into a string again with spaces, suffixes, etc. xs0 is special in that it stores the suffix for standard (type:0) tweens, -OR- the first string (prefix) in a complex-value (type:1) CSSPropTween -OR- it can be the non-tweening value in a type:-1 CSSPropTween. We do this to conserve memory.\n\t\t\t * CSSPropTweens have the following optional properties as well (not defined through the constructor):\n\t\t\t *  - l: Length in terms of the number of extra properties that the CSSPropTween has (default: 0). For example, for a boxShadow we may need to tween 5 numbers in which case l would be 5; Keep in mind that the start/end values for the first number that's tweened are always stored in the s and c properties to conserve memory. All additional values thereafter are stored in xn1, xn2, etc.\n\t\t\t *  - xfirst: The first instance of any sub-CSSPropTweens that are tweening properties of this instance. For example, we may split up a boxShadow tween so that there's a main CSSPropTween of type:1 that has various xs* and xn* values associated with the h-shadow, v-shadow, blur, color, etc. Then we spawn a CSSPropTween for each of those that has a higher priority and runs BEFORE the main CSSPropTween so that the values are all set by the time it needs to re-assemble them. The xfirst gives us an easy way to identify the first one in that chain which typically ends at the main one (because they're all prepende to the linked list)\n\t\t\t *  - plugin: The TweenPlugin instance that will handle the tweening of any complex values. For example, sometimes we don't want to use normal subtweens (like xfirst refers to) to tween the values - we might want ThrowPropsPlugin or BezierPlugin some other plugin to do the actual tweening, so we create a plugin instance and store a reference here. We need this reference so that if we get a request to round values or disable a tween, we can pass along that request.\n\t\t\t *  - data: Arbitrary data that needs to be stored with the CSSPropTween. Typically if we're going to have a plugin handle the tweening of a complex-value tween, we create a generic object that stores the END values that we're tweening to and the CSSPropTween's xs1, xs2, etc. have the starting values. We store that object as data. That way, we can simply pass that object to the plugin and use the CSSPropTween as the target.\n\t\t\t *  - setRatio: Only used for type:2 tweens that require custom functionality. In this case, we call the CSSPropTween's setRatio() method and pass the ratio each time the tween updates. This isn't quite as efficient as doing things directly in the CSSPlugin's setRatio() method, but it's very convenient and flexible.\n\t\t\t * @param {!Object} t Target object whose property will be tweened. Often a DOM element, but not always. It could be anything.\n\t\t\t * @param {string} p Property to tween (name). For example, to tween element.width, p would be \"width\".\n\t\t\t * @param {number} s Starting numeric value\n\t\t\t * @param {number} c Change in numeric value over the course of the entire tween. For example, if element.width starts at 5 and should end at 100, c would be 95.\n\t\t\t * @param {CSSPropTween=} next The next CSSPropTween in the linked list. If one is defined, we will define its _prev as the new instance, and the new instance's _next will be pointed at it.\n\t\t\t * @param {number=} type The type of CSSPropTween where -1 = a non-tweening value, 0 = a standard simple tween, 1 = a complex value (like one that has multiple numbers in a comma- or space-delimited string like border:\"1px solid red\"), and 2 = one that uses a custom setRatio function that does all of the work of applying the values on each update.\n\t\t\t * @param {string=} n Name of the property that should be used for overwriting purposes which is typically the same as p but not always. For example, we may need to create a subtween for the 2nd part of a \"clip:rect(...)\" tween in which case \"p\" might be xs1 but \"n\" is still \"clip\"\n\t\t\t * @param {boolean=} r If true, the value(s) should be rounded\n\t\t\t * @param {number=} pr Priority in the linked list order. Higher priority CSSPropTweens will be updated before lower priority ones. The default priority is 0.\n\t\t\t * @param {string=} b Beginning value. We store this to ensure that it is EXACTLY what it was when the tween began without any risk of interpretation issues.\n\t\t\t * @param {string=} e Ending value. We store this to ensure that it is EXACTLY what the user defined at the end of the tween without any risk of interpretation issues.\n\t\t\t */\n\t\t\tCSSPropTween = _internals.CSSPropTween = function(t, p, s, c, next, type, n, r, pr, b, e) {\n\t\t\t\tthis.t = t; //target\n\t\t\t\tthis.p = p; //property\n\t\t\t\tthis.s = s; //starting value\n\t\t\t\tthis.c = c; //change value\n\t\t\t\tthis.n = n || p; //name that this CSSPropTween should be associated to (usually the same as p, but not always - n is what overwriting looks at)\n\t\t\t\tif (!(t instanceof CSSPropTween)) {\n\t\t\t\t\t_overwriteProps.push(this.n);\n\t\t\t\t}\n\t\t\t\tthis.r = !r ? r : (typeof(r) === \"function\") ? r : Math.round; //round (boolean)\n\t\t\t\tthis.type = type || 0; //0 = normal tween, -1 = non-tweening (in which case xs0 will be applied to the target's property, like tp.t[tp.p] = tp.xs0), 1 = complex-value SpecialProp, 2 = custom setRatio() that does all the work\n\t\t\t\tif (pr) {\n\t\t\t\t\tthis.pr = pr;\n\t\t\t\t\t_hasPriority = true;\n\t\t\t\t}\n\t\t\t\tthis.b = (b === undefined) ? s : b;\n\t\t\t\tthis.e = (e === undefined) ? s + c : e;\n\t\t\t\tif (next) {\n\t\t\t\t\tthis._next = next;\n\t\t\t\t\tnext._prev = this;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t_addNonTweeningNumericPT = function(target, prop, start, end, next, overwriteProp) { //cleans up some code redundancies and helps minification. Just a fast way to add a NUMERIC non-tweening CSSPropTween\n\t\t\t\tvar pt = new CSSPropTween(target, prop, start, end - start, next, -1, overwriteProp);\n\t\t\t\tpt.b = start;\n\t\t\t\tpt.e = pt.xs0 = end;\n\t\t\t\treturn pt;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Takes a target, the beginning value and ending value (as strings) and parses them into a CSSPropTween (possibly with child CSSPropTweens) that accommodates multiple numbers, colors, comma-delimited values, etc. For example:\n\t\t\t * sp.parseComplex(element, \"boxShadow\", \"5px 10px 20px rgb(255,102,51)\", \"0px 0px 0px red\", true, \"0px 0px 0px rgb(0,0,0,0)\", pt);\n\t\t\t * It will walk through the beginning and ending values (which should be in the same format with the same number and type of values) and figure out which parts are numbers, what strings separate the numeric/tweenable values, and then create the CSSPropTweens accordingly. If a plugin is defined, no child CSSPropTweens will be created. Instead, the ending values will be stored in the \"data\" property of the returned CSSPropTween like: {s:-5, xn1:-10, xn2:-20, xn3:255, xn4:0, xn5:0} so that it can be fed to any other plugin and it'll be plain numeric tweens but the recomposition of the complex value will be handled inside CSSPlugin's setRatio().\n\t\t\t * If a setRatio is defined, the type of the CSSPropTween will be set to 2 and recomposition of the values will be the responsibility of that method.\n\t\t\t *\n\t\t\t * @param {!Object} t Target whose property will be tweened\n\t\t\t * @param {!string} p Property that will be tweened (its name, like \"left\" or \"backgroundColor\" or \"boxShadow\")\n\t\t\t * @param {string} b Beginning value\n\t\t\t * @param {string} e Ending value\n\t\t\t * @param {boolean} clrs If true, the value could contain a color value like \"rgb(255,0,0)\" or \"#F00\" or \"red\". The default is false, so no colors will be recognized (a performance optimization)\n\t\t\t * @param {(string|number|Object)} dflt The default beginning value that should be used if no valid beginning value is defined or if the number of values inside the complex beginning and ending values don't match\n\t\t\t * @param {?CSSPropTween} pt CSSPropTween instance that is the current head of the linked list (we'll prepend to this).\n\t\t\t * @param {number=} pr Priority in the linked list order. Higher priority properties will be updated before lower priority ones. The default priority is 0.\n\t\t\t * @param {TweenPlugin=} plugin If a plugin should handle the tweening of extra properties, pass the plugin instance here. If one is defined, then NO subtweens will be created for any extra properties (the properties will be created - just not additional CSSPropTween instances to tween them) because the plugin is expected to do so. However, the end values WILL be populated in the \"data\" property, like {s:100, xn1:50, xn2:300}\n\t\t\t * @param {function(number)=} setRatio If values should be set in a custom function instead of being pieced together in a type:1 (complex-value) CSSPropTween, define that custom function here.\n\t\t\t * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parseComplex() call.\n\t\t\t */\n\t\t\t_parseComplex = CSSPlugin.parseComplex = function(t, p, b, e, clrs, dflt, pt, pr, plugin, setRatio) {\n\t\t\t\t//DEBUG: _log(\"parseComplex: \"+p+\", b: \"+b+\", e: \"+e);\n\t\t\t\tb = b || dflt || \"\";\n\t\t\t\tif (typeof(e) === \"function\") {\n\t\t\t\t\te = e(_index, _target);\n\t\t\t\t}\n\t\t\t\tpt = new CSSPropTween(t, p, 0, 0, pt, (setRatio ? 2 : 1), null, false, pr, b, e);\n\t\t\t\te += \"\"; //ensures it's a string\n\t\t\t\tif (clrs && _colorExp.test(e + b)) { //if colors are found, normalize the formatting to rgba() or hsla().\n\t\t\t\t\te = [b, e];\n\t\t\t\t\tCSSPlugin.colorStringFilter(e);\n\t\t\t\t\tb = e[0];\n\t\t\t\t\te = e[1];\n\t\t\t\t}\n\t\t\t\tvar ba = b.split(\", \").join(\",\").split(\" \"), //beginning array\n\t\t\t\t\tea = e.split(\", \").join(\",\").split(\" \"), //ending array\n\t\t\t\t\tl = ba.length,\n\t\t\t\t\tautoRound = (_autoRound !== false),\n\t\t\t\t\ti, xi, ni, bv, ev, bnums, enums, bn, hasAlpha, temp, cv, str, useHSL;\n\t\t\t\tif (e.indexOf(\",\") !== -1 || b.indexOf(\",\") !== -1) {\n\t\t\t\t\tif ((e + b).indexOf(\"rgb\") !== -1 || (e + b).indexOf(\"hsl\") !== -1) { //keep rgb(), rgba(), hsl(), and hsla() values together! (remember, we're splitting on spaces)\n\t\t\t\t\t\tba = ba.join(\" \").replace(_commasOutsideParenExp, \", \").split(\" \");\n\t\t\t\t\t\tea = ea.join(\" \").replace(_commasOutsideParenExp, \", \").split(\" \");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tba = ba.join(\" \").split(\",\").join(\", \").split(\" \");\n\t\t\t\t\t\tea = ea.join(\" \").split(\",\").join(\", \").split(\" \");\n\t\t\t\t\t}\n\t\t\t\t\tl = ba.length;\n\t\t\t\t}\n\t\t\t\tif (l !== ea.length) {\n\t\t\t\t\t//DEBUG: _log(\"mismatched formatting detected on \" + p + \" (\" + b + \" vs \" + e + \")\");\n\t\t\t\t\tba = (dflt || \"\").split(\" \");\n\t\t\t\t\tl = ba.length;\n\t\t\t\t}\n\t\t\t\tpt.plugin = plugin;\n\t\t\t\tpt.setRatio = setRatio;\n\t\t\t\t_colorExp.lastIndex = 0;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tbv = ba[i];\n\t\t\t\t\tev = ea[i] + \"\";\n\t\t\t\t\tbn = parseFloat(bv);\n\t\t\t\t\t//if the value begins with a number (most common). It's fine if it has a suffix like px\n\t\t\t\t\tif (bn || bn === 0) {\n\t\t\t\t\t\tpt.appendXtra(\"\", bn, _parseChange(ev, bn), ev.replace(_relNumExp, \"\"), (autoRound && ev.indexOf(\"px\") !== -1) ? Math.round : false, true);\n\n\t\t\t\t\t//if the value is a color\n\t\t\t\t\t} else if (clrs && _colorExp.test(bv)) {\n\t\t\t\t\t\tstr = ev.indexOf(\")\") + 1;\n\t\t\t\t\t\tstr = \")\" + (str ? ev.substr(str) : \"\"); //if there's a comma or ) at the end, retain it.\n\t\t\t\t\t\tuseHSL = (ev.indexOf(\"hsl\") !== -1 && _supportsOpacity);\n\t\t\t\t\t\ttemp = ev; //original string value so we can look for any prefix later.\n\t\t\t\t\t\tbv = _parseColor(bv, useHSL);\n\t\t\t\t\t\tev = _parseColor(ev, useHSL);\n\t\t\t\t\t\thasAlpha = (bv.length + ev.length > 6);\n\t\t\t\t\t\tif (hasAlpha && !_supportsOpacity && ev[3] === 0) { //older versions of IE don't support rgba(), so if the destination alpha is 0, just use \"transparent\" for the end color\n\t\t\t\t\t\t\tpt[\"xs\" + pt.l] += pt.l ? \" transparent\" : \"transparent\";\n\t\t\t\t\t\t\tpt.e = pt.e.split(ea[i]).join(\"transparent\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (!_supportsOpacity) { //old versions of IE don't support rgba().\n\t\t\t\t\t\t\t\thasAlpha = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (useHSL) {\n\t\t\t\t\t\t\t\tpt.appendXtra(temp.substr(0, temp.indexOf(\"hsl\")) + (hasAlpha ? \"hsla(\" : \"hsl(\"), bv[0], _parseChange(ev[0], bv[0]), \",\", false, true)\n\t\t\t\t\t\t\t\t\t.appendXtra(\"\", bv[1], _parseChange(ev[1], bv[1]), \"%,\", false)\n\t\t\t\t\t\t\t\t\t.appendXtra(\"\", bv[2], _parseChange(ev[2], bv[2]), (hasAlpha ? \"%,\" : \"%\" + str), false);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpt.appendXtra(temp.substr(0, temp.indexOf(\"rgb\")) + (hasAlpha ? \"rgba(\" : \"rgb(\"), bv[0], ev[0] - bv[0], \",\", Math.round, true)\n\t\t\t\t\t\t\t\t\t.appendXtra(\"\", bv[1], ev[1] - bv[1], \",\", Math.round)\n\t\t\t\t\t\t\t\t\t.appendXtra(\"\", bv[2], ev[2] - bv[2], (hasAlpha ? \",\" : str), Math.round);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (hasAlpha) {\n\t\t\t\t\t\t\t\tbv = (bv.length < 4) ? 1 : bv[3];\n\t\t\t\t\t\t\t\tpt.appendXtra(\"\", bv, ((ev.length < 4) ? 1 : ev[3]) - bv, str, false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_colorExp.lastIndex = 0; //otherwise the test() on the RegExp could move the lastIndex and taint future results.\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbnums = bv.match(_numExp); //gets each group of numbers in the beginning value string and drops them into an array\n\n\t\t\t\t\t\t//if no number is found, treat it as a non-tweening value and just append the string to the current xs.\n\t\t\t\t\t\tif (!bnums) {\n\t\t\t\t\t\t\tpt[\"xs\" + pt.l] += (pt.l || pt[\"xs\" + pt.l]) ? \" \" + ev : ev;\n\n\t\t\t\t\t\t//loop through all the numbers that are found and construct the extra values on the pt.\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tenums = ev.match(_relNumExp); //get each group of numbers in the end value string and drop them into an array. We allow relative values too, like +=50 or -=.5\n\t\t\t\t\t\t\tif (!enums || enums.length !== bnums.length) {\n\t\t\t\t\t\t\t\t//DEBUG: _log(\"mismatched formatting detected on \" + p + \" (\" + b + \" vs \" + e + \")\");\n\t\t\t\t\t\t\t\treturn pt;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tni = 0;\n\t\t\t\t\t\t\tfor (xi = 0; xi < bnums.length; xi++) {\n\t\t\t\t\t\t\t\tcv = bnums[xi];\n\t\t\t\t\t\t\t\ttemp = bv.indexOf(cv, ni);\n\t\t\t\t\t\t\t\tpt.appendXtra(bv.substr(ni, temp - ni), Number(cv), _parseChange(enums[xi], cv), \"\", (autoRound && bv.substr(temp + cv.length, 2) === \"px\") ? Math.round : false, (xi === 0));\n\t\t\t\t\t\t\t\tni = temp + cv.length;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpt[\"xs\" + pt.l] += bv.substr(ni);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//if there are relative values (\"+=\" or \"-=\" prefix), we need to adjust the ending value to eliminate the prefixes and combine the values properly.\n\t\t\t\tif (e.indexOf(\"=\") !== -1) if (pt.data) {\n\t\t\t\t\tstr = pt.xs0 + pt.data.s;\n\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\tstr += pt[\"xs\" + i] + pt.data[\"xn\" + i];\n\t\t\t\t\t}\n\t\t\t\t\tpt.e = str + pt[\"xs\" + i];\n\t\t\t\t}\n\t\t\t\tif (!pt.l) {\n\t\t\t\t\tpt.type = -1;\n\t\t\t\t\tpt.xs0 = pt.e;\n\t\t\t\t}\n\t\t\t\treturn pt.xfirst || pt;\n\t\t\t},\n\t\t\ti = 9;\n\n\n\t\tp = CSSPropTween.prototype;\n\t\tp.l = p.pr = 0; //length (number of extra properties like xn1, xn2, xn3, etc.\n\t\twhile (--i > 0) {\n\t\t\tp[\"xn\" + i] = 0;\n\t\t\tp[\"xs\" + i] = \"\";\n\t\t}\n\t\tp.xs0 = \"\";\n\t\tp._next = p._prev = p.xfirst = p.data = p.plugin = p.setRatio = p.rxp = null;\n\n\n\t\t/**\n\t\t * Appends and extra tweening value to a CSSPropTween and automatically manages any prefix and suffix strings. The first extra value is stored in the s and c of the main CSSPropTween instance, but thereafter any extras are stored in the xn1, xn2, xn3, etc. The prefixes and suffixes are stored in the xs0, xs1, xs2, etc. properties. For example, if I walk through a clip value like \"rect(10px, 5px, 0px, 20px)\", the values would be stored like this:\n\t\t * xs0:\"rect(\", s:10, xs1:\"px, \", xn1:5, xs2:\"px, \", xn2:0, xs3:\"px, \", xn3:20, xn4:\"px)\"\n\t\t * And they'd all get joined together when the CSSPlugin renders (in the setRatio() method).\n\t\t * @param {string=} pfx Prefix (if any)\n\t\t * @param {!number} s Starting value\n\t\t * @param {!number} c Change in numeric value over the course of the entire tween. For example, if the start is 5 and the end is 100, the change would be 95.\n\t\t * @param {string=} sfx Suffix (if any)\n\t\t * @param {boolean=} r Round (if true).\n\t\t * @param {boolean=} pad If true, this extra value should be separated by the previous one by a space. If there is no previous extra and pad is true, it will automatically drop the space.\n\t\t * @return {CSSPropTween} returns itself so that multiple methods can be chained together.\n\t\t */\n\t\tp.appendXtra = function(pfx, s, c, sfx, r, pad) {\n\t\t\tvar pt = this,\n\t\t\t\tl = pt.l;\n\t\t\tpt[\"xs\" + l] += (pad && (l || pt[\"xs\" + l])) ? \" \" + pfx : pfx || \"\";\n\t\t\tif (!c) if (l !== 0 && !pt.plugin) { //typically we'll combine non-changing values right into the xs to optimize performance, but we don't combine them when there's a plugin that will be tweening the values because it may depend on the values being split apart, like for a bezier, if a value doesn't change between the first and second iteration but then it does on the 3rd, we'll run into trouble because there's no xn slot for that value!\n\t\t\t\tpt[\"xs\" + l] += s + (sfx || \"\");\n\t\t\t\treturn pt;\n\t\t\t}\n\t\t\tpt.l++;\n\t\t\tpt.type = pt.setRatio ? 2 : 1;\n\t\t\tpt[\"xs\" + pt.l] = sfx || \"\";\n\t\t\tif (l > 0) {\n\t\t\t\tpt.data[\"xn\" + l] = s + c;\n\t\t\t\tpt.rxp[\"xn\" + l] = r; //round extra property (we need to tap into this in the _parseToProxy() method)\n\t\t\t\tpt[\"xn\" + l] = s;\n\t\t\t\tif (!pt.plugin) {\n\t\t\t\t\tpt.xfirst = new CSSPropTween(pt, \"xn\" + l, s, c, pt.xfirst || pt, 0, pt.n, r, pt.pr);\n\t\t\t\t\tpt.xfirst.xs0 = 0; //just to ensure that the property stays numeric which helps modern browsers speed up processing. Remember, in the setRatio() method, we do pt.t[pt.p] = val + pt.xs0 so if pt.xs0 is \"\" (the default), it'll cast the end value as a string. When a property is a number sometimes and a string sometimes, it prevents the compiler from locking in the data type, slowing things down slightly.\n\t\t\t\t}\n\t\t\t\treturn pt;\n\t\t\t}\n\t\t\tpt.data = {s:s + c};\n\t\t\tpt.rxp = {};\n\t\t\tpt.s = s;\n\t\t\tpt.c = c;\n\t\t\tpt.r = r;\n\t\t\treturn pt;\n\t\t};\n\n\t\t/**\n\t\t * @constructor A SpecialProp is basically a css property that needs to be treated in a non-standard way, like if it may contain a complex value like boxShadow:\"5px 10px 15px rgb(255, 102, 51)\" or if it is associated with another plugin like ThrowPropsPlugin or BezierPlugin. Every SpecialProp is associated with a particular property name like \"boxShadow\" or \"throwProps\" or \"bezier\" and it will intercept those values in the vars object that's passed to the CSSPlugin and handle them accordingly.\n\t\t * @param {!string} p Property name (like \"boxShadow\" or \"throwProps\")\n\t\t * @param {Object=} options An object containing any of the following configuration options:\n\t\t *                      - defaultValue: the default value\n\t\t *                      - parser: A function that should be called when the associated property name is found in the vars. This function should return a CSSPropTween instance and it should ensure that it is properly inserted into the linked list. It will receive 4 paramters: 1) The target, 2) The value defined in the vars, 3) The CSSPlugin instance (whose _firstPT should be used for the linked list), and 4) A computed style object if one was calculated (this is a speed optimization that allows retrieval of starting values quicker)\n\t\t *                      - formatter: a function that formats any value received for this special property (for example, boxShadow could take \"5px 5px red\" and format it to \"5px 5px 0px 0px red\" so that both the beginning and ending values have a common order and quantity of values.)\n\t\t *                      - prefix: if true, we'll determine whether or not this property requires a vendor prefix (like Webkit or Moz or ms or O)\n\t\t *                      - color: set this to true if the value for this SpecialProp may contain color-related values like rgb(), rgba(), etc.\n\t\t *                      - priority: priority in the linked list order. Higher priority SpecialProps will be updated before lower priority ones. The default priority is 0.\n\t\t *                      - multi: if true, the formatter should accommodate a comma-delimited list of values, like boxShadow could have multiple boxShadows listed out.\n\t\t *                      - collapsible: if true, the formatter should treat the value like it's a top/right/bottom/left value that could be collapsed, like \"5px\" would apply to all, \"5px, 10px\" would use 5px for top/bottom and 10px for right/left, etc.\n\t\t *                      - keyword: a special keyword that can [optionally] be found inside the value (like \"inset\" for boxShadow). This allows us to validate beginning/ending values to make sure they match (if the keyword is found in one, it'll be added to the other for consistency by default).\n\t\t */\n\t\tvar SpecialProp = function(p, options) {\n\t\t\t\toptions = options || {};\n\t\t\t\tthis.p = options.prefix ? _checkPropPrefix(p) || p : p;\n\t\t\t\t_specialProps[p] = _specialProps[this.p] = this;\n\t\t\t\tthis.format = options.formatter || _getFormatter(options.defaultValue, options.color, options.collapsible, options.multi);\n\t\t\t\tif (options.parser) {\n\t\t\t\t\tthis.parse = options.parser;\n\t\t\t\t}\n\t\t\t\tthis.clrs = options.color;\n\t\t\t\tthis.multi = options.multi;\n\t\t\t\tthis.keyword = options.keyword;\n\t\t\t\tthis.dflt = options.defaultValue;\n\t\t\t\tthis.pr = options.priority || 0;\n\t\t\t},\n\n\t\t\t//shortcut for creating a new SpecialProp that can accept multiple properties as a comma-delimited list (helps minification). dflt can be an array for multiple values (we don't do a comma-delimited list because the default value may contain commas, like rect(0px,0px,0px,0px)). We attach this method to the SpecialProp class/object instead of using a private _createSpecialProp() method so that we can tap into it externally if necessary, like from another plugin.\n\t\t\t_registerComplexSpecialProp = _internals._registerComplexSpecialProp = function(p, options, defaults) {\n\t\t\t\tif (typeof(options) !== \"object\") {\n\t\t\t\t\toptions = {parser:defaults}; //to make backwards compatible with older versions of BezierPlugin and ThrowPropsPlugin\n\t\t\t\t}\n\t\t\t\tvar a = p.split(\",\"),\n\t\t\t\t\td = options.defaultValue,\n\t\t\t\t\ti, temp;\n\t\t\t\tdefaults = defaults || [d];\n\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\toptions.prefix = (i === 0 && options.prefix);\n\t\t\t\t\toptions.defaultValue = defaults[i] || d;\n\t\t\t\t\ttemp = new SpecialProp(a[i], options);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t//creates a placeholder special prop for a plugin so that the property gets caught the first time a tween of it is attempted, and at that time it makes the plugin register itself, thus taking over for all future tweens of that property. This allows us to not mandate that things load in a particular order and it also allows us to log() an error that informs the user when they attempt to tween an external plugin-related property without loading its .js file.\n\t\t\t_registerPluginProp = _internals._registerPluginProp = function(p) {\n\t\t\t\tif (!_specialProps[p]) {\n\t\t\t\t\tvar pluginName = p.charAt(0).toUpperCase() + p.substr(1) + \"Plugin\";\n\t\t\t\t\t_registerComplexSpecialProp(p, {parser:function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\t\t\tvar pluginClass = _globals.com.greensock.plugins[pluginName];\n\t\t\t\t\t\tif (!pluginClass) {\n\t\t\t\t\t\t\t_log(\"Error: \" + pluginName + \" js file not loaded.\");\n\t\t\t\t\t\t\treturn pt;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpluginClass._cssRegister();\n\t\t\t\t\t\treturn _specialProps[p].parse(t, e, p, cssp, pt, plugin, vars);\n\t\t\t\t\t}});\n\t\t\t\t}\n\t\t\t};\n\n\n\t\tp = SpecialProp.prototype;\n\n\t\t/**\n\t\t * Alias for _parseComplex() that automatically plugs in certain values for this SpecialProp, like its property name, whether or not colors should be sensed, the default value, and priority. It also looks for any keyword that the SpecialProp defines (like \"inset\" for boxShadow) and ensures that the beginning and ending values have the same number of values for SpecialProps where multi is true (like boxShadow and textShadow can have a comma-delimited list)\n\t\t * @param {!Object} t target element\n\t\t * @param {(string|number|object)} b beginning value\n\t\t * @param {(string|number|object)} e ending (destination) value\n\t\t * @param {CSSPropTween=} pt next CSSPropTween in the linked list\n\t\t * @param {TweenPlugin=} plugin If another plugin will be tweening the complex value, that TweenPlugin instance goes here.\n\t\t * @param {function=} setRatio If a custom setRatio() method should be used to handle this complex value, that goes here.\n\t\t * @return {CSSPropTween=} First CSSPropTween in the linked list\n\t\t */\n\t\tp.parseComplex = function(t, b, e, pt, plugin, setRatio) {\n\t\t\tvar kwd = this.keyword,\n\t\t\t\ti, ba, ea, l, bi, ei;\n\t\t\t//if this SpecialProp's value can contain a comma-delimited list of values (like boxShadow or textShadow), we must parse them in a special way, and look for a keyword (like \"inset\" for boxShadow) and ensure that the beginning and ending BOTH have it if the end defines it as such. We also must ensure that there are an equal number of values specified (we can't tween 1 boxShadow to 3 for example)\n\t\t\tif (this.multi) if (_commasOutsideParenExp.test(e) || _commasOutsideParenExp.test(b)) {\n\t\t\t\tba = b.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t\tea = e.replace(_commasOutsideParenExp, \"|\").split(\"|\");\n\t\t\t} else if (kwd) {\n\t\t\t\tba = [b];\n\t\t\t\tea = [e];\n\t\t\t}\n\t\t\tif (ea) {\n\t\t\t\tl = (ea.length > ba.length) ? ea.length : ba.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tb = ba[i] = ba[i] || this.dflt;\n\t\t\t\t\te = ea[i] = ea[i] || this.dflt;\n\t\t\t\t\tif (kwd) {\n\t\t\t\t\t\tbi = b.indexOf(kwd);\n\t\t\t\t\t\tei = e.indexOf(kwd);\n\t\t\t\t\t\tif (bi !== ei) {\n\t\t\t\t\t\t\tif (ei === -1) { //if the keyword isn't in the end value, remove it from the beginning one.\n\t\t\t\t\t\t\t\tba[i] = ba[i].split(kwd).join(\"\");\n\t\t\t\t\t\t\t} else if (bi === -1) { //if the keyword isn't in the beginning, add it.\n\t\t\t\t\t\t\t\tba[i] += \" \" + kwd;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tb = ba.join(\", \");\n\t\t\t\te = ea.join(\", \");\n\t\t\t}\n\t\t\treturn _parseComplex(t, this.p, b, e, this.clrs, this.dflt, pt, this.pr, plugin, setRatio);\n\t\t};\n\n\t\t/**\n\t\t * Accepts a target and end value and spits back a CSSPropTween that has been inserted into the CSSPlugin's linked list and conforms with all the conventions we use internally, like type:-1, 0, 1, or 2, setting up any extra property tweens, priority, etc. For example, if we have a boxShadow SpecialProp and call:\n\t\t * this._firstPT = sp.parse(element, \"5px 10px 20px rgb(2550,102,51)\", \"boxShadow\", this);\n\t\t * It should figure out the starting value of the element's boxShadow, compare it to the provided end value and create all the necessary CSSPropTweens of the appropriate types to tween the boxShadow. The CSSPropTween that gets spit back should already be inserted into the linked list (the 4th parameter is the current head, so prepend to that).\n\t\t * @param {!Object} t Target object whose property is being tweened\n\t\t * @param {Object} e End value as provided in the vars object (typically a string, but not always - like a throwProps would be an object).\n\t\t * @param {!string} p Property name\n\t\t * @param {!CSSPlugin} cssp The CSSPlugin instance that should be associated with this tween.\n\t\t * @param {?CSSPropTween} pt The CSSPropTween that is the current head of the linked list (we'll prepend to it)\n\t\t * @param {TweenPlugin=} plugin If a plugin will be used to tween the parsed value, this is the plugin instance.\n\t\t * @param {Object=} vars Original vars object that contains the data for parsing.\n\t\t * @return {CSSPropTween} The first CSSPropTween in the linked list which includes the new one(s) added by the parse() call.\n\t\t */\n\t\tp.parse = function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\treturn this.parseComplex(t.style, this.format(_getStyle(t, this.p, _cs, false, this.dflt)), this.format(e), pt, plugin);\n\t\t};\n\n\t\t/**\n\t\t * Registers a special property that should be intercepted from any \"css\" objects defined in tweens. This allows you to handle them however you want without CSSPlugin doing it for you. The 2nd parameter should be a function that accepts 3 parameters:\n\t\t *  1) Target object whose property should be tweened (typically a DOM element)\n\t\t *  2) The end/destination value (could be a string, number, object, or whatever you want)\n\t\t *  3) The tween instance (you probably don't need to worry about this, but it can be useful for looking up information like the duration)\n\t\t *\n\t\t * Then, your function should return a function which will be called each time the tween gets rendered, passing a numeric \"ratio\" parameter to your function that indicates the change factor (usually between 0 and 1). For example:\n\t\t *\n\t\t * CSSPlugin.registerSpecialProp(\"myCustomProp\", function(target, value, tween) {\n\t\t *      var start = target.style.width;\n\t\t *      return function(ratio) {\n\t\t *              target.style.width = (start + value * ratio) + \"px\";\n\t\t *              console.log(\"set width to \" + target.style.width);\n\t\t *          }\n\t\t * }, 0);\n\t\t *\n\t\t * Then, when I do this tween, it will trigger my special property:\n\t\t *\n\t\t * TweenLite.to(element, 1, {css:{myCustomProp:100}});\n\t\t *\n\t\t * In the example, of course, we're just changing the width, but you can do anything you want.\n\t\t *\n\t\t * @param {!string} name Property name (or comma-delimited list of property names) that should be intercepted and handled by your function. For example, if I define \"myCustomProp\", then it would handle that portion of the following tween: TweenLite.to(element, 1, {css:{myCustomProp:100}})\n\t\t * @param {!function(Object, Object, Object, string):function(number)} onInitTween The function that will be called when a tween of this special property is performed. The function will receive 4 parameters: 1) Target object that should be tweened, 2) Value that was passed to the tween, 3) The tween instance itself (rarely used), and 4) The property name that's being tweened. Your function should return a function that should be called on every update of the tween. That function will receive a single parameter that is a \"change factor\" value (typically between 0 and 1) indicating the amount of change as a ratio. You can use this to determine how to set the values appropriately in your function.\n\t\t * @param {number=} priority Priority that helps the engine determine the order in which to set the properties (default: 0). Higher priority properties will be updated before lower priority ones.\n\t\t */\n\t\tCSSPlugin.registerSpecialProp = function(name, onInitTween, priority) {\n\t\t\t_registerComplexSpecialProp(name, {parser:function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\t\tvar rv = new CSSPropTween(t, p, 0, 0, pt, 2, p, false, priority);\n\t\t\t\trv.plugin = plugin;\n\t\t\t\trv.setRatio = onInitTween(t, e, cssp._tween, p);\n\t\t\t\treturn rv;\n\t\t\t}, priority:priority});\n\t\t};\n\n\n\n\n\n\n\t\t//transform-related methods and properties\n\t\tCSSPlugin.useSVGTransformAttr = true; //Safari and Firefox both have some rendering bugs when applying CSS transforms to SVG elements, so default to using the \"transform\" attribute instead (users can override this).\n\t\tvar _transformProps = (\"scaleX,scaleY,scaleZ,x,y,z,skewX,skewY,rotation,rotationX,rotationY,perspective,xPercent,yPercent\").split(\",\"),\n\t\t\t_transformProp = _checkPropPrefix(\"transform\"), //the Javascript (camelCase) transform property, like msTransform, WebkitTransform, MozTransform, or OTransform.\n\t\t\t_transformPropCSS = _prefixCSS + \"transform\",\n\t\t\t_transformOriginProp = _checkPropPrefix(\"transformOrigin\"),\n\t\t\t_supports3D = (_checkPropPrefix(\"perspective\") !== null),\n\t\t\tTransform = _internals.Transform = function() {\n\t\t\t\tthis.perspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0;\n\t\t\t\tthis.force3D = (CSSPlugin.defaultForce3D === false || !_supports3D) ? false : CSSPlugin.defaultForce3D || \"auto\";\n\t\t\t},\n\t\t\t_SVGElement = _gsScope.SVGElement,\n\t\t\t_useSVGTransformAttr,\n\t\t\t//Some browsers (like Firefox and IE) don't honor transform-origin properly in SVG elements, so we need to manually adjust the matrix accordingly. We feature detect here rather than always doing the conversion for certain browsers because they may fix the problem at some point in the future.\n\n\t\t\t_createSVG = function(type, container, attributes) {\n\t\t\t\tvar element = _doc.createElementNS(\"http://www.w3.org/2000/svg\", type),\n\t\t\t\t\treg = /([a-z])([A-Z])/g,\n\t\t\t\t\tp;\n\t\t\t\tfor (p in attributes) {\n\t\t\t\t\telement.setAttributeNS(null, p.replace(reg, \"$1-$2\").toLowerCase(), attributes[p]);\n\t\t\t\t}\n\t\t\t\tcontainer.appendChild(element);\n\t\t\t\treturn element;\n\t\t\t},\n\t\t\t_docElement = _doc.documentElement || {},\n\t\t\t_forceSVGTransformAttr = (function() {\n\t\t\t\t//IE and Android stock don't support CSS transforms on SVG elements, so we must write them to the \"transform\" attribute. We populate this variable in the _parseTransform() method, and only if/when we come across an SVG element\n\t\t\t\tvar force = _ieVers || (/Android/i.test(_agent) && !_gsScope.chrome),\n\t\t\t\t\tsvg, rect, width;\n\t\t\t\tif (_doc.createElementNS && !force) { //IE8 and earlier doesn't support SVG anyway\n\t\t\t\t\tsvg = _createSVG(\"svg\", _docElement);\n\t\t\t\t\trect = _createSVG(\"rect\", svg, {width:100, height:50, x:100});\n\t\t\t\t\twidth = rect.getBoundingClientRect().width;\n\t\t\t\t\trect.style[_transformOriginProp] = \"50% 50%\";\n\t\t\t\t\trect.style[_transformProp] = \"scaleX(0.5)\";\n\t\t\t\t\tforce = (width === rect.getBoundingClientRect().width && !(_isFirefox && _supports3D)); //note: Firefox fails the test even though it does support CSS transforms in 3D. Since we can't push 3D stuff into the transform attribute, we force Firefox to pass the test here (as long as it does truly support 3D).\n\t\t\t\t\t_docElement.removeChild(svg);\n\t\t\t\t}\n\t\t\t\treturn force;\n\t\t\t})(),\n\t\t\t_parseSVGOrigin = function(e, local, decoratee, absolute, smoothOrigin, skipRecord) {\n\t\t\t\tvar tm = e._gsTransform,\n\t\t\t\t\tm = _getMatrix(e, true),\n\t\t\t\t\tv, x, y, xOrigin, yOrigin, a, b, c, d, tx, ty, determinant, xOriginOld, yOriginOld;\n\t\t\t\tif (tm) {\n\t\t\t\t\txOriginOld = tm.xOrigin; //record the original values before we alter them.\n\t\t\t\t\tyOriginOld = tm.yOrigin;\n\t\t\t\t}\n\t\t\t\tif (!absolute || (v = absolute.split(\" \")).length < 2) {\n\t\t\t\t\tb = e.getBBox();\n\t\t\t\t\tif (b.x === 0 && b.y === 0 && b.width + b.height === 0) { //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.\n\t\t\t\t\t\tb = {x: parseFloat(e.hasAttribute(\"x\") ? e.getAttribute(\"x\") : e.hasAttribute(\"cx\") ? e.getAttribute(\"cx\") : 0) || 0, y: parseFloat(e.hasAttribute(\"y\") ? e.getAttribute(\"y\") : e.hasAttribute(\"cy\") ? e.getAttribute(\"cy\") : 0) || 0, width:0, height:0};\n\t\t\t\t\t}\n\t\t\t\t\tlocal = _parsePosition(local).split(\" \");\n\t\t\t\t\tv = [(local[0].indexOf(\"%\") !== -1 ? parseFloat(local[0]) / 100 * b.width : parseFloat(local[0])) + b.x,\n\t\t\t\t\t\t (local[1].indexOf(\"%\") !== -1 ? parseFloat(local[1]) / 100 * b.height : parseFloat(local[1])) + b.y];\n\t\t\t\t}\n\t\t\t\tdecoratee.xOrigin = xOrigin = parseFloat(v[0]);\n\t\t\t\tdecoratee.yOrigin = yOrigin = parseFloat(v[1]);\n\t\t\t\tif (absolute && m !== _identity2DMatrix) { //if svgOrigin is being set, we must invert the matrix and determine where the absolute point is, factoring in the current transforms. Otherwise, the svgOrigin would be based on the element's non-transformed position on the canvas.\n\t\t\t\t\ta = m[0];\n\t\t\t\t\tb = m[1];\n\t\t\t\t\tc = m[2];\n\t\t\t\t\td = m[3];\n\t\t\t\t\ttx = m[4];\n\t\t\t\t\tty = m[5];\n\t\t\t\t\tdeterminant = (a * d - b * c);\n\t\t\t\t\tif (determinant) { //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.\n\t\t\t\t\t\tx = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + ((c * ty - d * tx) / determinant);\n\t\t\t\t\t\ty = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - ((a * ty - b * tx) / determinant);\n\t\t\t\t\t\txOrigin = decoratee.xOrigin = v[0] = x;\n\t\t\t\t\t\tyOrigin = decoratee.yOrigin = v[1] = y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (tm) { //avoid jump when transformOrigin is changed - adjust the x/y values accordingly\n\t\t\t\t\tif (skipRecord) {\n\t\t\t\t\t\tdecoratee.xOffset = tm.xOffset;\n\t\t\t\t\t\tdecoratee.yOffset = tm.yOffset;\n\t\t\t\t\t\ttm = decoratee;\n\t\t\t\t\t}\n\t\t\t\t\tif (smoothOrigin || (smoothOrigin !== false && CSSPlugin.defaultSmoothOrigin !== false)) {\n\t\t\t\t\t\tx = xOrigin - xOriginOld;\n\t\t\t\t\t\ty = yOrigin - yOriginOld;\n\t\t\t\t\t\t//originally, we simply adjusted the x and y values, but that would cause problems if, for example, you created a rotational tween part-way through an x/y tween. Managing the offset in a separate variable gives us ultimate flexibility.\n\t\t\t\t\t\t//tm.x -= x - (x * m[0] + y * m[2]);\n\t\t\t\t\t\t//tm.y -= y - (x * m[1] + y * m[3]);\n\t\t\t\t\t\ttm.xOffset += (x * m[0] + y * m[2]) - x;\n\t\t\t\t\t\ttm.yOffset += (x * m[1] + y * m[3]) - y;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttm.xOffset = tm.yOffset = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!skipRecord) {\n\t\t\t\t\te.setAttribute(\"data-svg-origin\", v.join(\" \"));\n\t\t\t\t}\n\t\t\t},\n\t\t\t_getBBoxHack = function(swapIfPossible) { //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).\n\t\t\t\tvar svg = _createElement(\"svg\", (this.ownerSVGElement && this.ownerSVGElement.getAttribute(\"xmlns\")) || \"http://www.w3.org/2000/svg\"),\n\t\t\t\t\toldParent = this.parentNode,\n\t\t\t\t\toldSibling = this.nextSibling,\n\t\t\t\t\toldCSS = this.style.cssText,\n\t\t\t\t\tbbox;\n\t\t\t\t_docElement.appendChild(svg);\n\t\t\t\tsvg.appendChild(this);\n\t\t\t\tthis.style.display = \"block\";\n\t\t\t\tif (swapIfPossible) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tbbox = this.getBBox();\n\t\t\t\t\t\tthis._originalGetBBox = this.getBBox;\n\t\t\t\t\t\tthis.getBBox = _getBBoxHack;\n\t\t\t\t\t} catch (e) { }\n\t\t\t\t} else if (this._originalGetBBox) {\n\t\t\t\t\tbbox = this._originalGetBBox();\n\t\t\t\t}\n\t\t\t\tif (oldSibling) {\n\t\t\t\t\toldParent.insertBefore(this, oldSibling);\n\t\t\t\t} else {\n\t\t\t\t\toldParent.appendChild(this);\n\t\t\t\t}\n\t\t\t\t_docElement.removeChild(svg);\n\t\t\t\tthis.style.cssText = oldCSS;\n\t\t\t\treturn bbox;\n\t\t\t},\n\t\t\t_getBBox = function(e) {\n\t\t\t\ttry {\n\t\t\t\t\treturn e.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118\n\t\t\t\t} catch (error) {\n\t\t\t\t\treturn _getBBoxHack.call(e, true);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_isSVG = function(e) { //reports if the element is an SVG on which getBBox() actually works\n\t\t\t\treturn !!(_SVGElement && e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));\n\t\t\t},\n\t\t\t_identity2DMatrix = [1,0,0,1,0,0],\n\t\t\t_getMatrix = function(e, force2D) {\n\t\t\t\tvar tm = e._gsTransform || new Transform(),\n\t\t\t\t\trnd = 100000,\n\t\t\t\t\tstyle = e.style,\n\t\t\t\t\tisDefault, s, m, n, dec, none;\n\t\t\t\tif (_transformProp) {\n\t\t\t\t\ts = _getStyle(e, _transformPropCSS, null, true);\n\t\t\t\t} else if (e.currentStyle) {\n\t\t\t\t\t//for older versions of IE, we need to interpret the filter portion that is in the format: progid:DXImageTransform.Microsoft.Matrix(M11=6.123233995736766e-17, M12=-1, M21=1, M22=6.123233995736766e-17, sizingMethod='auto expand') Notice that we need to swap b and c compared to a normal matrix.\n\t\t\t\t\ts = e.currentStyle.filter.match(_ieGetMatrixExp);\n\t\t\t\t\ts = (s && s.length === 4) ? [s[0].substr(4), Number(s[2].substr(4)), Number(s[1].substr(4)), s[3].substr(4), (tm.x || 0), (tm.y || 0)].join(\",\") : \"\";\n\t\t\t\t}\n\t\t\t\tisDefault = (!s || s === \"none\" || s === \"matrix(1, 0, 0, 1, 0, 0)\");\n\t\t\t\tif (_transformProp && ((none = (!_getComputedStyle(e) || _getComputedStyle(e).display === \"none\")) || !e.parentNode)) { //note: Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n\t\t\t\t\tif (none) { //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not \"none\". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).\n\t\t\t\t\t\tn = style.display;\n\t\t\t\t\t\tstyle.display = \"block\";\n\t\t\t\t\t}\n\t\t\t\t\tif (!e.parentNode) {\n\t\t\t\t\t\tdec = 1; //flag\n\t\t\t\t\t\t_docElement.appendChild(e);\n\t\t\t\t\t}\n\t\t\t\t\ts = _getStyle(e, _transformPropCSS, null, true);\n\t\t\t\t\tisDefault = (!s || s === \"none\" || s === \"matrix(1, 0, 0, 1, 0, 0)\");\n\t\t\t\t\tif (n) {\n\t\t\t\t\t\tstyle.display = n;\n\t\t\t\t\t} else if (none) {\n\t\t\t\t\t\t_removeProp(style, \"display\");\n\t\t\t\t\t}\n\t\t\t\t\tif (dec) {\n\t\t\t\t\t\t_docElement.removeChild(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (tm.svg || (e.getCTM && _isSVG(e))) {\n\t\t\t\t\tif (isDefault && (style[_transformProp] + \"\").indexOf(\"matrix\") !== -1) { //some browsers (like Chrome 40) don't correctly report transforms that are applied inline on an SVG element (they don't get included in the computed style), so we double-check here and accept matrix values\n\t\t\t\t\t\ts = style[_transformProp];\n\t\t\t\t\t\tisDefault = 0;\n\t\t\t\t\t}\n\t\t\t\t\tm = e.getAttribute(\"transform\");\n\t\t\t\t\tif (isDefault && m) {\n\t\t\t\t\t\tm = e.transform.baseVal.consolidate().matrix; //ensures that even complex values like \"translate(50,60) rotate(135,0,0)\" are parsed because it mashes it into a matrix.\n\t\t\t\t\t\ts = \"matrix(\" + m.a + \",\" + m.b + \",\" + m.c + \",\" + m.d + \",\" + m.e + \",\" + m.f + \")\";\n\t\t\t\t\t\tisDefault = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isDefault) {\n\t\t\t\t\treturn _identity2DMatrix;\n\t\t\t\t}\n\t\t\t\t//split the matrix values out into an array (m for matrix)\n\t\t\t\tm = (s || \"\").match(_numExp) || [];\n\t\t\t\ti = m.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tn = Number(m[i]);\n\t\t\t\t\tm[i] = (dec = n - (n |= 0)) ? ((dec * rnd + (dec < 0 ? -0.5 : 0.5)) | 0) / rnd + n : n; //convert strings to Numbers and round to 5 decimal places to avoid issues with tiny numbers. Roughly 20x faster than Number.toFixed(). We also must make sure to round before dividing so that values like 0.9999999999 become 1 to avoid glitches in browser rendering and interpretation of flipped/rotated 3D matrices. And don't just multiply the number by rnd, floor it, and then divide by rnd because the bitwise operations max out at a 32-bit signed integer, thus it could get clipped at a relatively low value (like 22,000.00000 for example).\n\t\t\t\t}\n\t\t\t\treturn (force2D && m.length > 6) ? [m[0], m[1], m[4], m[5], m[12], m[13]] : m;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Parses the transform values for an element, returning an object with x, y, z, scaleX, scaleY, scaleZ, rotation, rotationX, rotationY, skewX, and skewY properties. Note: by default (for performance reasons), all skewing is combined into skewX and rotation but skewY still has a place in the transform object so that we can record how much of the skew is attributed to skewX vs skewY. Remember, a skewY of 10 looks the same as a rotation of 10 and skewX of -10.\n\t\t\t * @param {!Object} t target element\n\t\t\t * @param {Object=} cs computed style object (optional)\n\t\t\t * @param {boolean=} rec if true, the transform values will be recorded to the target element's _gsTransform object, like target._gsTransform = {x:0, y:0, z:0, scaleX:1...}\n\t\t\t * @param {boolean=} parse if true, we'll ignore any _gsTransform values that already exist on the element, and force a reparsing of the css (calculated style)\n\t\t\t * @return {object} object containing all of the transform properties/values like {x:0, y:0, z:0, scaleX:1...}\n\t\t\t */\n\t\t\t_getTransform = _internals.getTransform = function(t, cs, rec, parse) {\n\t\t\t\tif (t._gsTransform && rec && !parse) {\n\t\t\t\t\treturn t._gsTransform; //if the element already has a _gsTransform, use that. Note: some browsers don't accurately return the calculated style for the transform (particularly for SVG), so it's almost always safest to just use the values we've already applied rather than re-parsing things.\n\t\t\t\t}\n\t\t\t\tvar tm = rec ? t._gsTransform || new Transform() : new Transform(),\n\t\t\t\t\tinvX = (tm.scaleX < 0), //in order to interpret things properly, we need to know if the user applied a negative scaleX previously so that we can adjust the rotation and skewX accordingly. Otherwise, if we always interpret a flipped matrix as affecting scaleY and the user only wants to tween the scaleX on multiple sequential tweens, it would keep the negative scaleY without that being the user's intent.\n\t\t\t\t\tmin = 0.00002,\n\t\t\t\t\trnd = 100000,\n\t\t\t\t\tzOrigin = _supports3D ? parseFloat(_getStyle(t, _transformOriginProp, cs, false, \"0 0 0\").split(\" \")[2]) || tm.zOrigin  || 0 : 0,\n\t\t\t\t\tdefaultTransformPerspective = parseFloat(CSSPlugin.defaultTransformPerspective) || 0,\n\t\t\t\t\tm, i, scaleX, scaleY, rotation, skewX;\n\n\t\t\t\ttm.svg = !!(t.getCTM && _isSVG(t));\n\t\t\t\tif (tm.svg) {\n\t\t\t\t\t_parseSVGOrigin(t, _getStyle(t, _transformOriginProp, cs, false, \"50% 50%\") + \"\", tm, t.getAttribute(\"data-svg-origin\"));\n\t\t\t\t\t_useSVGTransformAttr = CSSPlugin.useSVGTransformAttr || _forceSVGTransformAttr;\n\t\t\t\t}\n\t\t\t\tm = _getMatrix(t);\n\t\t\t\tif (m !== _identity2DMatrix) {\n\n\t\t\t\t\tif (m.length === 16) {\n\t\t\t\t\t\t//we'll only look at these position-related 6 variables first because if x/y/z all match, it's relatively safe to assume we don't need to re-parse everything which risks losing important rotational information (like rotationX:180 plus rotationY:180 would look the same as rotation:180 - there's no way to know for sure which direction was taken based solely on the matrix3d() values)\n\t\t\t\t\t\tvar a11 = m[0], a21 = m[1], a31 = m[2], a41 = m[3],\n\t\t\t\t\t\t\ta12 = m[4], a22 = m[5], a32 = m[6], a42 = m[7],\n\t\t\t\t\t\t\ta13 = m[8], a23 = m[9], a33 = m[10],\n\t\t\t\t\t\t\ta14 = m[12], a24 = m[13], a34 = m[14],\n\t\t\t\t\t\t\ta43 = m[11],\n\t\t\t\t\t\t\tangle = Math.atan2(a32, a33),\n\t\t\t\t\t\t\tt1, t2, t3, t4, cos, sin;\n\t\t\t\t\t\t//we manually compensate for non-zero z component of transformOrigin to work around bugs in Safari\n\t\t\t\t\t\tif (tm.zOrigin) {\n\t\t\t\t\t\t\ta34 = -tm.zOrigin;\n\t\t\t\t\t\t\ta14 = a13*a34-m[12];\n\t\t\t\t\t\t\ta24 = a23*a34-m[13];\n\t\t\t\t\t\t\ta34 = a33*a34+tm.zOrigin-m[14];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//note for possible future consolidation: rotationX: Math.atan2(a32, a33), rotationY: Math.atan2(-a31, Math.sqrt(a33 * a33 + a32 * a32)), rotation: Math.atan2(a21, a11), skew: Math.atan2(a12, a22). However, it doesn't seem to be quite as reliable as the full-on backwards rotation procedure.\n\t\t\t\t\t\ttm.rotationX = angle * _RAD2DEG;\n\t\t\t\t\t\t//rotationX\n\t\t\t\t\t\tif (angle) {\n\t\t\t\t\t\t\tcos = Math.cos(-angle);\n\t\t\t\t\t\t\tsin = Math.sin(-angle);\n\t\t\t\t\t\t\tt1 = a12*cos+a13*sin;\n\t\t\t\t\t\t\tt2 = a22*cos+a23*sin;\n\t\t\t\t\t\t\tt3 = a32*cos+a33*sin;\n\t\t\t\t\t\t\ta13 = a12*-sin+a13*cos;\n\t\t\t\t\t\t\ta23 = a22*-sin+a23*cos;\n\t\t\t\t\t\t\ta33 = a32*-sin+a33*cos;\n\t\t\t\t\t\t\ta43 = a42*-sin+a43*cos;\n\t\t\t\t\t\t\ta12 = t1;\n\t\t\t\t\t\t\ta22 = t2;\n\t\t\t\t\t\t\ta32 = t3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//rotationY\n\t\t\t\t\t\tangle = Math.atan2(-a31, a33);\n\t\t\t\t\t\ttm.rotationY = angle * _RAD2DEG;\n\t\t\t\t\t\tif (angle) {\n\t\t\t\t\t\t\tcos = Math.cos(-angle);\n\t\t\t\t\t\t\tsin = Math.sin(-angle);\n\t\t\t\t\t\t\tt1 = a11*cos-a13*sin;\n\t\t\t\t\t\t\tt2 = a21*cos-a23*sin;\n\t\t\t\t\t\t\tt3 = a31*cos-a33*sin;\n\t\t\t\t\t\t\ta23 = a21*sin+a23*cos;\n\t\t\t\t\t\t\ta33 = a31*sin+a33*cos;\n\t\t\t\t\t\t\ta43 = a41*sin+a43*cos;\n\t\t\t\t\t\t\ta11 = t1;\n\t\t\t\t\t\t\ta21 = t2;\n\t\t\t\t\t\t\ta31 = t3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//rotationZ\n\t\t\t\t\t\tangle = Math.atan2(a21, a11);\n\t\t\t\t\t\ttm.rotation = angle * _RAD2DEG;\n\t\t\t\t\t\tif (angle) {\n\t\t\t\t\t\t\tcos = Math.cos(angle);\n\t\t\t\t\t\t\tsin = Math.sin(angle);\n\t\t\t\t\t\t\tt1 = a11*cos+a21*sin;\n\t\t\t\t\t\t\tt2 = a12*cos+a22*sin;\n\t\t\t\t\t\t\tt3 = a13*cos+a23*sin;\n\t\t\t\t\t\t\ta21 = a21*cos-a11*sin;\n\t\t\t\t\t\t\ta22 = a22*cos-a12*sin;\n\t\t\t\t\t\t\ta23 = a23*cos-a13*sin;\n\t\t\t\t\t\t\ta11 = t1;\n\t\t\t\t\t\t\ta12 = t2;\n\t\t\t\t\t\t\ta13 = t3;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (tm.rotationX && Math.abs(tm.rotationX) + Math.abs(tm.rotation) > 359.9) { //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.\n\t\t\t\t\t\t\ttm.rotationX = tm.rotation = 0;\n\t\t\t\t\t\t\ttm.rotationY = 180 - tm.rotationY;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//skewX\n\t\t\t\t\t\tangle = Math.atan2(a12, a22);\n\n\t\t\t\t\t\t//scales\n\t\t\t\t\t\ttm.scaleX = ((Math.sqrt(a11 * a11 + a21 * a21 + a31 * a31) * rnd + 0.5) | 0) / rnd;\n\t\t\t\t\t\ttm.scaleY = ((Math.sqrt(a22 * a22 + a32 * a32) * rnd + 0.5) | 0) / rnd;\n\t\t\t\t\t\ttm.scaleZ = ((Math.sqrt(a13 * a13 + a23 * a23 + a33 * a33) * rnd + 0.5) | 0) / rnd;\n\t\t\t\t\t\ta11 /= tm.scaleX;\n\t\t\t\t\t\ta12 /= tm.scaleY;\n\t\t\t\t\t\ta21 /= tm.scaleX;\n\t\t\t\t\t\ta22 /= tm.scaleY;\n\t\t\t\t\t\tif (Math.abs(angle) > min) {\n\t\t\t\t\t\t\ttm.skewX = angle * _RAD2DEG;\n\t\t\t\t\t\t\ta12 = 0; //unskews\n\t\t\t\t\t\t\tif (tm.skewType !== \"simple\") {\n\t\t\t\t\t\t\t\ttm.scaleY *= 1 / Math.cos(angle); //by default, we compensate the scale based on the skew so that the element maintains a similar proportion when skewed, so we have to alter the scaleY here accordingly to match the default (non-adjusted) skewing that CSS does (stretching more and more as it skews).\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttm.skewX = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/* //for testing purposes\n\t\t\t\t\t\tvar transform = \"matrix3d(\",\n\t\t\t\t\t\t\tcomma = \",\",\n\t\t\t\t\t\t\tzero = \"0\";\n\t\t\t\t\t\ta13 /= tm.scaleZ;\n\t\t\t\t\t\ta23 /= tm.scaleZ;\n\t\t\t\t\t\ta31 /= tm.scaleX;\n\t\t\t\t\t\ta32 /= tm.scaleY;\n\t\t\t\t\t\ta33 /= tm.scaleZ;\n\t\t\t\t\t\ttransform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);\n\t\t\t\t\t\ttransform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);\n\t\t\t\t\t\ttransform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);\n\t\t\t\t\t\ttransform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;\n\t\t\t\t\t\ttransform += a14 + comma + a24 + comma + a34 + comma + (tm.perspective ? (1 + (-a34 / tm.perspective)) : 1) + \")\";\n\t\t\t\t\t\tconsole.log(transform);\n\t\t\t\t\t\tdocument.querySelector(\".test\").style[_transformProp] = transform;\n\t\t\t\t\t\t*/\n\n\t\t\t\t\t\ttm.perspective = a43 ? 1 / ((a43 < 0) ? -a43 : a43) : 0;\n\t\t\t\t\t\ttm.x = a14;\n\t\t\t\t\t\ttm.y = a24;\n\t\t\t\t\t\ttm.z = a34;\n\t\t\t\t\t\tif (tm.svg) {\n\t\t\t\t\t\t\ttm.x -= tm.xOrigin - (tm.xOrigin * a11 - tm.yOrigin * a12);\n\t\t\t\t\t\t\ttm.y -= tm.yOrigin - (tm.yOrigin * a21 - tm.xOrigin * a22);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ((!_supports3D || parse || !m.length || tm.x !== m[4] || tm.y !== m[5] || (!tm.rotationX && !tm.rotationY))) { //sometimes a 6-element matrix is returned even when we performed 3D transforms, like if rotationX and rotationY are 180. In cases like this, we still need to honor the 3D transforms. If we just rely on the 2D info, it could affect how the data is interpreted, like scaleY might get set to -1 or rotation could get offset by 180 degrees. For example, do a TweenLite.to(element, 1, {css:{rotationX:180, rotationY:180}}) and then later, TweenLite.to(element, 1, {css:{rotationX:0}}) and without this conditional logic in place, it'd jump to a state of being unrotated when the 2nd tween starts. Then again, we need to honor the fact that the user COULD alter the transforms outside of CSSPlugin, like by manually applying new css, so we try to sense that by looking at x and y because if those changed, we know the changes were made outside CSSPlugin and we force a reinterpretation of the matrix values. Also, in Webkit browsers, if the element's \"display\" is \"none\", its calculated style value will always return empty, so if we've already recorded the values in the _gsTransform object, we'll just rely on those.\n\t\t\t\t\t\tvar k = (m.length >= 6),\n\t\t\t\t\t\t\ta = k ? m[0] : 1,\n\t\t\t\t\t\t\tb = m[1] || 0,\n\t\t\t\t\t\t\tc = m[2] || 0,\n\t\t\t\t\t\t\td = k ? m[3] : 1;\n\t\t\t\t\t\ttm.x = m[4] || 0;\n\t\t\t\t\t\ttm.y = m[5] || 0;\n\t\t\t\t\t\tscaleX = Math.sqrt(a * a + b * b);\n\t\t\t\t\t\tscaleY = Math.sqrt(d * d + c * c);\n\t\t\t\t\t\trotation = (a || b) ? Math.atan2(b, a) * _RAD2DEG : tm.rotation || 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).\n\t\t\t\t\t\tskewX = (c || d) ? Math.atan2(c, d) * _RAD2DEG + rotation : tm.skewX || 0;\n\t\t\t\t\t\ttm.scaleX = scaleX;\n\t\t\t\t\t\ttm.scaleY = scaleY;\n\t\t\t\t\t\ttm.rotation = rotation;\n\t\t\t\t\t\ttm.skewX = skewX;\n\t\t\t\t\t\tif (_supports3D) {\n\t\t\t\t\t\t\ttm.rotationX = tm.rotationY = tm.z = 0;\n\t\t\t\t\t\t\ttm.perspective = defaultTransformPerspective;\n\t\t\t\t\t\t\ttm.scaleZ = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tm.svg) {\n\t\t\t\t\t\t\ttm.x -= tm.xOrigin - (tm.xOrigin * a + tm.yOrigin * c);\n\t\t\t\t\t\t\ttm.y -= tm.yOrigin - (tm.xOrigin * b + tm.yOrigin * d);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (Math.abs(tm.skewX) > 90 && Math.abs(tm.skewX) < 270) {\n\t\t\t\t\t\tif (invX) {\n\t\t\t\t\t\t\ttm.scaleX *= -1;\n\t\t\t\t\t\t\ttm.skewX += (tm.rotation <= 0) ? 180 : -180;\n\t\t\t\t\t\t\ttm.rotation += (tm.rotation <= 0) ? 180 : -180;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttm.scaleY *= -1;\n\t\t\t\t\t\t\ttm.skewX += (tm.skewX <= 0) ? 180 : -180;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttm.zOrigin = zOrigin;\n\t\t\t\t\t//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the \"e-\" towards the end) and would render the object slightly off. So we round to 0 in these cases. The conditional logic here is faster than calling Math.abs(). Also, browsers tend to render a SLIGHTLY rotated object in a fuzzy way, so we need to snap to exactly 0 when appropriate.\n\t\t\t\t\tfor (i in tm) {\n\t\t\t\t\t\tif (tm[i] < min) if (tm[i] > -min) {\n\t\t\t\t\t\t\ttm[i] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//DEBUG: _log(\"parsed rotation of \" + t.getAttribute(\"id\")+\": \"+(tm.rotationX)+\", \"+(tm.rotationY)+\", \"+(tm.rotation)+\", scale: \"+tm.scaleX+\", \"+tm.scaleY+\", \"+tm.scaleZ+\", position: \"+tm.x+\", \"+tm.y+\", \"+tm.z+\", perspective: \"+tm.perspective+ \", origin: \"+ tm.xOrigin+ \",\"+ tm.yOrigin);\n\t\t\t\tif (rec) {\n\t\t\t\t\tt._gsTransform = tm; //record to the object's _gsTransform which we use so that tweens can control individual properties independently (we need all the properties to accurately recompose the matrix in the setRatio() method)\n\t\t\t\t\tif (tm.svg) { //if we're supposed to apply transforms to the SVG element's \"transform\" attribute, make sure there aren't any CSS transforms applied or they'll override the attribute ones. Also clear the transform attribute if we're using CSS, just to be clean.\n\t\t\t\t\t\tif (_useSVGTransformAttr && t.style[_transformProp]) {\n\t\t\t\t\t\t\tTweenLite.delayedCall(0.001, function(){ //if we apply this right away (before anything has rendered), we risk there being no transforms for a brief moment and it also interferes with adjusting the transformOrigin in a tween with immediateRender:true (it'd try reading the matrix and it wouldn't have the appropriate data in place because we just removed it).\n\t\t\t\t\t\t\t\t_removeProp(t.style, _transformProp);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else if (!_useSVGTransformAttr && t.getAttribute(\"transform\")) {\n\t\t\t\t\t\t\tTweenLite.delayedCall(0.001, function(){\n\t\t\t\t\t\t\t\tt.removeAttribute(\"transform\");\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn tm;\n\t\t\t},\n\n\t\t\t//for setting 2D transforms in IE6, IE7, and IE8 (must use a \"filter\" to emulate the behavior of modern day browser transforms)\n\t\t\t_setIETransformRatio = function(v) {\n\t\t\t\tvar t = this.data, //refers to the element's _gsTransform object\n\t\t\t\t\tang = -t.rotation * _DEG2RAD,\n\t\t\t\t\tskew = ang + t.skewX * _DEG2RAD,\n\t\t\t\t\trnd = 100000,\n\t\t\t\t\ta = ((Math.cos(ang) * t.scaleX * rnd) | 0) / rnd,\n\t\t\t\t\tb = ((Math.sin(ang) * t.scaleX * rnd) | 0) / rnd,\n\t\t\t\t\tc = ((Math.sin(skew) * -t.scaleY * rnd) | 0) / rnd,\n\t\t\t\t\td = ((Math.cos(skew) * t.scaleY * rnd) | 0) / rnd,\n\t\t\t\t\tstyle = this.t.style,\n\t\t\t\t\tcs = this.t.currentStyle,\n\t\t\t\t\tfilters, val;\n\t\t\t\tif (!cs) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tval = b; //just for swapping the variables an inverting them (reused \"val\" to avoid creating another variable in memory). IE's filter matrix uses a non-standard matrix configuration (angle goes the opposite way, and b and c are reversed and inverted)\n\t\t\t\tb = -c;\n\t\t\t\tc = -val;\n\t\t\t\tfilters = cs.filter;\n\t\t\t\tstyle.filter = \"\"; //remove filters so that we can accurately measure offsetWidth/offsetHeight\n\t\t\t\tvar w = this.t.offsetWidth,\n\t\t\t\t\th = this.t.offsetHeight,\n\t\t\t\t\tclip = (cs.position !== \"absolute\"),\n\t\t\t\t\tm = \"progid:DXImageTransform.Microsoft.Matrix(M11=\" + a + \", M12=\" + b + \", M21=\" + c + \", M22=\" + d,\n\t\t\t\t\tox = t.x + (w * t.xPercent / 100),\n\t\t\t\t\toy = t.y + (h * t.yPercent / 100),\n\t\t\t\t\tdx, dy;\n\n\t\t\t\t//if transformOrigin is being used, adjust the offset x and y\n\t\t\t\tif (t.ox != null) {\n\t\t\t\t\tdx = ((t.oxp) ? w * t.ox * 0.01 : t.ox) - w / 2;\n\t\t\t\t\tdy = ((t.oyp) ? h * t.oy * 0.01 : t.oy) - h / 2;\n\t\t\t\t\tox += dx - (dx * a + dy * b);\n\t\t\t\t\toy += dy - (dx * c + dy * d);\n\t\t\t\t}\n\n\t\t\t\tif (!clip) {\n\t\t\t\t\tm += \", sizingMethod='auto expand')\";\n\t\t\t\t} else {\n\t\t\t\t\tdx = (w / 2);\n\t\t\t\t\tdy = (h / 2);\n\t\t\t\t\t//translate to ensure that transformations occur around the correct origin (default is center).\n\t\t\t\t\tm += \", Dx=\" + (dx - (dx * a + dy * b) + ox) + \", Dy=\" + (dy - (dx * c + dy * d) + oy) + \")\";\n\t\t\t\t}\n\t\t\t\tif (filters.indexOf(\"DXImageTransform.Microsoft.Matrix(\") !== -1) {\n\t\t\t\t\tstyle.filter = filters.replace(_ieSetMatrixExp, m);\n\t\t\t\t} else {\n\t\t\t\t\tstyle.filter = m + \" \" + filters; //we must always put the transform/matrix FIRST (before alpha(opacity=xx)) to avoid an IE bug that slices part of the object when rotation is applied with alpha.\n\t\t\t\t}\n\n\t\t\t\t//at the end or beginning of the tween, if the matrix is normal (1, 0, 0, 1) and opacity is 100 (or doesn't exist), remove the filter to improve browser performance.\n\t\t\t\tif (v === 0 || v === 1) if (a === 1) if (b === 0) if (c === 0) if (d === 1) if (!clip || m.indexOf(\"Dx=0, Dy=0\") !== -1) if (!_opacityExp.test(filters) || parseFloat(RegExp.$1) === 100) if (filters.indexOf(\"gradient(\" && filters.indexOf(\"Alpha\")) === -1) {\n\t\t\t\t\tstyle.removeAttribute(\"filter\");\n\t\t\t\t}\n\n\t\t\t\t//we must set the margins AFTER applying the filter in order to avoid some bugs in IE8 that could (in rare scenarios) cause them to be ignored intermittently (vibration).\n\t\t\t\tif (!clip) {\n\t\t\t\t\tvar mult = (_ieVers < 8) ? 1 : -1, //in Internet Explorer 7 and before, the box model is broken, causing the browser to treat the width/height of the actual rotated filtered image as the width/height of the box itself, but Microsoft corrected that in IE8. We must use a negative offset in IE8 on the right/bottom\n\t\t\t\t\t\tmarg, prop, dif;\n\t\t\t\t\tdx = t.ieOffsetX || 0;\n\t\t\t\t\tdy = t.ieOffsetY || 0;\n\t\t\t\t\tt.ieOffsetX = Math.round((w - ((a < 0 ? -a : a) * w + (b < 0 ? -b : b) * h)) / 2 + ox);\n\t\t\t\t\tt.ieOffsetY = Math.round((h - ((d < 0 ? -d : d) * h + (c < 0 ? -c : c) * w)) / 2 + oy);\n\t\t\t\t\tfor (i = 0; i < 4; i++) {\n\t\t\t\t\t\tprop = _margins[i];\n\t\t\t\t\t\tmarg = cs[prop];\n\t\t\t\t\t\t//we need to get the current margin in case it is being tweened separately (we want to respect that tween's changes)\n\t\t\t\t\t\tval = (marg.indexOf(\"px\") !== -1) ? parseFloat(marg) : _convertToPixels(this.t, prop, parseFloat(marg), marg.replace(_suffixExp, \"\")) || 0;\n\t\t\t\t\t\tif (val !== t[prop]) {\n\t\t\t\t\t\t\tdif = (i < 2) ? -t.ieOffsetX : -t.ieOffsetY; //if another tween is controlling a margin, we cannot only apply the difference in the ieOffsets, so we essentially zero-out the dx and dy here in that case. We record the margin(s) later so that we can keep comparing them, making this code very flexible.\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdif = (i < 2) ? dx - t.ieOffsetX : dy - t.ieOffsetY;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstyle[prop] = (t[prop] = Math.round( val - dif * ((i === 0 || i === 2) ? 1 : mult) )) + \"px\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/* translates a super small decimal to a string WITHOUT scientific notation\n\t\t\t_safeDecimal = function(n) {\n\t\t\t\tvar s = (n < 0 ? -n : n) + \"\",\n\t\t\t\t\ta = s.split(\"e-\");\n\t\t\t\treturn (n < 0 ? \"-0.\" : \"0.\") + new Array(parseInt(a[1], 10) || 0).join(\"0\") + a[0].split(\".\").join(\"\");\n\t\t\t},\n\t\t\t*/\n\n\t\t\t_setTransformRatio = _internals.set3DTransformRatio = _internals.setTransformRatio = function(v) {\n\t\t\t\tvar t = this.data, //refers to the element's _gsTransform object\n\t\t\t\t\tstyle = this.t.style,\n\t\t\t\t\tangle = t.rotation,\n\t\t\t\t\trotationX = t.rotationX,\n\t\t\t\t\trotationY = t.rotationY,\n\t\t\t\t\tsx = t.scaleX,\n\t\t\t\t\tsy = t.scaleY,\n\t\t\t\t\tsz = t.scaleZ,\n\t\t\t\t\tx = t.x,\n\t\t\t\t\ty = t.y,\n\t\t\t\t\tz = t.z,\n\t\t\t\t\tisSVG = t.svg,\n\t\t\t\t\tperspective = t.perspective,\n\t\t\t\t\tforce3D = t.force3D,\n\t\t\t\t\tskewY = t.skewY,\n\t\t\t\t\tskewX = t.skewX,\n\t\t\t\t\tt1,\ta11, a12, a13, a21, a22, a23, a31, a32, a33, a41, a42, a43,\n\t\t\t\t\tzOrigin, min, cos, sin, t2, transform, comma, zero, skew, rnd;\n\t\t\t\tif (skewY) { //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.\n\t\t\t\t\tskewX += skewY;\n\t\t\t\t\tangle += skewY;\n\t\t\t\t}\n\n\t\t\t\t//check to see if we should render as 2D (and SVGs must use 2D when _useSVGTransformAttr is true)\n\t\t\t\tif (((((v === 1 || v === 0) && force3D === \"auto\" && (this.tween._totalTime === this.tween._totalDuration || !this.tween._totalTime)) || !force3D) && !z && !perspective && !rotationY && !rotationX && sz === 1) || (_useSVGTransformAttr && isSVG) || !_supports3D) { //on the final render (which could be 0 for a from tween), if there are no 3D aspects, render in 2D to free up memory and improve performance especially on mobile devices. Check the tween's totalTime/totalDuration too in order to make sure it doesn't happen between repeats if it's a repeating tween.\n\n\t\t\t\t\t//2D\n\t\t\t\t\tif (angle || skewX || isSVG) {\n\t\t\t\t\t\tangle *= _DEG2RAD;\n\t\t\t\t\t\tskew = skewX * _DEG2RAD;\n\t\t\t\t\t\trnd = 100000;\n\t\t\t\t\t\ta11 = Math.cos(angle) * sx;\n\t\t\t\t\t\ta21 = Math.sin(angle) * sx;\n\t\t\t\t\t\ta12 = Math.sin(angle - skew) * -sy;\n\t\t\t\t\t\ta22 = Math.cos(angle - skew) * sy;\n\t\t\t\t\t\tif (skew && t.skewType === \"simple\") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to \"simple\" to use the uncompensated skewing that CSS does\n\t\t\t\t\t\t\tt1 = Math.tan(skew - skewY * _DEG2RAD);\n\t\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\t\ta12 *= t1;\n\t\t\t\t\t\t\ta22 *= t1;\n\t\t\t\t\t\t\tif (skewY) {\n\t\t\t\t\t\t\t\tt1 = Math.tan(skewY * _DEG2RAD);\n\t\t\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\t\t\ta11 *= t1;\n\t\t\t\t\t\t\t\ta21 *= t1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isSVG) {\n\t\t\t\t\t\t\tx += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;\n\t\t\t\t\t\t\ty += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;\n\t\t\t\t\t\t\tif (_useSVGTransformAttr && (t.xPercent || t.yPercent)) { //The SVG spec doesn't support percentage-based translation in the \"transform\" attribute, so we merge it into the matrix to simulate it.\n\t\t\t\t\t\t\t\tmin = this.t.getBBox();\n\t\t\t\t\t\t\t\tx += t.xPercent * 0.01 * min.width;\n\t\t\t\t\t\t\t\ty += t.yPercent * 0.01 * min.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tmin = 0.000001;\n\t\t\t\t\t\t\tif (x < min) if (x > -min) {\n\t\t\t\t\t\t\t\tx = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (y < min) if (y > -min) {\n\t\t\t\t\t\t\t\ty = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttransform = (((a11 * rnd) | 0) / rnd) + \",\" + (((a21 * rnd) | 0) / rnd) + \",\" + (((a12 * rnd) | 0) / rnd) + \",\" + (((a22 * rnd) | 0) / rnd) + \",\" + x + \",\" + y + \")\";\n\t\t\t\t\t\tif (isSVG && _useSVGTransformAttr) {\n\t\t\t\t\t\t\tthis.t.setAttribute(\"transform\", \"matrix(\" + transform);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//some browsers have a hard time with very small values like 2.4492935982947064e-16 (notice the \"e-\" towards the end) and would render the object slightly off. So we round to 5 decimal places.\n\t\t\t\t\t\t\tstyle[_transformProp] = ((t.xPercent || t.yPercent) ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix(\" : \"matrix(\") + transform;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstyle[_transformProp] = ((t.xPercent || t.yPercent) ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix(\" : \"matrix(\") + sx + \",0,0,\" + sy + \",\" + x + \",\" + y + \")\";\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\t\t\t\tif (_isFirefox) { //Firefox has a bug (at least in v25) that causes it to render the transparent part of 32-bit PNG images as black when displayed inside an iframe and the 3D scale is very small and doesn't change sufficiently enough between renders (like if you use a Power4.easeInOut to scale from 0 to 1 where the beginning values only change a tiny amount to begin the tween before accelerating). In this case, we force the scale to be 0.00002 instead which is visually the same but works around the Firefox issue.\n\t\t\t\t\tmin = 0.0001;\n\t\t\t\t\tif (sx < min && sx > -min) {\n\t\t\t\t\t\tsx = sz = 0.00002;\n\t\t\t\t\t}\n\t\t\t\t\tif (sy < min && sy > -min) {\n\t\t\t\t\t\tsy = sz = 0.00002;\n\t\t\t\t\t}\n\t\t\t\t\tif (perspective && !t.z && !t.rotationX && !t.rotationY) { //Firefox has a bug that causes elements to have an odd super-thin, broken/dotted black border on elements that have a perspective set but aren't utilizing 3D space (no rotationX, rotationY, or z).\n\t\t\t\t\t\tperspective = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (angle || skewX) {\n\t\t\t\t\tangle *= _DEG2RAD;\n\t\t\t\t\tcos = a11 = Math.cos(angle);\n\t\t\t\t\tsin = a21 = Math.sin(angle);\n\t\t\t\t\tif (skewX) {\n\t\t\t\t\t\tangle -= skewX * _DEG2RAD;\n\t\t\t\t\t\tcos = Math.cos(angle);\n\t\t\t\t\t\tsin = Math.sin(angle);\n\t\t\t\t\t\tif (t.skewType === \"simple\") { //by default, we compensate skewing on the other axis to make it look more natural, but you can set the skewType to \"simple\" to use the uncompensated skewing that CSS does\n\t\t\t\t\t\t\tt1 = Math.tan((skewX - skewY) * _DEG2RAD);\n\t\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\t\tcos *= t1;\n\t\t\t\t\t\t\tsin *= t1;\n\t\t\t\t\t\t\tif (t.skewY) {\n\t\t\t\t\t\t\t\tt1 = Math.tan(skewY * _DEG2RAD);\n\t\t\t\t\t\t\t\tt1 = Math.sqrt(1 + t1 * t1);\n\t\t\t\t\t\t\t\ta11 *= t1;\n\t\t\t\t\t\t\t\ta21 *= t1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ta12 = -sin;\n\t\t\t\t\ta22 = cos;\n\n\t\t\t\t} else if (!rotationY && !rotationX && sz === 1 && !perspective && !isSVG) { //if we're only translating and/or 2D scaling, this is faster...\n\t\t\t\t\tstyle[_transformProp] = ((t.xPercent || t.yPercent) ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) translate3d(\" : \"translate3d(\") + x + \"px,\" + y + \"px,\" + z +\"px)\" + ((sx !== 1 || sy !== 1) ? \" scale(\" + sx + \",\" + sy + \")\" : \"\");\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\ta11 = a22 = 1;\n\t\t\t\t\ta12 = a21 = 0;\n\t\t\t\t}\n\t\t\t\t// KEY  INDEX   AFFECTS a[row][column]\n\t\t\t\t// a11  0       rotation, rotationY, scaleX\n\t\t\t\t// a21  1       rotation, rotationY, scaleX\n\t\t\t\t// a31  2       rotationY, scaleX\n\t\t\t\t// a41  3       rotationY, scaleX\n\t\t\t\t// a12  4       rotation, skewX, rotationX, scaleY\n\t\t\t\t// a22  5       rotation, skewX, rotationX, scaleY\n\t\t\t\t// a32  6       rotationX, scaleY\n\t\t\t\t// a42  7       rotationX, scaleY\n\t\t\t\t// a13  8       rotationY, rotationX, scaleZ\n\t\t\t\t// a23  9       rotationY, rotationX, scaleZ\n\t\t\t\t// a33  10      rotationY, rotationX, scaleZ\n\t\t\t\t// a43  11      rotationY, rotationX, perspective, scaleZ\n\t\t\t\t// a14  12      x, zOrigin, svgOrigin\n\t\t\t\t// a24  13      y, zOrigin, svgOrigin\n\t\t\t\t// a34  14      z, zOrigin\n\t\t\t\t// a44  15\n\t\t\t\t// rotation: Math.atan2(a21, a11)\n\t\t\t\t// rotationY: Math.atan2(a13, a33) (or Math.atan2(a13, a11))\n\t\t\t\t// rotationX: Math.atan2(a32, a33)\n\t\t\t\ta33 = 1;\n\t\t\t\ta13 = a23 = a31 = a32 = a41 = a42 = 0;\n\t\t\t\ta43 = (perspective) ? -1 / perspective : 0;\n\t\t\t\tzOrigin = t.zOrigin;\n\t\t\t\tmin = 0.000001; //threshold below which browsers use scientific notation which won't work.\n\t\t\t\tcomma = \",\";\n\t\t\t\tzero = \"0\";\n\t\t\t\tangle = rotationY * _DEG2RAD;\n\t\t\t\tif (angle) {\n\t\t\t\t\tcos = Math.cos(angle);\n\t\t\t\t\tsin = Math.sin(angle);\n\t\t\t\t\ta31 = -sin;\n\t\t\t\t\ta41 = a43*-sin;\n\t\t\t\t\ta13 = a11*sin;\n\t\t\t\t\ta23 = a21*sin;\n\t\t\t\t\ta33 = cos;\n\t\t\t\t\ta43 *= cos;\n\t\t\t\t\ta11 *= cos;\n\t\t\t\t\ta21 *= cos;\n\t\t\t\t}\n\t\t\t\tangle = rotationX * _DEG2RAD;\n\t\t\t\tif (angle) {\n\t\t\t\t\tcos = Math.cos(angle);\n\t\t\t\t\tsin = Math.sin(angle);\n\t\t\t\t\tt1 = a12*cos+a13*sin;\n\t\t\t\t\tt2 = a22*cos+a23*sin;\n\t\t\t\t\ta32 = a33*sin;\n\t\t\t\t\ta42 = a43*sin;\n\t\t\t\t\ta13 = a12*-sin+a13*cos;\n\t\t\t\t\ta23 = a22*-sin+a23*cos;\n\t\t\t\t\ta33 = a33*cos;\n\t\t\t\t\ta43 = a43*cos;\n\t\t\t\t\ta12 = t1;\n\t\t\t\t\ta22 = t2;\n\t\t\t\t}\n\t\t\t\tif (sz !== 1) {\n\t\t\t\t\ta13*=sz;\n\t\t\t\t\ta23*=sz;\n\t\t\t\t\ta33*=sz;\n\t\t\t\t\ta43*=sz;\n\t\t\t\t}\n\t\t\t\tif (sy !== 1) {\n\t\t\t\t\ta12*=sy;\n\t\t\t\t\ta22*=sy;\n\t\t\t\t\ta32*=sy;\n\t\t\t\t\ta42*=sy;\n\t\t\t\t}\n\t\t\t\tif (sx !== 1) {\n\t\t\t\t\ta11*=sx;\n\t\t\t\t\ta21*=sx;\n\t\t\t\t\ta31*=sx;\n\t\t\t\t\ta41*=sx;\n\t\t\t\t}\n\n\t\t\t\tif (zOrigin || isSVG) {\n\t\t\t\t\tif (zOrigin) {\n\t\t\t\t\t\tx += a13*-zOrigin;\n\t\t\t\t\t\ty += a23*-zOrigin;\n\t\t\t\t\t\tz += a33*-zOrigin+zOrigin;\n\t\t\t\t\t}\n\t\t\t\t\tif (isSVG) { //due to bugs in some browsers, we need to manage the transform-origin of SVG manually\n\t\t\t\t\t\tx += t.xOrigin - (t.xOrigin * a11 + t.yOrigin * a12) + t.xOffset;\n\t\t\t\t\t\ty += t.yOrigin - (t.xOrigin * a21 + t.yOrigin * a22) + t.yOffset;\n\t\t\t\t\t}\n\t\t\t\t\tif (x < min && x > -min) {\n\t\t\t\t\t\tx = zero;\n\t\t\t\t\t}\n\t\t\t\t\tif (y < min && y > -min) {\n\t\t\t\t\t\ty = zero;\n\t\t\t\t\t}\n\t\t\t\t\tif (z < min && z > -min) {\n\t\t\t\t\t\tz = 0; //don't use string because we calculate perspective later and need the number.\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//optimized way of concatenating all the values into a string. If we do it all in one shot, it's slower because of the way browsers have to create temp strings and the way it affects memory. If we do it piece-by-piece with +=, it's a bit slower too. We found that doing it in these sized chunks works best overall:\n\t\t\t\ttransform = ((t.xPercent || t.yPercent) ? \"translate(\" + t.xPercent + \"%,\" + t.yPercent + \"%) matrix3d(\" : \"matrix3d(\");\n\t\t\t\ttransform += ((a11 < min && a11 > -min) ? zero : a11) + comma + ((a21 < min && a21 > -min) ? zero : a21) + comma + ((a31 < min && a31 > -min) ? zero : a31);\n\t\t\t\ttransform += comma + ((a41 < min && a41 > -min) ? zero : a41) + comma + ((a12 < min && a12 > -min) ? zero : a12) + comma + ((a22 < min && a22 > -min) ? zero : a22);\n\t\t\t\tif (rotationX || rotationY || sz !== 1) { //performance optimization (often there's no rotationX or rotationY, so we can skip these calculations)\n\t\t\t\t\ttransform += comma + ((a32 < min && a32 > -min) ? zero : a32) + comma + ((a42 < min && a42 > -min) ? zero : a42) + comma + ((a13 < min && a13 > -min) ? zero : a13);\n\t\t\t\t\ttransform += comma + ((a23 < min && a23 > -min) ? zero : a23) + comma + ((a33 < min && a33 > -min) ? zero : a33) + comma + ((a43 < min && a43 > -min) ? zero : a43) + comma;\n\t\t\t\t} else {\n\t\t\t\t\ttransform += \",0,0,0,0,1,0,\";\n\t\t\t\t}\n\t\t\t\ttransform += x + comma + y + comma + z + comma + (perspective ? (1 + (-z / perspective)) : 1) + \")\";\n\n\t\t\t\tstyle[_transformProp] = transform;\n\t\t\t};\n\n\t\tp = Transform.prototype;\n\t\tp.x = p.y = p.z = p.skewX = p.skewY = p.rotation = p.rotationX = p.rotationY = p.zOrigin = p.xPercent = p.yPercent = p.xOffset = p.yOffset = 0;\n\t\tp.scaleX = p.scaleY = p.scaleZ = 1;\n\n\t\t_registerComplexSpecialProp(\"transform,scale,scaleX,scaleY,scaleZ,x,y,z,rotation,rotationX,rotationY,rotationZ,skewX,skewY,shortRotation,shortRotationX,shortRotationY,shortRotationZ,transformOrigin,svgOrigin,transformPerspective,directionalRotation,parseTransform,force3D,skewType,xPercent,yPercent,smoothOrigin\", {parser:function(t, e, parsingProp, cssp, pt, plugin, vars) {\n\t\t\tif (cssp._lastParsedTransform === vars) { return pt; } //only need to parse the transform once, and only if the browser supports it.\n\t\t\tcssp._lastParsedTransform = vars;\n\t\t\tvar scaleFunc = (vars.scale && typeof(vars.scale) === \"function\") ? vars.scale : 0, //if there's a function-based \"scale\" value, swap in the resulting numeric value temporarily. Otherwise, if it's called for both scaleX and scaleY independently, they may not match (like if the function uses Math.random()).\n\t\t\t\tswapFunc;\n\t\t\tif (typeof(vars[parsingProp]) === \"function\") { //whatever property triggers the initial parsing might be a function-based value in which case it already got called in parse(), thus we don't want to call it again in here. The most efficient way to avoid this is to temporarily swap the value directly into the vars object, and then after we do all our parsing in this function, we'll swap it back again.\n\t\t\t\tswapFunc = vars[parsingProp];\n\t\t\t\tvars[parsingProp] = e;\n\t\t\t}\n\t\t\tif (scaleFunc) {\n\t\t\t\tvars.scale = scaleFunc(_index, t);\n\t\t\t}\n\t\t\tvar originalGSTransform = t._gsTransform,\n\t\t\t\tstyle = t.style,\n\t\t\t\tmin = 0.000001,\n\t\t\t\ti = _transformProps.length,\n\t\t\t\tv = vars,\n\t\t\t\tendRotations = {},\n\t\t\t\ttransformOriginString = \"transformOrigin\",\n\t\t\t\tm1 = _getTransform(t, _cs, true, v.parseTransform),\n\t\t\t\torig = v.transform && ((typeof(v.transform) === \"function\") ? v.transform(_index, _target) : v.transform),\n\t\t\t\tm2, copy, has3D, hasChange, dr, x, y, matrix, p;\n\t\t\tm1.skewType = v.skewType || m1.skewType || CSSPlugin.defaultSkewType;\n\t\t\tcssp._transform = m1;\n\t\t\tif (orig && typeof(orig) === \"string\" && _transformProp) { //for values like transform:\"rotate(60deg) scale(0.5, 0.8)\"\n\t\t\t\tcopy = _tempDiv.style; //don't use the original target because it might be SVG in which case some browsers don't report computed style correctly.\n\t\t\t\tcopy[_transformProp] = orig;\n\t\t\t\tcopy.display = \"block\"; //if display is \"none\", the browser often refuses to report the transform properties correctly.\n\t\t\t\tcopy.position = \"absolute\";\n\t\t\t\tif (orig.indexOf(\"%\") !== -1) { //%-based translations will fail unless we set the width/height to match the original target...\n\t\t\t\t\tcopy.width = _getStyle(t, \"width\");\n\t\t\t\t\tcopy.height = _getStyle(t, \"height\");\n\t\t\t\t}\n\t\t\t\t_doc.body.appendChild(_tempDiv);\n\t\t\t\tm2 = _getTransform(_tempDiv, null, false);\n\t\t\t\tif (m1.skewType === \"simple\") { //the default _getTransform() reports the skewX/scaleY as if skewType is \"compensated\", thus we need to adjust that here if skewType is \"simple\".\n\t\t\t\t\tm2.scaleY *= Math.cos(m2.skewX * _DEG2RAD);\n\t\t\t\t}\n\t\t\t\tif (m1.svg) { //if it's an SVG element, x/y part of the matrix will be affected by whatever we use as the origin and the offsets, so compensate here...\n\t\t\t\t\tx = m1.xOrigin;\n\t\t\t\t\ty = m1.yOrigin;\n\t\t\t\t\tm2.x -= m1.xOffset;\n\t\t\t\t\tm2.y -= m1.yOffset;\n\t\t\t\t\tif (v.transformOrigin || v.svgOrigin) { //if this tween is altering the origin, we must factor that in here. The actual work of recording the transformOrigin values and setting up the PropTween is done later (still inside this function) so we cannot leave the changes intact here - we only want to update the x/y accordingly.\n\t\t\t\t\t\torig = {};\n\t\t\t\t\t\t_parseSVGOrigin(t, _parsePosition(v.transformOrigin), orig, v.svgOrigin, v.smoothOrigin, true);\n\t\t\t\t\t\tx = orig.xOrigin;\n\t\t\t\t\t\ty = orig.yOrigin;\n\t\t\t\t\t\tm2.x -= orig.xOffset - m1.xOffset;\n\t\t\t\t\t\tm2.y -= orig.yOffset - m1.yOffset;\n\t\t\t\t\t}\n\t\t\t\t\tif (x || y) {\n\t\t\t\t\t\tmatrix = _getMatrix(_tempDiv, true);\n\t\t\t\t\t\tm2.x -= x - (x * matrix[0] + y * matrix[2]);\n\t\t\t\t\t\tm2.y -= y - (x * matrix[1] + y * matrix[3]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_doc.body.removeChild(_tempDiv);\n\t\t\t\tif (!m2.perspective) {\n\t\t\t\t\tm2.perspective = m1.perspective; //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.\n\t\t\t\t}\n\t\t\t\tif (v.xPercent != null) {\n\t\t\t\t\tm2.xPercent = _parseVal(v.xPercent, m1.xPercent);\n\t\t\t\t}\n\t\t\t\tif (v.yPercent != null) {\n\t\t\t\t\tm2.yPercent = _parseVal(v.yPercent, m1.yPercent);\n\t\t\t\t}\n\t\t\t} else if (typeof(v) === \"object\") { //for values like scaleX, scaleY, rotation, x, y, skewX, and skewY or transform:{...} (object)\n\t\t\t\tm2 = {scaleX:_parseVal((v.scaleX != null) ? v.scaleX : v.scale, m1.scaleX),\n\t\t\t\t\tscaleY:_parseVal((v.scaleY != null) ? v.scaleY : v.scale, m1.scaleY),\n\t\t\t\t\tscaleZ:_parseVal(v.scaleZ, m1.scaleZ),\n\t\t\t\t\tx:_parseVal(v.x, m1.x),\n\t\t\t\t\ty:_parseVal(v.y, m1.y),\n\t\t\t\t\tz:_parseVal(v.z, m1.z),\n\t\t\t\t\txPercent:_parseVal(v.xPercent, m1.xPercent),\n\t\t\t\t\tyPercent:_parseVal(v.yPercent, m1.yPercent),\n\t\t\t\t\tperspective:_parseVal(v.transformPerspective, m1.perspective)};\n\t\t\t\tdr = v.directionalRotation;\n\t\t\t\tif (dr != null) {\n\t\t\t\t\tif (typeof(dr) === \"object\") {\n\t\t\t\t\t\tfor (copy in dr) {\n\t\t\t\t\t\t\tv[copy] = dr[copy];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tv.rotation = dr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (typeof(v.x) === \"string\" && v.x.indexOf(\"%\") !== -1) {\n\t\t\t\t\tm2.x = 0;\n\t\t\t\t\tm2.xPercent = _parseVal(v.x, m1.xPercent);\n\t\t\t\t}\n\t\t\t\tif (typeof(v.y) === \"string\" && v.y.indexOf(\"%\") !== -1) {\n\t\t\t\t\tm2.y = 0;\n\t\t\t\t\tm2.yPercent = _parseVal(v.y, m1.yPercent);\n\t\t\t\t}\n\n\t\t\t\tm2.rotation = _parseAngle((\"rotation\" in v) ? v.rotation : (\"shortRotation\" in v) ? v.shortRotation + \"_short\" : (\"rotationZ\" in v) ? v.rotationZ : m1.rotation, m1.rotation, \"rotation\", endRotations);\n\t\t\t\tif (_supports3D) {\n\t\t\t\t\tm2.rotationX = _parseAngle((\"rotationX\" in v) ? v.rotationX : (\"shortRotationX\" in v) ? v.shortRotationX + \"_short\" : m1.rotationX || 0, m1.rotationX, \"rotationX\", endRotations);\n\t\t\t\t\tm2.rotationY = _parseAngle((\"rotationY\" in v) ? v.rotationY : (\"shortRotationY\" in v) ? v.shortRotationY + \"_short\" : m1.rotationY || 0, m1.rotationY, \"rotationY\", endRotations);\n\t\t\t\t}\n\t\t\t\tm2.skewX = _parseAngle(v.skewX, m1.skewX);\n\t\t\t\tm2.skewY = _parseAngle(v.skewY, m1.skewY);\n\t\t\t}\n\t\t\tif (_supports3D && v.force3D != null) {\n\t\t\t\tm1.force3D = v.force3D;\n\t\t\t\thasChange = true;\n\t\t\t}\n\n\t\t\thas3D = (m1.force3D || m1.z || m1.rotationX || m1.rotationY || m2.z || m2.rotationX || m2.rotationY || m2.perspective);\n\t\t\tif (!has3D && v.scale != null) {\n\t\t\t\tm2.scaleZ = 1; //no need to tween scaleZ.\n\t\t\t}\n\n\t\t\twhile (--i > -1) {\n\t\t\t\tp = _transformProps[i];\n\t\t\t\torig = m2[p] - m1[p];\n\t\t\t\tif (orig > min || orig < -min || v[p] != null || _forcePT[p] != null) {\n\t\t\t\t\thasChange = true;\n\t\t\t\t\tpt = new CSSPropTween(m1, p, m1[p], orig, pt);\n\t\t\t\t\tif (p in endRotations) {\n\t\t\t\t\t\tpt.e = endRotations[p]; //directional rotations typically have compensated values during the tween, but we need to make sure they end at exactly what the user requested\n\t\t\t\t\t}\n\t\t\t\t\tpt.xs0 = 0; //ensures the value stays numeric in setRatio()\n\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t\tcssp._overwriteProps.push(pt.n);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\torig = v.transformOrigin;\n\t\t\tif (m1.svg && (orig || v.svgOrigin)) {\n\t\t\t\tx = m1.xOffset; //when we change the origin, in order to prevent things from jumping we adjust the x/y so we must record those here so that we can create PropTweens for them and flip them at the same time as the origin\n\t\t\t\ty = m1.yOffset;\n\t\t\t\t_parseSVGOrigin(t, _parsePosition(orig), m2, v.svgOrigin, v.smoothOrigin);\n\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"xOrigin\", (originalGSTransform ? m1 : m2).xOrigin, m2.xOrigin, pt, transformOriginString); //note: if there wasn't a transformOrigin defined yet, just start with the destination one; it's wasteful otherwise, and it causes problems with fromTo() tweens. For example, TweenLite.to(\"#wheel\", 3, {rotation:180, transformOrigin:\"50% 50%\", delay:1}); TweenLite.fromTo(\"#wheel\", 3, {scale:0.5, transformOrigin:\"50% 50%\"}, {scale:1, delay:2}); would cause a jump when the from values revert at the beginning of the 2nd tween.\n\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"yOrigin\", (originalGSTransform ? m1 : m2).yOrigin, m2.yOrigin, pt, transformOriginString);\n\t\t\t\tif (x !== m1.xOffset || y !== m1.yOffset) {\n\t\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"xOffset\", (originalGSTransform ? x : m1.xOffset), m1.xOffset, pt, transformOriginString);\n\t\t\t\t\tpt = _addNonTweeningNumericPT(m1, \"yOffset\", (originalGSTransform ? y : m1.yOffset), m1.yOffset, pt, transformOriginString);\n\t\t\t\t}\n\t\t\t\torig = \"0px 0px\"; //certain browsers (like firefox) completely botch transform-origin, so we must remove it to prevent it from contaminating transforms. We manage it ourselves with xOrigin and yOrigin\n\t\t\t}\n\t\t\tif (orig || (_supports3D && has3D && m1.zOrigin)) { //if anything 3D is happening and there's a transformOrigin with a z component that's non-zero, we must ensure that the transformOrigin's z-component is set to 0 so that we can manually do those calculations to get around Safari bugs. Even if the user didn't specifically define a \"transformOrigin\" in this particular tween (maybe they did it via css directly).\n\t\t\t\tif (_transformProp) {\n\t\t\t\t\thasChange = true;\n\t\t\t\t\tp = _transformOriginProp;\n\t\t\t\t\torig = (orig || _getStyle(t, p, _cs, false, \"50% 50%\")) + \"\"; //cast as string to avoid errors\n\t\t\t\t\tpt = new CSSPropTween(style, p, 0, 0, pt, -1, transformOriginString);\n\t\t\t\t\tpt.b = style[p];\n\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t\tif (_supports3D) {\n\t\t\t\t\t\tcopy = m1.zOrigin;\n\t\t\t\t\t\torig = orig.split(\" \");\n\t\t\t\t\t\tm1.zOrigin = ((orig.length > 2 && !(copy !== 0 && orig[2] === \"0px\")) ? parseFloat(orig[2]) : copy) || 0; //Safari doesn't handle the z part of transformOrigin correctly, so we'll manually handle it in the _set3DTransformRatio() method.\n\t\t\t\t\t\tpt.xs0 = pt.e = orig[0] + \" \" + (orig[1] || \"50%\") + \" 0px\"; //we must define a z value of 0px specifically otherwise iOS 5 Safari will stick with the old one (if one was defined)!\n\t\t\t\t\t\tpt = new CSSPropTween(m1, \"zOrigin\", 0, 0, pt, -1, pt.n); //we must create a CSSPropTween for the _gsTransform.zOrigin so that it gets reset properly at the beginning if the tween runs backward (as opposed to just setting m1.zOrigin here)\n\t\t\t\t\t\tpt.b = copy;\n\t\t\t\t\t\tpt.xs0 = pt.e = m1.zOrigin;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.xs0 = pt.e = orig;\n\t\t\t\t\t}\n\n\t\t\t\t\t//for older versions of IE (6-8), we need to manually calculate things inside the setRatio() function. We record origin x and y (ox and oy) and whether or not the values are percentages (oxp and oyp).\n\t\t\t\t} else {\n\t\t\t\t\t_parsePosition(orig + \"\", m1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hasChange) {\n\t\t\t\tcssp._transformType = (!(m1.svg && _useSVGTransformAttr) && (has3D || this._transformType === 3)) ? 3 : 2; //quicker than calling cssp._enableTransforms();\n\t\t\t}\n\t\t\tif (swapFunc) {\n\t\t\t\tvars[parsingProp] = swapFunc;\n\t\t\t}\n\t\t\tif (scaleFunc) {\n\t\t\t\tvars.scale = scaleFunc;\n\t\t\t}\n\t\t\treturn pt;\n\t\t}, prefix:true});\n\n\t\t_registerComplexSpecialProp(\"boxShadow\", {defaultValue:\"0px 0px 0px 0px #999\", prefix:true, color:true, multi:true, keyword:\"inset\"});\n\n\t\t_registerComplexSpecialProp(\"borderRadius\", {defaultValue:\"0px\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\te = this.format(e);\n\t\t\tvar props = [\"borderTopLeftRadius\",\"borderTopRightRadius\",\"borderBottomRightRadius\",\"borderBottomLeftRadius\"],\n\t\t\t\tstyle = t.style,\n\t\t\t\tea1, i, es2, bs2, bs, es, bn, en, w, h, esfx, bsfx, rel, hn, vn, em;\n\t\t\tw = parseFloat(t.offsetWidth);\n\t\t\th = parseFloat(t.offsetHeight);\n\t\t\tea1 = e.split(\" \");\n\t\t\tfor (i = 0; i < props.length; i++) { //if we're dealing with percentages, we must convert things separately for the horizontal and vertical axis!\n\t\t\t\tif (this.p.indexOf(\"border\")) { //older browsers used a prefix\n\t\t\t\t\tprops[i] = _checkPropPrefix(props[i]);\n\t\t\t\t}\n\t\t\t\tbs = bs2 = _getStyle(t, props[i], _cs, false, \"0px\");\n\t\t\t\tif (bs.indexOf(\" \") !== -1) {\n\t\t\t\t\tbs2 = bs.split(\" \");\n\t\t\t\t\tbs = bs2[0];\n\t\t\t\t\tbs2 = bs2[1];\n\t\t\t\t}\n\t\t\t\tes = es2 = ea1[i];\n\t\t\t\tbn = parseFloat(bs);\n\t\t\t\tbsfx = bs.substr((bn + \"\").length);\n\t\t\t\trel = (es.charAt(1) === \"=\");\n\t\t\t\tif (rel) {\n\t\t\t\t\ten = parseInt(es.charAt(0)+\"1\", 10);\n\t\t\t\t\tes = es.substr(2);\n\t\t\t\t\ten *= parseFloat(es);\n\t\t\t\t\tesfx = es.substr((en + \"\").length - (en < 0 ? 1 : 0)) || \"\";\n\t\t\t\t} else {\n\t\t\t\t\ten = parseFloat(es);\n\t\t\t\t\tesfx = es.substr((en + \"\").length);\n\t\t\t\t}\n\t\t\t\tif (esfx === \"\") {\n\t\t\t\t\tesfx = _suffixMap[p] || bsfx;\n\t\t\t\t}\n\t\t\t\tif (esfx !== bsfx) {\n\t\t\t\t\thn = _convertToPixels(t, \"borderLeft\", bn, bsfx); //horizontal number (we use a bogus \"borderLeft\" property just because the _convertToPixels() method searches for the keywords \"Left\", \"Right\", \"Top\", and \"Bottom\" to determine of it's a horizontal or vertical property, and we need \"border\" in the name so that it knows it should measure relative to the element itself, not its parent.\n\t\t\t\t\tvn = _convertToPixels(t, \"borderTop\", bn, bsfx); //vertical number\n\t\t\t\t\tif (esfx === \"%\") {\n\t\t\t\t\t\tbs = (hn / w * 100) + \"%\";\n\t\t\t\t\t\tbs2 = (vn / h * 100) + \"%\";\n\t\t\t\t\t} else if (esfx === \"em\") {\n\t\t\t\t\t\tem = _convertToPixels(t, \"borderLeft\", 1, \"em\");\n\t\t\t\t\t\tbs = (hn / em) + \"em\";\n\t\t\t\t\t\tbs2 = (vn / em) + \"em\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbs = hn + \"px\";\n\t\t\t\t\t\tbs2 = vn + \"px\";\n\t\t\t\t\t}\n\t\t\t\t\tif (rel) {\n\t\t\t\t\t\tes = (parseFloat(bs) + en) + esfx;\n\t\t\t\t\t\tes2 = (parseFloat(bs2) + en) + esfx;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = _parseComplex(style, props[i], bs + \" \" + bs2, es + \" \" + es2, false, \"0px\", pt);\n\t\t\t}\n\t\t\treturn pt;\n\t\t}, prefix:true, formatter:_getFormatter(\"0px 0px 0px 0px\", false, true)});\n\t\t_registerComplexSpecialProp(\"borderBottomLeftRadius,borderBottomRightRadius,borderTopLeftRadius,borderTopRightRadius\", {defaultValue:\"0px\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\treturn _parseComplex(t.style, p, this.format(_getStyle(t, p, _cs, false, \"0px 0px\")), this.format(e), false, \"0px\", pt);\n\t\t}, prefix:true, formatter:_getFormatter(\"0px 0px\", false, true)});\n\t\t_registerComplexSpecialProp(\"backgroundPosition\", {defaultValue:\"0 0\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\tvar bp = \"background-position\",\n\t\t\t\tcs = (_cs || _getComputedStyle(t, null)),\n\t\t\t\tbs = this.format( ((cs) ? _ieVers ? cs.getPropertyValue(bp + \"-x\") + \" \" + cs.getPropertyValue(bp + \"-y\") : cs.getPropertyValue(bp) : t.currentStyle.backgroundPositionX + \" \" + t.currentStyle.backgroundPositionY) || \"0 0\"), //Internet Explorer doesn't report background-position correctly - we must query background-position-x and background-position-y and combine them (even in IE10). Before IE9, we must do the same with the currentStyle object and use camelCase\n\t\t\t\tes = this.format(e),\n\t\t\t\tba, ea, i, pct, overlap, src;\n\t\t\tif ((bs.indexOf(\"%\") !== -1) !== (es.indexOf(\"%\") !== -1) && es.split(\",\").length < 2) {\n\t\t\t\tsrc = _getStyle(t, \"backgroundImage\").replace(_urlExp, \"\");\n\t\t\t\tif (src && src !== \"none\") {\n\t\t\t\t\tba = bs.split(\" \");\n\t\t\t\t\tea = es.split(\" \");\n\t\t\t\t\t_tempImg.setAttribute(\"src\", src); //set the temp IMG's src to the background-image so that we can measure its width/height\n\t\t\t\t\ti = 2;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tbs = ba[i];\n\t\t\t\t\t\tpct = (bs.indexOf(\"%\") !== -1);\n\t\t\t\t\t\tif (pct !== (ea[i].indexOf(\"%\") !== -1)) {\n\t\t\t\t\t\t\toverlap = (i === 0) ? t.offsetWidth - _tempImg.width : t.offsetHeight - _tempImg.height;\n\t\t\t\t\t\t\tba[i] = pct ? (parseFloat(bs) / 100 * overlap) + \"px\" : (parseFloat(bs) / overlap * 100) + \"%\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbs = ba.join(\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.parseComplex(t.style, bs, es, pt, plugin);\n\t\t}, formatter:_parsePosition});\n\t\t_registerComplexSpecialProp(\"backgroundSize\", {defaultValue:\"0 0\", formatter:function(v) {\n\t\t\tv += \"\"; //ensure it's a string\n\t\t\treturn (v.substr(0,2) === \"co\") ? v : _parsePosition(v.indexOf(\" \") === -1 ? v + \" \" + v : v); //if set to something like \"100% 100%\", Safari typically reports the computed style as just \"100%\" (no 2nd value), but we should ensure that there are two values, so copy the first one. Otherwise, it'd be interpreted as \"100% 0\" (wrong). Also remember that it could be \"cover\" or \"contain\" which we can't tween but should be able to set.\n\t\t}});\n\t\t_registerComplexSpecialProp(\"perspective\", {defaultValue:\"0px\", prefix:true});\n\t\t_registerComplexSpecialProp(\"perspectiveOrigin\", {defaultValue:\"50% 50%\", prefix:true});\n\t\t_registerComplexSpecialProp(\"transformStyle\", {prefix:true});\n\t\t_registerComplexSpecialProp(\"backfaceVisibility\", {prefix:true});\n\t\t_registerComplexSpecialProp(\"userSelect\", {prefix:true});\n\t\t_registerComplexSpecialProp(\"margin\", {parser:_getEdgeParser(\"marginTop,marginRight,marginBottom,marginLeft\")});\n\t\t_registerComplexSpecialProp(\"padding\", {parser:_getEdgeParser(\"paddingTop,paddingRight,paddingBottom,paddingLeft\")});\n\t\t_registerComplexSpecialProp(\"clip\", {defaultValue:\"rect(0px,0px,0px,0px)\", parser:function(t, e, p, cssp, pt, plugin){\n\t\t\tvar b, cs, delim;\n\t\t\tif (_ieVers < 9) { //IE8 and earlier don't report a \"clip\" value in the currentStyle - instead, the values are split apart into clipTop, clipRight, clipBottom, and clipLeft. Also, in IE7 and earlier, the values inside rect() are space-delimited, not comma-delimited.\n\t\t\t\tcs = t.currentStyle;\n\t\t\t\tdelim = _ieVers < 8 ? \" \" : \",\";\n\t\t\t\tb = \"rect(\" + cs.clipTop + delim + cs.clipRight + delim + cs.clipBottom + delim + cs.clipLeft + \")\";\n\t\t\t\te = this.format(e).split(\",\").join(delim);\n\t\t\t} else {\n\t\t\t\tb = this.format(_getStyle(t, this.p, _cs, false, this.dflt));\n\t\t\t\te = this.format(e);\n\t\t\t}\n\t\t\treturn this.parseComplex(t.style, b, e, pt, plugin);\n\t\t}});\n\t\t_registerComplexSpecialProp(\"textShadow\", {defaultValue:\"0px 0px 0px #999\", color:true, multi:true});\n\t\t_registerComplexSpecialProp(\"autoRound,strictUnits\", {parser:function(t, e, p, cssp, pt) {return pt;}}); //just so that we can ignore these properties (not tween them)\n\t\t_registerComplexSpecialProp(\"border\", {defaultValue:\"0px solid #000\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\tvar bw = _getStyle(t, \"borderTopWidth\", _cs, false, \"0px\"),\n\t\t\t\tend = this.format(e).split(\" \"),\n\t\t\t\tesfx = end[0].replace(_suffixExp, \"\");\n\t\t\tif (esfx !== \"px\") { //if we're animating to a non-px value, we need to convert the beginning width to that unit.\n\t\t\t\tbw = (parseFloat(bw) / _convertToPixels(t, \"borderTopWidth\", 1, esfx)) + esfx;\n\t\t\t}\n\t\t\treturn this.parseComplex(t.style, this.format(bw + \" \" + _getStyle(t, \"borderTopStyle\", _cs, false, \"solid\") + \" \" + _getStyle(t, \"borderTopColor\", _cs, false, \"#000\")), end.join(\" \"), pt, plugin);\n\t\t\t}, color:true, formatter:function(v) {\n\t\t\t\tvar a = v.split(\" \");\n\t\t\t\treturn a[0] + \" \" + (a[1] || \"solid\") + \" \" + (v.match(_colorExp) || [\"#000\"])[0];\n\t\t\t}});\n\t\t_registerComplexSpecialProp(\"borderWidth\", {parser:_getEdgeParser(\"borderTopWidth,borderRightWidth,borderBottomWidth,borderLeftWidth\")}); //Firefox doesn't pick up on borderWidth set in style sheets (only inline).\n\t\t_registerComplexSpecialProp(\"float,cssFloat,styleFloat\", {parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\tvar s = t.style,\n\t\t\t\tprop = (\"cssFloat\" in s) ? \"cssFloat\" : \"styleFloat\";\n\t\t\treturn new CSSPropTween(s, prop, 0, 0, pt, -1, p, false, 0, s[prop], e);\n\t\t}});\n\n\t\t//opacity-related\n\t\tvar _setIEOpacityRatio = function(v) {\n\t\t\t\tvar t = this.t, //refers to the element's style property\n\t\t\t\t\tfilters = t.filter || _getStyle(this.data, \"filter\") || \"\",\n\t\t\t\t\tval = (this.s + this.c * v) | 0,\n\t\t\t\t\tskip;\n\t\t\t\tif (val === 100) { //for older versions of IE that need to use a filter to apply opacity, we should remove the filter if opacity hits 1 in order to improve performance, but make sure there isn't a transform (matrix) or gradient in the filters.\n\t\t\t\t\tif (filters.indexOf(\"atrix(\") === -1 && filters.indexOf(\"radient(\") === -1 && filters.indexOf(\"oader(\") === -1) {\n\t\t\t\t\t\tt.removeAttribute(\"filter\");\n\t\t\t\t\t\tskip = (!_getStyle(this.data, \"filter\")); //if a class is applied that has an alpha filter, it will take effect (we don't want that), so re-apply our alpha filter in that case. We must first remove it and then check.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tt.filter = filters.replace(_alphaFilterExp, \"\");\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!skip) {\n\t\t\t\t\tif (this.xn1) {\n\t\t\t\t\t\tt.filter = filters = filters || (\"alpha(opacity=\" + val + \")\"); //works around bug in IE7/8 that prevents changes to \"visibility\" from being applied properly if the filter is changed to a different alpha on the same frame.\n\t\t\t\t\t}\n\t\t\t\t\tif (filters.indexOf(\"pacity\") === -1) { //only used if browser doesn't support the standard opacity style property (IE 7 and 8). We omit the \"O\" to avoid case-sensitivity issues\n\t\t\t\t\t\tif (val !== 0 || !this.xn1) { //bugs in IE7/8 won't render the filter properly if opacity is ADDED on the same frame/render as \"visibility\" changes (this.xn1 is 1 if this tween is an \"autoAlpha\" tween)\n\t\t\t\t\t\t\tt.filter = filters + \" alpha(opacity=\" + val + \")\"; //we round the value because otherwise, bugs in IE7/8 can prevent \"visibility\" changes from being applied properly.\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tt.filter = filters.replace(_opacityExp, \"opacity=\" + val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t_registerComplexSpecialProp(\"opacity,alpha,autoAlpha\", {defaultValue:\"1\", parser:function(t, e, p, cssp, pt, plugin) {\n\t\t\tvar b = parseFloat(_getStyle(t, \"opacity\", _cs, false, \"1\")),\n\t\t\t\tstyle = t.style,\n\t\t\t\tisAutoAlpha = (p === \"autoAlpha\");\n\t\t\tif (typeof(e) === \"string\" && e.charAt(1) === \"=\") {\n\t\t\t\te = ((e.charAt(0) === \"-\") ? -1 : 1) * parseFloat(e.substr(2)) + b;\n\t\t\t}\n\t\t\tif (isAutoAlpha && b === 1 && _getStyle(t, \"visibility\", _cs) === \"hidden\" && e !== 0) { //if visibility is initially set to \"hidden\", we should interpret that as intent to make opacity 0 (a convenience)\n\t\t\t\tb = 0;\n\t\t\t}\n\t\t\tif (_supportsOpacity) {\n\t\t\t\tpt = new CSSPropTween(style, \"opacity\", b, e - b, pt);\n\t\t\t} else {\n\t\t\t\tpt = new CSSPropTween(style, \"opacity\", b * 100, (e - b) * 100, pt);\n\t\t\t\tpt.xn1 = isAutoAlpha ? 1 : 0; //we need to record whether or not this is an autoAlpha so that in the setRatio(), we know to duplicate the setting of the alpha in order to work around a bug in IE7 and IE8 that prevents changes to \"visibility\" from taking effect if the filter is changed to a different alpha(opacity) at the same time. Setting it to the SAME value first, then the new value works around the IE7/8 bug.\n\t\t\t\tstyle.zoom = 1; //helps correct an IE issue.\n\t\t\t\tpt.type = 2;\n\t\t\t\tpt.b = \"alpha(opacity=\" + pt.s + \")\";\n\t\t\t\tpt.e = \"alpha(opacity=\" + (pt.s + pt.c) + \")\";\n\t\t\t\tpt.data = t;\n\t\t\t\tpt.plugin = plugin;\n\t\t\t\tpt.setRatio = _setIEOpacityRatio;\n\t\t\t}\n\t\t\tif (isAutoAlpha) { //we have to create the \"visibility\" PropTween after the opacity one in the linked list so that they run in the order that works properly in IE8 and earlier\n\t\t\t\tpt = new CSSPropTween(style, \"visibility\", 0, 0, pt, -1, null, false, 0, ((b !== 0) ? \"inherit\" : \"hidden\"), ((e === 0) ? \"hidden\" : \"inherit\"));\n\t\t\t\tpt.xs0 = \"inherit\";\n\t\t\t\tcssp._overwriteProps.push(pt.n);\n\t\t\t\tcssp._overwriteProps.push(p);\n\t\t\t}\n\t\t\treturn pt;\n\t\t}});\n\n\n\t\tvar _removeProp = function(s, p) {\n\t\t\t\tif (p) {\n\t\t\t\t\tif (s.removeProperty) {\n\t\t\t\t\t\tif (p.substr(0,2) === \"ms\" || p.substr(0,6) === \"webkit\") { //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be \"ms-transform\" instead of \"-ms-transform\" for IE9, for example)\n\t\t\t\t\t\t\tp = \"-\" + p;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ts.removeProperty(p.replace(_capsExp, \"-$1\").toLowerCase());\n\t\t\t\t\t} else { //note: old versions of IE use \"removeAttribute()\" instead of \"removeProperty()\"\n\t\t\t\t\t\ts.removeAttribute(p);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t_setClassNameRatio = function(v) {\n\t\t\t\tthis.t._gsClassPT = this;\n\t\t\t\tif (v === 1 || v === 0) {\n\t\t\t\t\tthis.t.setAttribute(\"class\", (v === 0) ? this.b : this.e);\n\t\t\t\t\tvar mpt = this.data, //first MiniPropTween\n\t\t\t\t\t\ts = this.t.style;\n\t\t\t\t\twhile (mpt) {\n\t\t\t\t\t\tif (!mpt.v) {\n\t\t\t\t\t\t\t_removeProp(s, mpt.p);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ts[mpt.p] = mpt.v;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t\t}\n\t\t\t\t\tif (v === 1 && this.t._gsClassPT === this) {\n\t\t\t\t\t\tthis.t._gsClassPT = null;\n\t\t\t\t\t}\n\t\t\t\t} else if (this.t.getAttribute(\"class\") !== this.e) {\n\t\t\t\t\tthis.t.setAttribute(\"class\", this.e);\n\t\t\t\t}\n\t\t\t};\n\t\t_registerComplexSpecialProp(\"className\", {parser:function(t, e, p, cssp, pt, plugin, vars) {\n\t\t\tvar b = t.getAttribute(\"class\") || \"\", //don't use t.className because it doesn't work consistently on SVG elements; getAttribute(\"class\") and setAttribute(\"class\", value\") is more reliable.\n\t\t\t\tcssText = t.style.cssText,\n\t\t\t\tdifData, bs, cnpt, cnptLookup, mpt;\n\t\t\tpt = cssp._classNamePT = new CSSPropTween(t, p, 0, 0, pt, 2);\n\t\t\tpt.setRatio = _setClassNameRatio;\n\t\t\tpt.pr = -11;\n\t\t\t_hasPriority = true;\n\t\t\tpt.b = b;\n\t\t\tbs = _getAllStyles(t, _cs);\n\t\t\t//if there's a className tween already operating on the target, force it to its end so that the necessary inline styles are removed and the class name is applied before we determine the end state (we don't want inline styles interfering that were there just for class-specific values)\n\t\t\tcnpt = t._gsClassPT;\n\t\t\tif (cnpt) {\n\t\t\t\tcnptLookup = {};\n\t\t\t\tmpt = cnpt.data; //first MiniPropTween which stores the inline styles - we need to force these so that the inline styles don't contaminate things. Otherwise, there's a small chance that a tween could start and the inline values match the destination values and they never get cleaned.\n\t\t\t\twhile (mpt) {\n\t\t\t\t\tcnptLookup[mpt.p] = 1;\n\t\t\t\t\tmpt = mpt._next;\n\t\t\t\t}\n\t\t\t\tcnpt.setRatio(1);\n\t\t\t}\n\t\t\tt._gsClassPT = pt;\n\t\t\tpt.e = (e.charAt(1) !== \"=\") ? e : b.replace(new RegExp(\"(?:\\\\s|^)\" + e.substr(2) + \"(?![\\\\w-])\"), \"\") + ((e.charAt(0) === \"+\") ? \" \" + e.substr(2) : \"\");\n\t\t\tt.setAttribute(\"class\", pt.e);\n\t\t\tdifData = _cssDif(t, bs, _getAllStyles(t), vars, cnptLookup);\n\t\t\tt.setAttribute(\"class\", b);\n\t\t\tpt.data = difData.firstMPT;\n\t\t\tt.style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).\n\t\t\tpt = pt.xfirst = cssp.parse(t, difData.difs, pt, plugin); //we record the CSSPropTween as the xfirst so that we can handle overwriting propertly (if \"className\" gets overwritten, we must kill all the properties associated with the className part of the tween, so we can loop through from xfirst to the pt itself)\n\t\t\treturn pt;\n\t\t}});\n\n\n\t\tvar _setClearPropsRatio = function(v) {\n\t\t\tif (v === 1 || v === 0) if (this.data._totalTime === this.data._totalDuration && this.data.data !== \"isFromStart\") { //this.data refers to the tween. Only clear at the END of the tween (remember, from() tweens make the ratio go from 1 to 0, so we can't just check that and if the tween is the zero-duration one that's created internally to render the starting values in a from() tween, ignore that because otherwise, for example, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in).\n\t\t\t\tvar s = this.t.style,\n\t\t\t\t\ttransformParse = _specialProps.transform.parse,\n\t\t\t\t\ta, p, i, clearTransform, transform;\n\t\t\t\tif (this.e === \"all\") {\n\t\t\t\t\ts.cssText = \"\";\n\t\t\t\t\tclearTransform = true;\n\t\t\t\t} else {\n\t\t\t\t\ta = this.e.split(\" \").join(\"\").split(\",\");\n\t\t\t\t\ti = a.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tp = a[i];\n\t\t\t\t\t\tif (_specialProps[p]) {\n\t\t\t\t\t\t\tif (_specialProps[p].parse === transformParse) {\n\t\t\t\t\t\t\t\tclearTransform = true;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tp = (p === \"transformOrigin\") ? _transformOriginProp : _specialProps[p].p; //ensures that special properties use the proper browser-specific property name, like \"scaleX\" might be \"-webkit-transform\" or \"boxShadow\" might be \"-moz-box-shadow\"\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_removeProp(s, p);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (clearTransform) {\n\t\t\t\t\t_removeProp(s, _transformProp);\n\t\t\t\t\ttransform = this.t._gsTransform;\n\t\t\t\t\tif (transform) {\n\t\t\t\t\t\tif (transform.svg) {\n\t\t\t\t\t\t\tthis.t.removeAttribute(\"data-svg-origin\");\n\t\t\t\t\t\t\tthis.t.removeAttribute(\"transform\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdelete this.t._gsTransform;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t};\n\t\t_registerComplexSpecialProp(\"clearProps\", {parser:function(t, e, p, cssp, pt) {\n\t\t\tpt = new CSSPropTween(t, p, 0, 0, pt, 2);\n\t\t\tpt.setRatio = _setClearPropsRatio;\n\t\t\tpt.e = e;\n\t\t\tpt.pr = -10;\n\t\t\tpt.data = cssp._tween;\n\t\t\t_hasPriority = true;\n\t\t\treturn pt;\n\t\t}});\n\n\t\tp = \"bezier,throwProps,physicsProps,physics2D\".split(\",\");\n\t\ti = p.length;\n\t\twhile (i--) {\n\t\t\t_registerPluginProp(p[i]);\n\t\t}\n\n\n\n\n\n\n\n\n\t\tp = CSSPlugin.prototype;\n\t\tp._firstPT = p._lastParsedTransform = p._transform = null;\n\n\t\t//gets called when the tween renders for the first time. This kicks everything off, recording start/end values, etc.\n\t\tp._onInitTween = function(target, vars, tween, index) {\n\t\t\tif (!target.nodeType) { //css is only for dom elements\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis._target = _target = target;\n\t\t\tthis._tween = tween;\n\t\t\tthis._vars = vars;\n\t\t\t_index = index;\n\t\t\t_autoRound = vars.autoRound;\n\t\t\t_hasPriority = false;\n\t\t\t_suffixMap = vars.suffixMap || CSSPlugin.suffixMap;\n\t\t\t_cs = _getComputedStyle(target, \"\");\n\t\t\t_overwriteProps = this._overwriteProps;\n\t\t\tvar style = target.style,\n\t\t\t\tv, pt, pt2, first, last, next, zIndex, tpt, threeD;\n\t\t\tif (_reqSafariFix) if (style.zIndex === \"\") {\n\t\t\t\tv = _getStyle(target, \"zIndex\", _cs);\n\t\t\t\tif (v === \"auto\" || v === \"\") {\n\t\t\t\t\t//corrects a bug in [non-Android] Safari that prevents it from repainting elements in their new positions if they don't have a zIndex set. We also can't just apply this inside _parseTransform() because anything that's moved in any way (like using \"left\" or \"top\" instead of transforms like \"x\" and \"y\") can be affected, so it is best to ensure that anything that's tweening has a z-index. Setting \"WebkitPerspective\" to a non-zero value worked too except that on iOS Safari things would flicker randomly. Plus zIndex is less memory-intensive.\n\t\t\t\t\tthis._addLazySet(style, \"zIndex\", 0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof(vars) === \"string\") {\n\t\t\t\tfirst = style.cssText;\n\t\t\t\tv = _getAllStyles(target, _cs);\n\t\t\t\tstyle.cssText = first + \";\" + vars;\n\t\t\t\tv = _cssDif(target, v, _getAllStyles(target)).difs;\n\t\t\t\tif (!_supportsOpacity && _opacityValExp.test(vars)) {\n\t\t\t\t\tv.opacity = parseFloat( RegExp.$1 );\n\t\t\t\t}\n\t\t\t\tvars = v;\n\t\t\t\tstyle.cssText = first;\n\t\t\t}\n\n\t\t\tif (vars.className) { //className tweens will combine any differences they find in the css with the vars that are passed in, so {className:\"myClass\", scale:0.5, left:20} would work.\n\t\t\t\tthis._firstPT = pt = _specialProps.className.parse(target, vars.className, \"className\", this, null, null, vars);\n\t\t\t} else {\n\t\t\t\tthis._firstPT = pt = this.parse(target, vars, null);\n\t\t\t}\n\n\t\t\tif (this._transformType) {\n\t\t\t\tthreeD = (this._transformType === 3);\n\t\t\t\tif (!_transformProp) {\n\t\t\t\t\tstyle.zoom = 1; //helps correct an IE issue.\n\t\t\t\t} else if (_isSafari) {\n\t\t\t\t\t_reqSafariFix = true;\n\t\t\t\t\t//if zIndex isn't set, iOS Safari doesn't repaint things correctly sometimes (seemingly at random).\n\t\t\t\t\tif (style.zIndex === \"\") {\n\t\t\t\t\t\tzIndex = _getStyle(target, \"zIndex\", _cs);\n\t\t\t\t\t\tif (zIndex === \"auto\" || zIndex === \"\") {\n\t\t\t\t\t\t\tthis._addLazySet(style, \"zIndex\", 0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//Setting WebkitBackfaceVisibility corrects 3 bugs:\n\t\t\t\t\t// 1) [non-Android] Safari skips rendering changes to \"top\" and \"left\" that are made on the same frame/render as a transform update.\n\t\t\t\t\t// 2) iOS Safari sometimes neglects to repaint elements in their new positions. Setting \"WebkitPerspective\" to a non-zero value worked too except that on iOS Safari things would flicker randomly.\n\t\t\t\t\t// 3) Safari sometimes displayed odd artifacts when tweening the transform (or WebkitTransform) property, like ghosts of the edges of the element remained. Definitely a browser bug.\n\t\t\t\t\t//Note: we allow the user to override the auto-setting by defining WebkitBackfaceVisibility in the vars of the tween.\n\t\t\t\t\tif (_isSafariLT6) {\n\t\t\t\t\t\tthis._addLazySet(style, \"WebkitBackfaceVisibility\", this._vars.WebkitBackfaceVisibility || (threeD ? \"visible\" : \"hidden\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt2 = pt;\n\t\t\t\twhile (pt2 && pt2._next) {\n\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t}\n\t\t\t\ttpt = new CSSPropTween(target, \"transform\", 0, 0, null, 2);\n\t\t\t\tthis._linkCSSP(tpt, null, pt2);\n\t\t\t\ttpt.setRatio = _transformProp ? _setTransformRatio : _setIETransformRatio;\n\t\t\t\ttpt.data = this._transform || _getTransform(target, _cs, true);\n\t\t\t\ttpt.tween = tween;\n\t\t\t\ttpt.pr = -1; //ensures that the transforms get applied after the components are updated.\n\t\t\t\t_overwriteProps.pop(); //we don't want to force the overwrite of all \"transform\" tweens of the target - we only care about individual transform properties like scaleX, rotation, etc. The CSSPropTween constructor automatically adds the property to _overwriteProps which is why we need to pop() here.\n\t\t\t}\n\n\t\t\tif (_hasPriority) {\n\t\t\t\t//reorders the linked list in order of pr (priority)\n\t\t\t\twhile (pt) {\n\t\t\t\t\tnext = pt._next;\n\t\t\t\t\tpt2 = first;\n\t\t\t\t\twhile (pt2 && pt2.pr > pt.pr) {\n\t\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._prev = pt2 ? pt2._prev : last)) {\n\t\t\t\t\t\tpt._prev._next = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfirst = pt;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._next = pt2)) {\n\t\t\t\t\t\tpt2._prev = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlast = pt;\n\t\t\t\t\t}\n\t\t\t\t\tpt = next;\n\t\t\t\t}\n\t\t\t\tthis._firstPT = first;\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\n\t\tp.parse = function(target, vars, pt, plugin) {\n\t\t\tvar style = target.style,\n\t\t\t\tp, sp, bn, en, bs, es, bsfx, esfx, isStr, rel;\n\t\t\tfor (p in vars) {\n\t\t\t\tes = vars[p]; //ending value string\n\t\t\t\tif (typeof(es) === \"function\") {\n\t\t\t\t\tes = es(_index, _target);\n\t\t\t\t}\n\t\t\t\tsp = _specialProps[p]; //SpecialProp lookup.\n\t\t\t\tif (sp) {\n\t\t\t\t\tpt = sp.parse(target, es, p, this, pt, plugin, vars);\n\t\t\t\t} else if (p.substr(0,2) === \"--\") { //for tweening CSS variables (which always start with \"--\"). To maximize performance and simplicity, we bypass CSSPlugin altogether and just add a normal property tween to the tween instance itself.\n\t\t\t\t\tthis._tween._propLookup[p] = this._addTween.call(this._tween, target.style, \"setProperty\", _getComputedStyle(target).getPropertyValue(p) + \"\", es + \"\", p, false, p);\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tbs = _getStyle(target, p, _cs) + \"\";\n\t\t\t\t\tisStr = (typeof(es) === \"string\");\n\t\t\t\t\tif (p === \"color\" || p === \"fill\" || p === \"stroke\" || p.indexOf(\"Color\") !== -1 || (isStr && _rgbhslExp.test(es))) { //Opera uses background: to define color sometimes in addition to backgroundColor:\n\t\t\t\t\t\tif (!isStr) {\n\t\t\t\t\t\t\tes = _parseColor(es);\n\t\t\t\t\t\t\tes = ((es.length > 3) ? \"rgba(\" : \"rgb(\") + es.join(\",\") + \")\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpt = _parseComplex(style, p, bs, es, true, \"transparent\", pt, 0, plugin);\n\n\t\t\t\t\t} else if (isStr && _complexExp.test(es)) {\n\t\t\t\t\t\tpt = _parseComplex(style, p, bs, es, true, null, pt, 0, plugin);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbn = parseFloat(bs);\n\t\t\t\t\t\tbsfx = (bn || bn === 0) ? bs.substr((bn + \"\").length) : \"\"; //remember, bs could be non-numeric like \"normal\" for fontWeight, so we should default to a blank suffix in that case.\n\n\t\t\t\t\t\tif (bs === \"\" || bs === \"auto\") {\n\t\t\t\t\t\t\tif (p === \"width\" || p === \"height\") {\n\t\t\t\t\t\t\t\tbn = _getDimension(target, p, _cs);\n\t\t\t\t\t\t\t\tbsfx = \"px\";\n\t\t\t\t\t\t\t} else if (p === \"left\" || p === \"top\") {\n\t\t\t\t\t\t\t\tbn = _calculateOffset(target, p, _cs);\n\t\t\t\t\t\t\t\tbsfx = \"px\";\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbn = (p !== \"opacity\") ? 0 : 1;\n\t\t\t\t\t\t\t\tbsfx = \"\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trel = (isStr && es.charAt(1) === \"=\");\n\t\t\t\t\t\tif (rel) {\n\t\t\t\t\t\t\ten = parseInt(es.charAt(0) + \"1\", 10);\n\t\t\t\t\t\t\tes = es.substr(2);\n\t\t\t\t\t\t\ten *= parseFloat(es);\n\t\t\t\t\t\t\tesfx = es.replace(_suffixExp, \"\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ten = parseFloat(es);\n\t\t\t\t\t\t\tesfx = isStr ? es.replace(_suffixExp, \"\") : \"\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (esfx === \"\") {\n\t\t\t\t\t\t\tesfx = (p in _suffixMap) ? _suffixMap[p] : bsfx; //populate the end suffix, prioritizing the map, then if none is found, use the beginning suffix.\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tes = (en || en === 0) ? (rel ? en + bn : en) + esfx : vars[p]; //ensures that any += or -= prefixes are taken care of. Record the end value before normalizing the suffix because we always want to end the tween on exactly what they intended even if it doesn't match the beginning value's suffix.\n\t\t\t\t\t\t//if the beginning/ending suffixes don't match, normalize them...\n\t\t\t\t\t\tif (bsfx !== esfx) if (esfx !== \"\" || p === \"lineHeight\") if (en || en === 0) if (bn) { //note: if the beginning value (bn) is 0, we don't need to convert units!\n\t\t\t\t\t\t\tbn = _convertToPixels(target, p, bn, bsfx);\n\t\t\t\t\t\t\tif (esfx === \"%\") {\n\t\t\t\t\t\t\t\tbn /= _convertToPixels(target, p, 100, \"%\") / 100;\n\t\t\t\t\t\t\t\tif (vars.strictUnits !== true) { //some browsers report only \"px\" values instead of allowing \"%\" with getComputedStyle(), so we assume that if we're tweening to a %, we should start there too unless strictUnits:true is defined. This approach is particularly useful for responsive designs that use from() tweens.\n\t\t\t\t\t\t\t\t\tbs = bn + \"%\";\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else if (esfx === \"em\" || esfx === \"rem\" || esfx === \"vw\" || esfx === \"vh\") {\n\t\t\t\t\t\t\t\tbn /= _convertToPixels(target, p, 1, esfx);\n\n\t\t\t\t\t\t\t//otherwise convert to pixels.\n\t\t\t\t\t\t\t} else if (esfx !== \"px\") {\n\t\t\t\t\t\t\t\ten = _convertToPixels(target, p, en, esfx);\n\t\t\t\t\t\t\t\tesfx = \"px\"; //we don't use bsfx after this, so we don't need to set it to px too.\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (rel) if (en || en === 0) {\n\t\t\t\t\t\t\t\tes = (en + bn) + esfx; //the changes we made affect relative calculations, so adjust the end value here.\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (rel) {\n\t\t\t\t\t\t\ten += bn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ((bn || bn === 0) && (en || en === 0)) { //faster than isNaN(). Also, previously we required en !== bn but that doesn't really gain much performance and it prevents _parseToProxy() from working properly if beginning and ending values match but need to get tweened by an external plugin anyway. For example, a bezier tween where the target starts at left:0 and has these points: [{left:50},{left:0}] wouldn't work properly because when parsing the last point, it'd match the first (current) one and a non-tweening CSSPropTween would be recorded when we actually need a normal tween (type:0) so that things get updated during the tween properly.\n\t\t\t\t\t\t\tpt = new CSSPropTween(style, p, bn, en - bn, pt, 0, p, (_autoRound !== false && (esfx === \"px\" || p === \"zIndex\")), 0, bs, es);\n\t\t\t\t\t\t\tpt.xs0 = esfx;\n\t\t\t\t\t\t\t//DEBUG: _log(\"tween \"+p+\" from \"+pt.b+\" (\"+bn+esfx+\") to \"+pt.e+\" with suffix: \"+pt.xs0);\n\t\t\t\t\t\t} else if (style[p] === undefined || !es && (es + \"\" === \"NaN\" || es == null)) {\n\t\t\t\t\t\t\t_log(\"invalid \" + p + \" tween value: \" + vars[p]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpt = new CSSPropTween(style, p, en || bn || 0, 0, pt, -1, p, false, 0, bs, es);\n\t\t\t\t\t\t\tpt.xs0 = (es === \"none\" && (p === \"display\" || p.indexOf(\"Style\") !== -1)) ? bs : es; //intermediate value should typically be set immediately (end value) except for \"display\" or things like borderTopStyle, borderBottomStyle, etc. which should use the beginning value during the tween.\n\t\t\t\t\t\t\t//DEBUG: _log(\"non-tweening value \"+p+\": \"+pt.xs0);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (plugin) if (pt && !pt.plugin) {\n\t\t\t\t\tpt.plugin = plugin;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn pt;\n\t\t};\n\n\n\t\t//gets called every time the tween updates, passing the new ratio (typically a value between 0 and 1, but not always (for example, if an Elastic.easeOut is used, the value can jump above 1 mid-tween). It will always start and 0 and end at 1.\n\t\tp.setRatio = function(v) {\n\t\t\tvar pt = this._firstPT,\n\t\t\t\tmin = 0.000001,\n\t\t\t\tval, str, i;\n\t\t\t//at the end of the tween, we set the values to exactly what we received in order to make sure non-tweening values (like \"position\" or \"float\" or whatever) are set and so that if the beginning/ending suffixes (units) didn't match and we normalized to px, the value that the user passed in is used here. We check to see if the tween is at its beginning in case it's a from() tween in which case the ratio will actually go from 1 to 0 over the course of the tween (backwards).\n\t\t\tif (v === 1 && (this._tween._time === this._tween._duration || this._tween._time === 0)) {\n\t\t\t\twhile (pt) {\n\t\t\t\t\tif (pt.type !== 2) {\n\t\t\t\t\t\tif (pt.r && pt.type !== -1) {\n\t\t\t\t\t\t\tval = pt.r(pt.s + pt.c);\n\t\t\t\t\t\t\tif (!pt.type) {\n\t\t\t\t\t\t\t\tpt.t[pt.p] = val + pt.xs0;\n\t\t\t\t\t\t\t} else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like \"rect(5px,10px,20px,25px)\"\n\t\t\t\t\t\t\t\ti = pt.l;\n\t\t\t\t\t\t\t\tstr = pt.xs0 + val + pt.xs1;\n\t\t\t\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\t\t\t\tstr += pt[\"xn\"+i] + pt[\"xs\"+(i+1)];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpt.t[pt.p] = str;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.e;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.setRatio(v);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\n\t\t\t} else if (v || !(this._tween._time === this._tween._duration || this._tween._time === 0) || this._tween._rawPrevTime === -0.000001) {\n\t\t\t\twhile (pt) {\n\t\t\t\t\tval = pt.c * v + pt.s;\n\t\t\t\t\tif (pt.r) {\n\t\t\t\t\t\tval = pt.r(val);\n\t\t\t\t\t} else if (val < min) if (val > -min) {\n\t\t\t\t\t\tval = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (!pt.type) {\n\t\t\t\t\t\tpt.t[pt.p] = val + pt.xs0;\n\t\t\t\t\t} else if (pt.type === 1) { //complex value (one that typically has multiple numbers inside a string, like \"rect(5px,10px,20px,25px)\"\n\t\t\t\t\t\ti = pt.l;\n\t\t\t\t\t\tif (i === 2) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2;\n\t\t\t\t\t\t} else if (i === 3) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3;\n\t\t\t\t\t\t} else if (i === 4) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4;\n\t\t\t\t\t\t} else if (i === 5) {\n\t\t\t\t\t\t\tpt.t[pt.p] = pt.xs0 + val + pt.xs1 + pt.xn1 + pt.xs2 + pt.xn2 + pt.xs3 + pt.xn3 + pt.xs4 + pt.xn4 + pt.xs5;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstr = pt.xs0 + val + pt.xs1;\n\t\t\t\t\t\t\tfor (i = 1; i < pt.l; i++) {\n\t\t\t\t\t\t\t\tstr += pt[\"xn\"+i] + pt[\"xs\"+(i+1)];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpt.t[pt.p] = str;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if (pt.type === -1) { //non-tweening value\n\t\t\t\t\t\tpt.t[pt.p] = pt.xs0;\n\n\t\t\t\t\t} else if (pt.setRatio) { //custom setRatio() for things like SpecialProps, external plugins, etc.\n\t\t\t\t\t\tpt.setRatio(v);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\n\t\t\t//if the tween is reversed all the way back to the beginning, we need to restore the original values which may have different units (like % instead of px or em or whatever).\n\t\t\t} else {\n\t\t\t\twhile (pt) {\n\t\t\t\t\tif (pt.type !== 2) {\n\t\t\t\t\t\tpt.t[pt.p] = pt.b;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.setRatio(v);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * @private\n\t\t * Forces rendering of the target's transforms (rotation, scale, etc.) whenever the CSSPlugin's setRatio() is called.\n\t\t * Basically, this tells the CSSPlugin to create a CSSPropTween (type 2) after instantiation that runs last in the linked\n\t\t * list and calls the appropriate (3D or 2D) rendering function. We separate this into its own method so that we can call\n\t\t * it from other plugins like BezierPlugin if, for example, it needs to apply an autoRotation and this CSSPlugin\n\t\t * doesn't have any transform-related properties of its own. You can call this method as many times as you\n\t\t * want and it won't create duplicate CSSPropTweens.\n\t\t *\n\t\t * @param {boolean} threeD if true, it should apply 3D tweens (otherwise, just 2D ones are fine and typically faster)\n\t\t */\n\t\tp._enableTransforms = function(threeD) {\n\t\t\tthis._transform = this._transform || _getTransform(this._target, _cs, true); //ensures that the element has a _gsTransform property with the appropriate values.\n\t\t\tthis._transformType = (!(this._transform.svg && _useSVGTransformAttr) && (threeD || this._transformType === 3)) ? 3 : 2;\n\t\t};\n\n\t\tvar lazySet = function(v) {\n\t\t\tthis.t[this.p] = this.e;\n\t\t\tthis.data._linkCSSP(this, this._next, null, true); //we purposefully keep this._next even though it'd make sense to null it, but this is a performance optimization, as this happens during the while (pt) {} loop in setRatio() at the bottom of which it sets pt = pt._next, so if we null it, the linked list will be broken in that loop.\n\t\t};\n\t\t/** @private Gives us a way to set a value on the first render (and only the first render). **/\n\t\tp._addLazySet = function(t, p, v) {\n\t\t\tvar pt = this._firstPT = new CSSPropTween(t, p, 0, 0, this._firstPT, 2);\n\t\t\tpt.e = v;\n\t\t\tpt.setRatio = lazySet;\n\t\t\tpt.data = this;\n\t\t};\n\n\t\t/** @private **/\n\t\tp._linkCSSP = function(pt, next, prev, remove) {\n\t\t\tif (pt) {\n\t\t\t\tif (next) {\n\t\t\t\t\tnext._prev = pt;\n\t\t\t\t}\n\t\t\t\tif (pt._next) {\n\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t}\n\t\t\t\tif (pt._prev) {\n\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t} else if (this._firstPT === pt) {\n\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\tremove = true; //just to prevent resetting this._firstPT 5 lines down in case pt._next is null. (optimized for speed)\n\t\t\t\t}\n\t\t\t\tif (prev) {\n\t\t\t\t\tprev._next = pt;\n\t\t\t\t} else if (!remove && this._firstPT === null) {\n\t\t\t\t\tthis._firstPT = pt;\n\t\t\t\t}\n\t\t\t\tpt._next = next;\n\t\t\t\tpt._prev = prev;\n\t\t\t}\n\t\t\treturn pt;\n\t\t};\n\n\t\tp._mod = function(lookup) {\n\t\t\tvar pt = this._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tif (typeof(lookup[pt.p]) === \"function\") { //only gets called by RoundPropsPlugin (ModifyPlugin manages all the rendering internally for CSSPlugin properties that need modification). Remember, we handle rounding a bit differently in this plugin for performance reasons, leveraging \"r\" as an indicator that the value should be rounded internally.\n\t\t\t\t\tpt.r = lookup[pt.p];\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t};\n\n\t\t//we need to make sure that if alpha or autoAlpha is killed, opacity is too. And autoAlpha affects the \"visibility\" property.\n\t\tp._kill = function(lookup) {\n\t\t\tvar copy = lookup,\n\t\t\t\tpt, p, xfirst;\n\t\t\tif (lookup.autoAlpha || lookup.alpha) {\n\t\t\t\tcopy = {};\n\t\t\t\tfor (p in lookup) { //copy the lookup so that we're not changing the original which may be passed elsewhere.\n\t\t\t\t\tcopy[p] = lookup[p];\n\t\t\t\t}\n\t\t\t\tcopy.opacity = 1;\n\t\t\t\tif (copy.autoAlpha) {\n\t\t\t\t\tcopy.visibility = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lookup.className && (pt = this._classNamePT)) { //for className tweens, we need to kill any associated CSSPropTweens too; a linked list starts at the className's \"xfirst\".\n\t\t\t\txfirst = pt.xfirst;\n\t\t\t\tif (xfirst && xfirst._prev) {\n\t\t\t\t\tthis._linkCSSP(xfirst._prev, pt._next, xfirst._prev._prev); //break off the prev\n\t\t\t\t} else if (xfirst === this._firstPT) {\n\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t}\n\t\t\t\tif (pt._next) {\n\t\t\t\t\tthis._linkCSSP(pt._next, pt._next._next, xfirst._prev);\n\t\t\t\t}\n\t\t\t\tthis._classNamePT = null;\n\t\t\t}\n\t\t\tpt = this._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.plugin && pt.plugin !== p && pt.plugin._kill) { //for plugins that are registered with CSSPlugin, we should notify them of the kill.\n\t\t\t\t\tpt.plugin._kill(lookup);\n\t\t\t\t\tp = pt.plugin;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn TweenPlugin.prototype._kill.call(this, copy);\n\t\t};\n\n\n\n\t\t//used by cascadeTo() for gathering all the style properties of each child element into an array for comparison.\n\t\tvar _getChildStyles = function(e, props, targets) {\n\t\t\t\tvar children, i, child, type;\n\t\t\t\tif (e.slice) {\n\t\t\t\t\ti = e.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t_getChildStyles(e[i], props, targets);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tchildren = e.childNodes;\n\t\t\t\ti = children.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tchild = children[i];\n\t\t\t\t\ttype = child.type;\n\t\t\t\t\tif (child.style) {\n\t\t\t\t\t\tprops.push(_getAllStyles(child));\n\t\t\t\t\t\tif (targets) {\n\t\t\t\t\t\t\ttargets.push(child);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ((type === 1 || type === 9 || type === 11) && child.childNodes.length) {\n\t\t\t\t\t\t_getChildStyles(child, props, targets);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t/**\n\t\t * Typically only useful for className tweens that may affect child elements, this method creates a TweenLite\n\t\t * and then compares the style properties of all the target's child elements at the tween's start and end, and\n\t\t * if any are different, it also creates tweens for those and returns an array containing ALL of the resulting\n\t\t * tweens (so that you can easily add() them to a TimelineLite, for example). The reason this functionality is\n\t\t * wrapped into a separate static method of CSSPlugin instead of being integrated into all regular className tweens\n\t\t * is because it creates entirely new tweens that may have completely different targets than the original tween,\n\t\t * so if they were all lumped into the original tween instance, it would be inconsistent with the rest of the API\n\t\t * and it would create other problems. For example:\n\t\t *  - If I create a tween of elementA, that tween instance may suddenly change its target to include 50 other elements (unintuitive if I specifically defined the target I wanted)\n\t\t *  - We can't just create new independent tweens because otherwise, what happens if the original/parent tween is reversed or pause or dropped into a TimelineLite for tight control? You'd expect that tween's behavior to affect all the others.\n\t\t *  - Analyzing every style property of every child before and after the tween is an expensive operation when there are many children, so this behavior shouldn't be imposed on all className tweens by default, especially since it's probably rare that this extra functionality is needed.\n\t\t *\n\t\t * @param {Object} target object to be tweened\n\t\t * @param {number} Duration in seconds (or frames for frames-based tweens)\n\t\t * @param {Object} Object containing the end values, like {className:\"newClass\", ease:Linear.easeNone}\n\t\t * @return {Array} An array of TweenLite instances\n\t\t */\n\t\tCSSPlugin.cascadeTo = function(target, duration, vars) {\n\t\t\tvar tween = TweenLite.to(target, duration, vars),\n\t\t\t\tresults = [tween],\n\t\t\t\tb = [],\n\t\t\t\te = [],\n\t\t\t\ttargets = [],\n\t\t\t\t_reservedProps = TweenLite._internals.reservedProps,\n\t\t\t\ti, difs, p, from;\n\t\t\ttarget = tween._targets || tween.target;\n\t\t\t_getChildStyles(target, b, targets);\n\t\t\ttween.render(duration, true, true);\n\t\t\t_getChildStyles(target, e);\n\t\t\ttween.render(0, true, true);\n\t\t\ttween._enabled(true);\n\t\t\ti = targets.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tdifs = _cssDif(targets[i], b[i], e[i]);\n\t\t\t\tif (difs.firstMPT) {\n\t\t\t\t\tdifs = difs.difs;\n\t\t\t\t\tfor (p in vars) {\n\t\t\t\t\t\tif (_reservedProps[p]) {\n\t\t\t\t\t\t\tdifs[p] = vars[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfrom = {};\n\t\t\t\t\tfor (p in difs) {\n\t\t\t\t\t\tfrom[p] = b[i][p];\n\t\t\t\t\t}\n\t\t\t\t\tresults.push(TweenLite.fromTo(targets[i], duration, from, difs));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t\tTweenPlugin.activate([CSSPlugin]);\n\t\treturn CSSPlugin;\n\n\t}, true);\n\nexport const CSSPlugin = _gsScope.CSSPlugin;\nexport { CSSPlugin as default };","/*!\n * VERSION: 2.0.1\n * DATE: 2018-05-30\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n * \n * @author: Jack Doyle, jack@greensock.com\n */\nimport TweenLite, { _gsScope, Animation, SimpleTimeline } from \"./TweenLite.js\";\n\n_gsScope._gsDefine(\"TimelineLite\", [\"core.Animation\",\"core.SimpleTimeline\",\"TweenLite\"], function() {\n\n\t\tvar TimelineLite = function(vars) {\n\t\t\t\tSimpleTimeline.call(this, vars);\n\t\t\t\tthis._labels = {};\n\t\t\t\tthis.autoRemoveChildren = (this.vars.autoRemoveChildren === true);\n\t\t\t\tthis.smoothChildTiming = (this.vars.smoothChildTiming === true);\n\t\t\t\tthis._sortChildren = true;\n\t\t\t\tthis._onUpdate = this.vars.onUpdate;\n\t\t\t\tvar v = this.vars,\n\t\t\t\t\tval, p;\n\t\t\t\tfor (p in v) {\n\t\t\t\t\tval = v[p];\n\t\t\t\t\tif (_isArray(val)) if (val.join(\"\").indexOf(\"{self}\") !== -1) {\n\t\t\t\t\t\tv[p] = this._swapSelfInParams(val);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (_isArray(v.tweens)) {\n\t\t\t\t\tthis.add(v.tweens, 0, v.align, v.stagger);\n\t\t\t\t}\n\t\t\t},\n\t\t\t_tinyNum = 0.0000000001,\n\t\t\tTweenLiteInternals = TweenLite._internals,\n\t\t\t_internals = TimelineLite._internals = {},\n\t\t\t_isSelector = TweenLiteInternals.isSelector,\n\t\t\t_isArray = TweenLiteInternals.isArray,\n\t\t\t_lazyTweens = TweenLiteInternals.lazyTweens,\n\t\t\t_lazyRender = TweenLiteInternals.lazyRender,\n\t\t\t_globals = _gsScope._gsDefine.globals,\n\t\t\t_copy = function(vars) {\n\t\t\t\tvar copy = {}, p;\n\t\t\t\tfor (p in vars) {\n\t\t\t\t\tcopy[p] = vars[p];\n\t\t\t\t}\n\t\t\t\treturn copy;\n\t\t\t},\n\t\t\t_applyCycle = function(vars, targets, i) {\n\t\t\t\tvar alt = vars.cycle,\n\t\t\t\t\tp, val;\n\t\t\t\tfor (p in alt) {\n\t\t\t\t\tval = alt[p];\n\t\t\t\t\tvars[p] = (typeof(val) === \"function\") ? val(i, targets[i]) : val[i % val.length];\n\t\t\t\t}\n\t\t\t\tdelete vars.cycle;\n\t\t\t},\n\t\t\t_pauseCallback = _internals.pauseCallback = function() {},\n\t\t\t_slice = function(a) { //don't use [].slice because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\tvar b = [],\n\t\t\t\t\tl = a.length,\n\t\t\t\t\ti;\n\t\t\t\tfor (i = 0; i !== l; b.push(a[i++]));\n\t\t\t\treturn b;\n\t\t\t},\n\t\t\tp = TimelineLite.prototype = new SimpleTimeline();\n\n\t\tTimelineLite.version = \"2.0.1\";\n\t\tp.constructor = TimelineLite;\n\t\tp.kill()._gc = p._forcingPlayhead = p._hasPause = false;\n\n\t\t/* might use later...\n\t\t//translates a local time inside an animation to the corresponding time on the root/global timeline, factoring in all nesting and timeScales.\n\t\tfunction localToGlobal(time, animation) {\n\t\t\twhile (animation) {\n\t\t\t\ttime = (time / animation._timeScale) + animation._startTime;\n\t\t\t\tanimation = animation.timeline;\n\t\t\t}\n\t\t\treturn time;\n\t\t}\n\n\t\t//translates the supplied time on the root/global timeline into the corresponding local time inside a particular animation, factoring in all nesting and timeScales\n\t\tfunction globalToLocal(time, animation) {\n\t\t\tvar scale = 1;\n\t\t\ttime -= localToGlobal(0, animation);\n\t\t\twhile (animation) {\n\t\t\t\tscale *= animation._timeScale;\n\t\t\t\tanimation = animation.timeline;\n\t\t\t}\n\t\t\treturn time * scale;\n\t\t}\n\t\t*/\n\n\t\tp.to = function(target, duration, vars, position) {\n\t\t\tvar Engine = (vars.repeat && _globals.TweenMax) || TweenLite;\n\t\t\treturn duration ? this.add( new Engine(target, duration, vars), position) : this.set(target, vars, position);\n\t\t};\n\n\t\tp.from = function(target, duration, vars, position) {\n\t\t\treturn this.add( ((vars.repeat && _globals.TweenMax) || TweenLite).from(target, duration, vars), position);\n\t\t};\n\n\t\tp.fromTo = function(target, duration, fromVars, toVars, position) {\n\t\t\tvar Engine = (toVars.repeat && _globals.TweenMax) || TweenLite;\n\t\t\treturn duration ? this.add( Engine.fromTo(target, duration, fromVars, toVars), position) : this.set(target, toVars, position);\n\t\t};\n\n\t\tp.staggerTo = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\tvar tl = new TimelineLite({onComplete:onCompleteAll, onCompleteParams:onCompleteAllParams, callbackScope:onCompleteAllScope, smoothChildTiming:this.smoothChildTiming}),\n\t\t\t\tcycle = vars.cycle,\n\t\t\t\tcopy, i;\n\t\t\tif (typeof(targets) === \"string\") {\n\t\t\t\ttargets = TweenLite.selector(targets) || targets;\n\t\t\t}\n\t\t\ttargets = targets || [];\n\t\t\tif (_isSelector(targets)) { //senses if the targets object is a selector. If it is, we should translate it into an array.\n\t\t\t\ttargets = _slice(targets);\n\t\t\t}\n\t\t\tstagger = stagger || 0;\n\t\t\tif (stagger < 0) {\n\t\t\t\ttargets = _slice(targets);\n\t\t\t\ttargets.reverse();\n\t\t\t\tstagger *= -1;\n\t\t\t}\n\t\t\tfor (i = 0; i < targets.length; i++) {\n\t\t\t\tcopy = _copy(vars);\n\t\t\t\tif (copy.startAt) {\n\t\t\t\t\tcopy.startAt = _copy(copy.startAt);\n\t\t\t\t\tif (copy.startAt.cycle) {\n\t\t\t\t\t\t_applyCycle(copy.startAt, targets, i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (cycle) {\n\t\t\t\t\t_applyCycle(copy, targets, i);\n\t\t\t\t\tif (copy.duration != null) {\n\t\t\t\t\t\tduration = copy.duration;\n\t\t\t\t\t\tdelete copy.duration;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttl.to(targets[i], duration, copy, i * stagger);\n\t\t\t}\n\t\t\treturn this.add(tl, position);\n\t\t};\n\n\t\tp.staggerFrom = function(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\tvars.immediateRender = (vars.immediateRender != false);\n\t\t\tvars.runBackwards = true;\n\t\t\treturn this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n\t\t};\n\n\t\tp.staggerFromTo = function(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope) {\n\t\t\ttoVars.startAt = fromVars;\n\t\t\ttoVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);\n\t\t\treturn this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams, onCompleteAllScope);\n\t\t};\n\n\t\tp.call = function(callback, params, scope, position) {\n\t\t\treturn this.add( TweenLite.delayedCall(0, callback, params, scope), position);\n\t\t};\n\n\t\tp.set = function(target, vars, position) {\n\t\t\tposition = this._parseTimeOrLabel(position, 0, true);\n\t\t\tif (vars.immediateRender == null) {\n\t\t\t\tvars.immediateRender = (position === this._time && !this._paused);\n\t\t\t}\n\t\t\treturn this.add( new TweenLite(target, 0, vars), position);\n\t\t};\n\n\t\tTimelineLite.exportRoot = function(vars, ignoreDelayedCalls) {\n\t\t\tvars = vars || {};\n\t\t\tif (vars.smoothChildTiming == null) {\n\t\t\t\tvars.smoothChildTiming = true;\n\t\t\t}\n\t\t\tvar tl = new TimelineLite(vars),\n\t\t\t\troot = tl._timeline,\n\t\t\t\thasNegativeStart, time,\ttween, next;\n\t\t\tif (ignoreDelayedCalls == null) {\n\t\t\t\tignoreDelayedCalls = true;\n\t\t\t}\n\t\t\troot._remove(tl, true);\n\t\t\ttl._startTime = 0;\n\t\t\ttl._rawPrevTime = tl._time = tl._totalTime = root._time;\n\t\t\ttween = root._first;\n\t\t\twhile (tween) {\n\t\t\t\tnext = tween._next;\n\t\t\t\tif (!ignoreDelayedCalls || !(tween instanceof TweenLite && tween.target === tween.vars.onComplete)) {\n\t\t\t\t\ttime = tween._startTime - tween._delay;\n\t\t\t\t\tif (time < 0) {\n\t\t\t\t\t\thasNegativeStart = 1;\n\t\t\t\t\t}\n\t\t\t\t\ttl.add(tween, time);\n\t\t\t\t}\n\t\t\t\ttween = next;\n\t\t\t}\n\t\t\troot.add(tl, 0);\n\t\t\tif (hasNegativeStart) { //calling totalDuration() will force the adjustment necessary to shift the children forward so none of them start before zero, and moves the timeline backwards the same amount, so the playhead is still aligned where it should be globally, but the timeline doesn't have illegal children that start before zero.\n\t\t\t\ttl.totalDuration();\n\t\t\t}\n\t\t\treturn tl;\n\t\t};\n\n\t\tp.add = function(value, position, align, stagger) {\n\t\t\tvar curTime, l, i, child, tl, beforeRawTime;\n\t\t\tif (typeof(position) !== \"number\") {\n\t\t\t\tposition = this._parseTimeOrLabel(position, 0, true, value);\n\t\t\t}\n\t\t\tif (!(value instanceof Animation)) {\n\t\t\t\tif ((value instanceof Array) || (value && value.push && _isArray(value))) {\n\t\t\t\t\talign = align || \"normal\";\n\t\t\t\t\tstagger = stagger || 0;\n\t\t\t\t\tcurTime = position;\n\t\t\t\t\tl = value.length;\n\t\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\t\tif (_isArray(child = value[i])) {\n\t\t\t\t\t\t\tchild = new TimelineLite({tweens:child});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.add(child, curTime);\n\t\t\t\t\t\tif (typeof(child) !== \"string\" && typeof(child) !== \"function\") {\n\t\t\t\t\t\t\tif (align === \"sequence\") {\n\t\t\t\t\t\t\t\tcurTime = child._startTime + (child.totalDuration() / child._timeScale);\n\t\t\t\t\t\t\t} else if (align === \"start\") {\n\t\t\t\t\t\t\t\tchild._startTime -= child.delay();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurTime += stagger;\n\t\t\t\t\t}\n\t\t\t\t\treturn this._uncache(true);\n\t\t\t\t} else if (typeof(value) === \"string\") {\n\t\t\t\t\treturn this.addLabel(value, position);\n\t\t\t\t} else if (typeof(value) === \"function\") {\n\t\t\t\t\tvalue = TweenLite.delayedCall(0, value);\n\t\t\t\t} else {\n\t\t\t\t\tthrow(\"Cannot add \" + value + \" into the timeline; it is not a tween, timeline, function, or string.\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSimpleTimeline.prototype.add.call(this, value, position);\n\n\t\t\tif (value._time) { //in case, for example, the _startTime is moved on a tween that has already rendered. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning.\n\t\t\t\tvalue.render((this.rawTime() - value._startTime) * value._timeScale, false, false);\n\t\t\t}\n\n\t\t\t//if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.\n\t\t\tif (this._gc || this._time === this._duration) if (!this._paused) if (this._duration < this.duration()) {\n\t\t\t\t//in case any of the ancestors had completed but should now be enabled...\n\t\t\t\ttl = this;\n\t\t\t\tbeforeRawTime = (tl.rawTime() > value._startTime); //if the tween is placed on the timeline so that it starts BEFORE the current rawTime, we should align the playhead (move the timeline). This is because sometimes users will create a timeline, let it finish, and much later append a tween and expect it to run instead of jumping to its end state. While technically one could argue that it should jump to its end state, that's not what users intuitively expect.\n\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\tif (beforeRawTime && tl._timeline.smoothChildTiming) {\n\t\t\t\t\t\ttl.totalTime(tl._totalTime, true); //moves the timeline (shifts its startTime) if necessary, and also enables it.\n\t\t\t\t\t} else if (tl._gc) {\n\t\t\t\t\t\ttl._enabled(true, false);\n\t\t\t\t\t}\n\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t};\n\n\t\tp.remove = function(value) {\n\t\t\tif (value instanceof Animation) {\n\t\t\t\tthis._remove(value, false);\n\t\t\t\tvar tl = value._timeline = value.vars.useFrames ? Animation._rootFramesTimeline : Animation._rootTimeline; //now that it's removed, default it to the root timeline so that if it gets played again, it doesn't jump back into this timeline.\n\t\t\t\tvalue._startTime = (value._paused ? value._pauseTime : tl._time) - ((!value._reversed ? value._totalTime : value.totalDuration() - value._totalTime) / value._timeScale); //ensure that if it gets played again, the timing is correct.\n\t\t\t\treturn this;\n\t\t\t} else if (value instanceof Array || (value && value.push && _isArray(value))) {\n\t\t\t\tvar i = value.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tthis.remove(value[i]);\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t} else if (typeof(value) === \"string\") {\n\t\t\t\treturn this.removeLabel(value);\n\t\t\t}\n\t\t\treturn this.kill(null, value);\n\t\t};\n\n\t\tp._remove = function(tween, skipDisable) {\n\t\t\tSimpleTimeline.prototype._remove.call(this, tween, skipDisable);\n\t\t\tvar last = this._last;\n\t\t\tif (!last) {\n\t\t\t\tthis._time = this._totalTime = this._duration = this._totalDuration = 0;\n\t\t\t} else if (this._time > this.duration()) {\n\t\t\t\tthis._time = this._duration;\n\t\t\t\tthis._totalTime = this._totalDuration;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.append = function(value, offsetOrLabel) {\n\t\t\treturn this.add(value, this._parseTimeOrLabel(null, offsetOrLabel, true, value));\n\t\t};\n\n\t\tp.insert = p.insertMultiple = function(value, position, align, stagger) {\n\t\t\treturn this.add(value, position || 0, align, stagger);\n\t\t};\n\n\t\tp.appendMultiple = function(tweens, offsetOrLabel, align, stagger) {\n\t\t\treturn this.add(tweens, this._parseTimeOrLabel(null, offsetOrLabel, true, tweens), align, stagger);\n\t\t};\n\n\t\tp.addLabel = function(label, position) {\n\t\t\tthis._labels[label] = this._parseTimeOrLabel(position);\n\t\t\treturn this;\n\t\t};\n\n\t\tp.addPause = function(position, callback, params, scope) {\n\t\t\tvar t = TweenLite.delayedCall(0, _pauseCallback, params, scope || this);\n\t\t\tt.vars.onComplete = t.vars.onReverseComplete = callback;\n\t\t\tt.data = \"isPause\";\n\t\t\tthis._hasPause = true;\n\t\t\treturn this.add(t, position);\n\t\t};\n\n\t\tp.removeLabel = function(label) {\n\t\t\tdelete this._labels[label];\n\t\t\treturn this;\n\t\t};\n\n\t\tp.getLabelTime = function(label) {\n\t\t\treturn (this._labels[label] != null) ? this._labels[label] : -1;\n\t\t};\n\n\t\tp._parseTimeOrLabel = function(timeOrLabel, offsetOrLabel, appendIfAbsent, ignore) {\n\t\t\tvar clippedDuration, i;\n\t\t\t//if we're about to add a tween/timeline (or an array of them) that's already a child of this timeline, we should remove it first so that it doesn't contaminate the duration().\n\t\t\tif (ignore instanceof Animation && ignore.timeline === this) {\n\t\t\t\tthis.remove(ignore);\n\t\t\t} else if (ignore && ((ignore instanceof Array) || (ignore.push && _isArray(ignore)))) {\n\t\t\t\ti = ignore.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (ignore[i] instanceof Animation && ignore[i].timeline === this) {\n\t\t\t\t\t\tthis.remove(ignore[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tclippedDuration = (typeof(timeOrLabel) === \"number\" && !offsetOrLabel) ? 0 : (this.duration() > 99999999999) ? this.recent().endTime(false) : this._duration; //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.\n\t\t\tif (typeof(offsetOrLabel) === \"string\") {\n\t\t\t\treturn this._parseTimeOrLabel(offsetOrLabel, (appendIfAbsent && typeof(timeOrLabel) === \"number\" && this._labels[offsetOrLabel] == null) ? timeOrLabel - clippedDuration : 0, appendIfAbsent);\n\t\t\t}\n\t\t\toffsetOrLabel = offsetOrLabel || 0;\n\t\t\tif (typeof(timeOrLabel) === \"string\" && (isNaN(timeOrLabel) || this._labels[timeOrLabel] != null)) { //if the string is a number like \"1\", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).\n\t\t\t\ti = timeOrLabel.indexOf(\"=\");\n\t\t\t\tif (i === -1) {\n\t\t\t\t\tif (this._labels[timeOrLabel] == null) {\n\t\t\t\t\t\treturn appendIfAbsent ? (this._labels[timeOrLabel] = clippedDuration + offsetOrLabel) : offsetOrLabel;\n\t\t\t\t\t}\n\t\t\t\t\treturn this._labels[timeOrLabel] + offsetOrLabel;\n\t\t\t\t}\n\t\t\t\toffsetOrLabel = parseInt(timeOrLabel.charAt(i-1) + \"1\", 10) * Number(timeOrLabel.substr(i+1));\n\t\t\t\ttimeOrLabel = (i > 1) ? this._parseTimeOrLabel(timeOrLabel.substr(0, i-1), 0, appendIfAbsent) : clippedDuration;\n\t\t\t} else if (timeOrLabel == null) {\n\t\t\t\ttimeOrLabel = clippedDuration;\n\t\t\t}\n\t\t\treturn Number(timeOrLabel) + offsetOrLabel;\n\t\t};\n\n\t\tp.seek = function(position, suppressEvents) {\n\t\t\treturn this.totalTime((typeof(position) === \"number\") ? position : this._parseTimeOrLabel(position), (suppressEvents !== false));\n\t\t};\n\n\t\tp.stop = function() {\n\t\t\treturn this.paused(true);\n\t\t};\n\n\t\tp.gotoAndPlay = function(position, suppressEvents) {\n\t\t\treturn this.play(position, suppressEvents);\n\t\t};\n\n\t\tp.gotoAndStop = function(position, suppressEvents) {\n\t\t\treturn this.pause(position, suppressEvents);\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tif (this._gc) {\n\t\t\t\tthis._enabled(true, false);\n\t\t\t}\n\t\t\tvar prevTime = this._time,\n\t\t\t\ttotalDur = (!this._dirty) ? this._totalDuration : this.totalDuration(),\n\t\t\t\tprevStart = this._startTime,\n\t\t\t\tprevTimeScale = this._timeScale,\n\t\t\t\tprevPaused = this._paused,\n\t\t\t\ttween, isComplete, next, callback, internalForce, pauseTween, curTime;\n\t\t\tif (prevTime !== this._time) { //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).\n\t\t\t\ttime += this._time - prevTime;\n\t\t\t}\n\t\t\tif (time >= totalDur - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.\n\t\t\t\tthis._totalTime = this._time = totalDur;\n\t\t\t\tif (!this._reversed) if (!this._hasPausedChild()) {\n\t\t\t\t\tisComplete = true;\n\t\t\t\t\tcallback = \"onComplete\";\n\t\t\t\t\tinternalForce = !!this._timeline.autoRemoveChildren; //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n\t\t\t\t\tif (this._duration === 0) if ((time <= 0 && time >= -0.0000001) || this._rawPrevTime < 0 || this._rawPrevTime === _tinyNum) if (this._rawPrevTime !== time && this._first) {\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t\tif (this._rawPrevTime > _tinyNum) {\n\t\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\ttime = totalDur + 0.0001; //to avoid occasional floating point rounding errors - sometimes child tweens/timelines were not being fully completed (their progress might be 0.999999999999998 instead of 1 because when _time - tween._startTime is performed, floating point errors would return a value that was SLIGHTLY off). Try (999999999999.7 - 999999999999) * 1 = 0.699951171875 instead of 0.7.\n\n\t\t\t} else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.\n\t\t\t\tthis._totalTime = this._time = 0;\n\t\t\t\tif (prevTime !== 0 || (this._duration === 0 && this._rawPrevTime !== _tinyNum && (this._rawPrevTime > 0 || (time < 0 && this._rawPrevTime >= 0)))) {\n\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\tisComplete = this._reversed;\n\t\t\t\t}\n\t\t\t\tif (time < 0) {\n\t\t\t\t\tthis._active = false;\n\t\t\t\t\tif (this._timeline.autoRemoveChildren && this._reversed) { //ensures proper GC if a timeline is resumed after it's finished reversing.\n\t\t\t\t\t\tinternalForce = isComplete = true;\n\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t} else if (this._rawPrevTime >= 0 && this._first) { //when going back beyond the start, force a render so that zero-duration tweens that sit at the very beginning render their start values properly. Otherwise, if the parent timeline's playhead lands exactly at this timeline's startTime, and then moves backwards, the zero-duration tweens at the beginning would still be at their end state.\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._rawPrevTime = time;\n\t\t\t\t} else {\n\t\t\t\t\tthis._rawPrevTime = (this._duration || !suppressEvents || time || this._rawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline or tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t\tif (time === 0 && isComplete) { //if there's a zero-duration tween at the very beginning of a timeline and the playhead lands EXACTLY at time 0, that tween will correctly render its end values, but we need to keep the timeline alive for one more render so that the beginning values render properly as the parent's playhead keeps moving beyond the begining. Imagine obj.x starts at 0 and then we do tl.set(obj, {x:100}).to(obj, 1, {x:200}) and then later we tl.reverse()...the goal is to have obj.x revert to 0. If the playhead happens to land on exactly 0, without this chunk of code, it'd complete the timeline and remove it from the rendering queue (not good).\n\t\t\t\t\t\ttween = this._first;\n\t\t\t\t\t\twhile (tween && tween._startTime === 0) {\n\t\t\t\t\t\t\tif (!tween._duration) {\n\t\t\t\t\t\t\t\tisComplete = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttween = tween._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttime = 0; //to avoid occasional floating point rounding errors (could cause problems especially with zero-duration tweens at the very beginning of the timeline)\n\t\t\t\t\tif (!this._initted) {\n\t\t\t\t\t\tinternalForce = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif (this._hasPause && !this._forcingPlayhead && !suppressEvents) {\n\t\t\t\t\tif (time >= prevTime) {\n\t\t\t\t\t\ttween = this._first;\n\t\t\t\t\t\twhile (tween && tween._startTime <= time && !pauseTween) {\n\t\t\t\t\t\t\tif (!tween._duration) if (tween.data === \"isPause\" && !tween.ratio && !(tween._startTime === 0 && this._rawPrevTime === 0)) {\n\t\t\t\t\t\t\t\tpauseTween = tween;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttween = tween._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttween = this._last;\n\t\t\t\t\t\twhile (tween && tween._startTime >= time && !pauseTween) {\n\t\t\t\t\t\t\tif (!tween._duration) if (tween.data === \"isPause\" && tween._rawPrevTime > 0) {\n\t\t\t\t\t\t\t\tpauseTween = tween;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttween = tween._prev;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (pauseTween) {\n\t\t\t\t\t\tthis._time = time = pauseTween._startTime;\n\t\t\t\t\t\tthis._totalTime = time + (this._cycle * (this._totalDuration + this._repeatDelay));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._totalTime = this._time = this._rawPrevTime = time;\n\t\t\t}\n\t\t\tif ((this._time === prevTime || !this._first) && !force && !internalForce && !pauseTween) {\n\t\t\t\treturn;\n\t\t\t} else if (!this._initted) {\n\t\t\t\tthis._initted = true;\n\t\t\t}\n\n\t\t\tif (!this._active) if (!this._paused && this._time !== prevTime && time > 0) {\n\t\t\t\tthis._active = true;  //so that if the user renders the timeline (as opposed to the parent timeline rendering it), it is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the timeline already finished but the user manually re-renders it as halfway done, for example.\n\t\t\t}\n\n\t\t\tif (prevTime === 0) if (this.vars.onStart) if (this._time !== 0 || !this._duration) if (!suppressEvents) {\n\t\t\t\tthis._callback(\"onStart\");\n\t\t\t}\n\n\t\t\tcurTime = this._time;\n\t\t\tif (curTime >= prevTime) {\n\t\t\t\ttween = this._first;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tnext = tween._next; //record it here because the value could change after rendering...\n\t\t\t\t\tif (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (tween._active || (tween._startTime <= curTime && !tween._paused && !tween._gc)) {\n\t\t\t\t\t\tif (pauseTween === tween) {\n\t\t\t\t\t\t\tthis.pause();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttween = next;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttween = this._last;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tnext = tween._prev; //record it here because the value could change after rendering...\n\t\t\t\t\tif (curTime !== this._time || (this._paused && !prevPaused)) { //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (tween._active || (tween._startTime <= prevTime && !tween._paused && !tween._gc)) {\n\t\t\t\t\t\tif (pauseTween === tween) {\n\t\t\t\t\t\t\tpauseTween = tween._prev; //the linked list is organized by _startTime, thus it's possible that a tween could start BEFORE the pause and end after it, in which case it would be positioned before the pause tween in the linked list, but we should render it before we pause() the timeline and cease rendering. This is only a concern when going in reverse.\n\t\t\t\t\t\t\twhile (pauseTween && pauseTween.endTime() > this._time) {\n\t\t\t\t\t\t\t\tpauseTween.render( (pauseTween._reversed ? pauseTween.totalDuration() - ((time - pauseTween._startTime) * pauseTween._timeScale) : (time - pauseTween._startTime) * pauseTween._timeScale), suppressEvents, force);\n\t\t\t\t\t\t\t\tpauseTween = pauseTween._prev;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tpauseTween = null;\n\t\t\t\t\t\t\tthis.pause();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttween = next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this._onUpdate) if (!suppressEvents) {\n\t\t\t\tif (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\tthis._callback(\"onUpdate\");\n\t\t\t}\n\n\t\t\tif (callback) if (!this._gc) if (prevStart === this._startTime || prevTimeScale !== this._timeScale) if (this._time === 0 || totalDur >= this.totalDuration()) { //if one of the tweens that was rendered altered this timeline's startTime (like if an onComplete reversed the timeline), it probably isn't complete. If it is, don't worry, because whatever call altered the startTime would complete if it was necessary at the new time. The only exception is the timeScale property. Also check _gc because there's a chance that kill() could be called in an onUpdate\n\t\t\t\tif (isComplete) {\n\t\t\t\t\tif (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onComplete on a timeline that reports/checks tweened values.\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t\tif (this._timeline.autoRemoveChildren) {\n\t\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t\tthis._active = false;\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents && this.vars[callback]) {\n\t\t\t\t\tthis._callback(callback);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp._hasPausedChild = function() {\n\t\t\tvar tween = this._first;\n\t\t\twhile (tween) {\n\t\t\t\tif (tween._paused || ((tween instanceof TimelineLite) && tween._hasPausedChild())) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\ttween = tween._next;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tp.getChildren = function(nested, tweens, timelines, ignoreBeforeTime) {\n\t\t\tignoreBeforeTime = ignoreBeforeTime || -9999999999;\n\t\t\tvar a = [],\n\t\t\t\ttween = this._first,\n\t\t\t\tcnt = 0;\n\t\t\twhile (tween) {\n\t\t\t\tif (tween._startTime < ignoreBeforeTime) {\n\t\t\t\t\t//do nothing\n\t\t\t\t} else if (tween instanceof TweenLite) {\n\t\t\t\t\tif (tweens !== false) {\n\t\t\t\t\t\ta[cnt++] = tween;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (timelines !== false) {\n\t\t\t\t\t\ta[cnt++] = tween;\n\t\t\t\t\t}\n\t\t\t\t\tif (nested !== false) {\n\t\t\t\t\t\ta = a.concat(tween.getChildren(true, tweens, timelines));\n\t\t\t\t\t\tcnt = a.length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttween = tween._next;\n\t\t\t}\n\t\t\treturn a;\n\t\t};\n\n\t\tp.getTweensOf = function(target, nested) {\n\t\t\tvar disabled = this._gc,\n\t\t\t\ta = [],\n\t\t\t\tcnt = 0,\n\t\t\t\ttweens, i;\n\t\t\tif (disabled) {\n\t\t\t\tthis._enabled(true, true); //getTweensOf() filters out disabled tweens, and we have to mark them as _gc = true when the timeline completes in order to allow clean garbage collection, so temporarily re-enable the timeline here.\n\t\t\t}\n\t\t\ttweens = TweenLite.getTweensOf(target);\n\t\t\ti = tweens.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (tweens[i].timeline === this || (nested && this._contains(tweens[i]))) {\n\t\t\t\t\ta[cnt++] = tweens[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (disabled) {\n\t\t\t\tthis._enabled(false, true);\n\t\t\t}\n\t\t\treturn a;\n\t\t};\n\n\t\tp.recent = function() {\n\t\t\treturn this._recent;\n\t\t};\n\n\t\tp._contains = function(tween) {\n\t\t\tvar tl = tween.timeline;\n\t\t\twhile (tl) {\n\t\t\t\tif (tl === this) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\ttl = tl.timeline;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tp.shiftChildren = function(amount, adjustLabels, ignoreBeforeTime) {\n\t\t\tignoreBeforeTime = ignoreBeforeTime || 0;\n\t\t\tvar tween = this._first,\n\t\t\t\tlabels = this._labels,\n\t\t\t\tp;\n\t\t\twhile (tween) {\n\t\t\t\tif (tween._startTime >= ignoreBeforeTime) {\n\t\t\t\t\ttween._startTime += amount;\n\t\t\t\t}\n\t\t\t\ttween = tween._next;\n\t\t\t}\n\t\t\tif (adjustLabels) {\n\t\t\t\tfor (p in labels) {\n\t\t\t\t\tif (labels[p] >= ignoreBeforeTime) {\n\t\t\t\t\t\tlabels[p] += amount;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp._kill = function(vars, target) {\n\t\t\tif (!vars && !target) {\n\t\t\t\treturn this._enabled(false, false);\n\t\t\t}\n\t\t\tvar tweens = (!target) ? this.getChildren(true, true, false) : this.getTweensOf(target),\n\t\t\t\ti = tweens.length,\n\t\t\t\tchanged = false;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (tweens[i]._kill(vars, target)) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\tp.clear = function(labels) {\n\t\t\tvar tweens = this.getChildren(false, true, true),\n\t\t\t\ti = tweens.length;\n\t\t\tthis._time = this._totalTime = 0;\n\t\t\twhile (--i > -1) {\n\t\t\t\ttweens[i]._enabled(false, false);\n\t\t\t}\n\t\t\tif (labels !== false) {\n\t\t\t\tthis._labels = {};\n\t\t\t}\n\t\t\treturn this._uncache(true);\n\t\t};\n\n\t\tp.invalidate = function() {\n\t\t\tvar tween = this._first;\n\t\t\twhile (tween) {\n\t\t\t\ttween.invalidate();\n\t\t\t\ttween = tween._next;\n\t\t\t}\n\t\t\treturn Animation.prototype.invalidate.call(this);;\n\t\t};\n\n\t\tp._enabled = function(enabled, ignoreTimeline) {\n\t\t\tif (enabled === this._gc) {\n\t\t\t\tvar tween = this._first;\n\t\t\t\twhile (tween) {\n\t\t\t\t\ttween._enabled(enabled, true);\n\t\t\t\t\ttween = tween._next;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn SimpleTimeline.prototype._enabled.call(this, enabled, ignoreTimeline);\n\t\t};\n\n\t\tp.totalTime = function(time, suppressEvents, uncapped) {\n\t\t\tthis._forcingPlayhead = true;\n\t\t\tvar val = Animation.prototype.totalTime.apply(this, arguments);\n\t\t\tthis._forcingPlayhead = false;\n\t\t\treturn val;\n\t\t};\n\n\t\tp.duration = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (this._dirty) {\n\t\t\t\t\tthis.totalDuration(); //just triggers recalculation\n\t\t\t\t}\n\t\t\t\treturn this._duration;\n\t\t\t}\n\t\t\tif (this.duration() !== 0 && value !== 0) {\n\t\t\t\tthis.timeScale(this._duration / value);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.totalDuration = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tif (this._dirty) {\n\t\t\t\t\tvar max = 0,\n\t\t\t\t\t\ttween = this._last,\n\t\t\t\t\t\tprevStart = 999999999999,\n\t\t\t\t\t\tprev, end;\n\t\t\t\t\twhile (tween) {\n\t\t\t\t\t\tprev = tween._prev; //record it here in case the tween changes position in the sequence...\n\t\t\t\t\t\tif (tween._dirty) {\n\t\t\t\t\t\t\ttween.totalDuration(); //could change the tween._startTime, so make sure the tween's cache is clean before analyzing it.\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tween._startTime > prevStart && this._sortChildren && !tween._paused && !this._calculatingDuration) { //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence\n\t\t\t\t\t\t\tthis._calculatingDuration = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add(), like _parseTimeOrLabel().\n\t\t\t\t\t\t\tthis.add(tween, tween._startTime - tween._delay);\n\t\t\t\t\t\t\tthis._calculatingDuration = 0;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tprevStart = tween._startTime;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (tween._startTime < 0 && !tween._paused) { //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.\n\t\t\t\t\t\t\tmax -= tween._startTime;\n\t\t\t\t\t\t\tif (this._timeline.smoothChildTiming) {\n\t\t\t\t\t\t\t\tthis._startTime += tween._startTime / this._timeScale;\n\t\t\t\t\t\t\t\tthis._time -= tween._startTime;\n\t\t\t\t\t\t\t\tthis._totalTime -= tween._startTime;\n\t\t\t\t\t\t\t\tthis._rawPrevTime -= tween._startTime;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.shiftChildren(-tween._startTime, false, -9999999999);\n\t\t\t\t\t\t\tprevStart = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tend = tween._startTime + (tween._totalDuration / tween._timeScale);\n\t\t\t\t\t\tif (end > max) {\n\t\t\t\t\t\t\tmax = end;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttween = prev;\n\t\t\t\t\t}\n\t\t\t\t\tthis._duration = this._totalDuration = max;\n\t\t\t\t\tthis._dirty = false;\n\t\t\t\t}\n\t\t\t\treturn this._totalDuration;\n\t\t\t}\n\t\t\treturn (value && this.totalDuration()) ? this.timeScale(this._totalDuration / value) : this;\n\t\t};\n\n\t\tp.paused = function(value) {\n\t\t\tif (!value) { //if there's a pause directly at the spot from where we're unpausing, skip it.\n\t\t\t\tvar tween = this._first,\n\t\t\t\t\ttime = this._time;\n\t\t\t\twhile (tween) {\n\t\t\t\t\tif (tween._startTime === time && tween.data === \"isPause\") {\n\t\t\t\t\t\ttween._rawPrevTime = 0; //remember, _rawPrevTime is how zero-duration tweens/callbacks sense directionality and determine whether or not to fire. If _rawPrevTime is the same as _startTime on the next render, it won't fire.\n\t\t\t\t\t}\n\t\t\t\t\ttween = tween._next;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Animation.prototype.paused.apply(this, arguments);\n\t\t};\n\n\t\tp.usesFrames = function() {\n\t\t\tvar tl = this._timeline;\n\t\t\twhile (tl._timeline) {\n\t\t\t\ttl = tl._timeline;\n\t\t\t}\n\t\t\treturn (tl === Animation._rootFramesTimeline);\n\t\t};\n\n\t\tp.rawTime = function(wrapRepeats) {\n\t\t\treturn (wrapRepeats && (this._paused || (this._repeat && this.time() > 0 && this.totalProgress() < 1))) ? this._totalTime % (this._duration + this._repeatDelay) : this._paused ? this._totalTime : (this._timeline.rawTime(wrapRepeats) - this._startTime) * this._timeScale;\n\t\t};\n\n\t\treturn TimelineLite;\n\n\t}, true);\n\nexport const TimelineLite = _gsScope.TimelineLite;\nexport { TimelineLite as default };\n","/*!\n * VERSION: 2.0.1\n * DATE: 2018-05-30\n * UPDATES AND DOCS AT: http://greensock.com\n *\n * @license Copyright (c) 2008-2018, GreenSock. All rights reserved.\n * This work is subject to the terms at http://greensock.com/standard-license or for\n * Club GreenSock members, the software agreement that was issued with your membership.\n *\n * @author: Jack Doyle, jack@greensock.com\n */\n\n/* ES6 changes:\n\t- declare and export _gsScope at top.\n\t- set const TweenLite = the result of the main function\n\t- export default TweenLite at the bottom\n\t- return TweenLite at the bottom of the main function\n\t- pass in _gsScope as the first parameter of the main function (which is actually at the bottom)\n\t- remove the \"export to multiple environments\" in Definition().\n */\nexport const _gsScope = (typeof(window) !== \"undefined\") ? window : (typeof(module) !== \"undefined\" && module.exports && typeof(global) !== \"undefined\") ? global : this || {};\n\nexport const TweenLite = (function(window, moduleName) {\n\n\t\t\"use strict\";\n\t\tvar _exports = {},\n\t\t\t_doc = window.document,\n\t\t\t_globals = window.GreenSockGlobals = window.GreenSockGlobals || window;\n\t\tif (_globals.TweenLite) {\n\t\t\treturn _globals.TweenLite; //in case the core set of classes is already loaded, don't instantiate twice.\n\t\t}\n\t\tvar _namespace = function(ns) {\n\t\t\t\tvar a = ns.split(\".\"),\n\t\t\t\t\tp = _globals, i;\n\t\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\t\tp[a[i]] = p = p[a[i]] || {};\n\t\t\t\t}\n\t\t\t\treturn p;\n\t\t\t},\n\t\t\tgs = _namespace(\"com.greensock\"),\n\t\t\t_tinyNum = 0.0000000001,\n\t\t\t_slice = function(a) { //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\tvar b = [],\n\t\t\t\t\tl = a.length,\n\t\t\t\t\ti;\n\t\t\t\tfor (i = 0; i !== l; b.push(a[i++])) {}\n\t\t\t\treturn b;\n\t\t\t},\n\t\t\t_emptyFunc = function() {},\n\t\t\t_isArray = (function() { //works around issues in iframe environments where the Array global isn't shared, thus if the object originates in a different window/iframe, \"(obj instanceof Array)\" will evaluate false. We added some speed optimizations to avoid Object.prototype.toString.call() unless it's absolutely necessary because it's VERY slow (like 20x slower)\n\t\t\t\tvar toString = Object.prototype.toString,\n\t\t\t\t\tarray = toString.call([]);\n\t\t\t\treturn function(obj) {\n\t\t\t\t\treturn obj != null && (obj instanceof Array || (typeof(obj) === \"object\" && !!obj.push && toString.call(obj) === array));\n\t\t\t\t};\n\t\t\t}()),\n\t\t\ta, i, p, _ticker, _tickerActive,\n\t\t\t_defLookup = {},\n\n\t\t\t/**\n\t\t\t * @constructor\n\t\t\t * Defines a GreenSock class, optionally with an array of dependencies that must be instantiated first and passed into the definition.\n\t\t\t * This allows users to load GreenSock JS files in any order even if they have interdependencies (like CSSPlugin extends TweenPlugin which is\n\t\t\t * inside TweenLite.js, but if CSSPlugin is loaded first, it should wait to run its code until TweenLite.js loads and instantiates TweenPlugin\n\t\t\t * and then pass TweenPlugin to CSSPlugin's definition). This is all done automatically and internally.\n\t\t\t *\n\t\t\t * Every definition will be added to a \"com.greensock\" global object (typically window, but if a window.GreenSockGlobals object is found,\n\t\t\t * it will go there as of v1.7). For example, TweenLite will be found at window.com.greensock.TweenLite and since it's a global class that should be available anywhere,\n\t\t\t * it is ALSO referenced at window.TweenLite. However some classes aren't considered global, like the base com.greensock.core.Animation class, so\n\t\t\t * those will only be at the package like window.com.greensock.core.Animation. Again, if you define a GreenSockGlobals object on the window, everything\n\t\t\t * gets tucked neatly inside there instead of on the window directly. This allows you to do advanced things like load multiple versions of GreenSock\n\t\t\t * files and put them into distinct objects (imagine a banner ad uses a newer version but the main site uses an older one). In that case, you could\n\t\t\t * sandbox the banner one like:\n\t\t\t *\n\t\t\t * <script>\n\t\t\t *     var gs = window.GreenSockGlobals = {}; //the newer version we're about to load could now be referenced in a \"gs\" object, like gs.TweenLite.to(...). Use whatever alias you want as long as it's unique, \"gs\" or \"banner\" or whatever.\n\t\t\t * </script>\n\t\t\t * <script src=\"js/greensock/v1.7/TweenMax.js\"></script>\n\t\t\t * <script>\n\t\t\t *     window.GreenSockGlobals = window._gsQueue = window._gsDefine = null; //reset it back to null (along with the special _gsQueue variable) so that the next load of TweenMax affects the window and we can reference things directly like TweenLite.to(...)\n\t\t\t * </script>\n\t\t\t * <script src=\"js/greensock/v1.6/TweenMax.js\"></script>\n\t\t\t * <script>\n\t\t\t *     gs.TweenLite.to(...); //would use v1.7\n\t\t\t *     TweenLite.to(...); //would use v1.6\n\t\t\t * </script>\n\t\t\t *\n\t\t\t * @param {!string} ns The namespace of the class definition, leaving off \"com.greensock.\" as that's assumed. For example, \"TweenLite\" or \"plugins.CSSPlugin\" or \"easing.Back\".\n\t\t\t * @param {!Array.<string>} dependencies An array of dependencies (described as their namespaces minus \"com.greensock.\" prefix). For example [\"TweenLite\",\"plugins.TweenPlugin\",\"core.Animation\"]\n\t\t\t * @param {!function():Object} func The function that should be called and passed the resolved dependencies which will return the actual class for this definition.\n\t\t\t * @param {boolean=} global If true, the class will be added to the global scope (typically window unless you define a window.GreenSockGlobals object)\n\t\t\t */\n\t\t\tDefinition = function(ns, dependencies, func, global) {\n\t\t\t\tthis.sc = (_defLookup[ns]) ? _defLookup[ns].sc : []; //subclasses\n\t\t\t\t_defLookup[ns] = this;\n\t\t\t\tthis.gsClass = null;\n\t\t\t\tthis.func = func;\n\t\t\t\tvar _classes = [];\n\t\t\t\tthis.check = function(init) {\n\t\t\t\t\tvar i = dependencies.length,\n\t\t\t\t\t\tmissing = i,\n\t\t\t\t\t\tcur, a, n, cl;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif ((cur = _defLookup[dependencies[i]] || new Definition(dependencies[i], [])).gsClass) {\n\t\t\t\t\t\t\t_classes[i] = cur.gsClass;\n\t\t\t\t\t\t\tmissing--;\n\t\t\t\t\t\t} else if (init) {\n\t\t\t\t\t\t\tcur.sc.push(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (missing === 0 && func) {\n\t\t\t\t\t\ta = (\"com.greensock.\" + ns).split(\".\");\n\t\t\t\t\t\tn = a.pop();\n\t\t\t\t\t\tcl = _namespace(a.join(\".\"))[n] = this.gsClass = func.apply(func, _classes);\n\n\t\t\t\t\t\t//exports to multiple environments\n\t\t\t\t\t\tif (global) {\n\t\t\t\t\t\t\t_globals[n] = _exports[n] = cl; //provides a way to avoid global namespace pollution. By default, the main classes like TweenLite, Power1, Strong, etc. are added to window unless a GreenSockGlobals is defined. So if you want to have things added to a custom object instead, just do something like window.GreenSockGlobals = {} before loading any GreenSock files. You can even set up an alias like window.GreenSockGlobals = windows.gs = {} so that you can access everything like gs.TweenLite. Also remember that ALL classes are added to the window.com.greensock object (in their respective packages, like com.greensock.easing.Power1, com.greensock.TweenLite, etc.)\n\t\t\t\t\t\t\t/*\n\t\t\t\t\t\t\tif (typeof(module) !== \"undefined\" && module.exports) { //node\n\t\t\t\t\t\t\t\tif (ns === moduleName) {\n\t\t\t\t\t\t\t\t\tmodule.exports = _exports[moduleName] = cl;\n\t\t\t\t\t\t\t\t\tfor (i in _exports) {\n\t\t\t\t\t\t\t\t\t\tcl[i] = _exports[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (_exports[moduleName]) {\n\t\t\t\t\t\t\t\t\t_exports[moduleName][n] = cl;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (typeof(define) === \"function\" && define.amd){ //AMD\n\t\t\t\t\t\t\t\tdefine((window.GreenSockAMDPath ? window.GreenSockAMDPath + \"/\" : \"\") + ns.split(\".\").pop(), [], function() { return cl; });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t*/\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (i = 0; i < this.sc.length; i++) {\n\t\t\t\t\t\t\tthis.sc[i].check();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis.check(true);\n\t\t\t},\n\n\t\t\t//used to create Definition instances (which basically registers a class that has dependencies).\n\t\t\t_gsDefine = window._gsDefine = function(ns, dependencies, func, global) {\n\t\t\t\treturn new Definition(ns, dependencies, func, global);\n\t\t\t},\n\n\t\t\t//a quick way to create a class that doesn't have any dependencies. Returns the class, but first registers it in the GreenSock namespace so that other classes can grab it (other classes might be dependent on the class).\n\t\t\t_class = gs._class = function(ns, func, global) {\n\t\t\t\tfunc = func || function() {};\n\t\t\t\t_gsDefine(ns, [], function(){ return func; }, global);\n\t\t\t\treturn func;\n\t\t\t};\n\n\t\t_gsDefine.globals = _globals;\n\n\n\n/*\n * ----------------------------------------------------------------\n * Ease\n * ----------------------------------------------------------------\n */\n\t\tvar _baseParams = [0, 0, 1, 1],\n\t\t\tEase = _class(\"easing.Ease\", function(func, extraParams, type, power) {\n\t\t\t\tthis._func = func;\n\t\t\t\tthis._type = type || 0;\n\t\t\t\tthis._power = power || 0;\n\t\t\t\tthis._params = extraParams ? _baseParams.concat(extraParams) : _baseParams;\n\t\t\t}, true),\n\t\t\t_easeMap = Ease.map = {},\n\t\t\t_easeReg = Ease.register = function(ease, names, types, create) {\n\t\t\t\tvar na = names.split(\",\"),\n\t\t\t\t\ti = na.length,\n\t\t\t\t\tta = (types || \"easeIn,easeOut,easeInOut\").split(\",\"),\n\t\t\t\t\te, name, j, type;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tname = na[i];\n\t\t\t\t\te = create ? _class(\"easing.\"+name, null, true) : gs.easing[name] || {};\n\t\t\t\t\tj = ta.length;\n\t\t\t\t\twhile (--j > -1) {\n\t\t\t\t\t\ttype = ta[j];\n\t\t\t\t\t\t_easeMap[name + \".\" + type] = _easeMap[type + name] = e[type] = ease.getRatio ? ease : ease[type] || new ease();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\tp = Ease.prototype;\n\t\tp._calcEnd = false;\n\t\tp.getRatio = function(p) {\n\t\t\tif (this._func) {\n\t\t\t\tthis._params[0] = p;\n\t\t\t\treturn this._func.apply(null, this._params);\n\t\t\t}\n\t\t\tvar t = this._type,\n\t\t\t\tpw = this._power,\n\t\t\t\tr = (t === 1) ? 1 - p : (t === 2) ? p : (p < 0.5) ? p * 2 : (1 - p) * 2;\n\t\t\tif (pw === 1) {\n\t\t\t\tr *= r;\n\t\t\t} else if (pw === 2) {\n\t\t\t\tr *= r * r;\n\t\t\t} else if (pw === 3) {\n\t\t\t\tr *= r * r * r;\n\t\t\t} else if (pw === 4) {\n\t\t\t\tr *= r * r * r * r;\n\t\t\t}\n\t\t\treturn (t === 1) ? 1 - r : (t === 2) ? r : (p < 0.5) ? r / 2 : 1 - (r / 2);\n\t\t};\n\n\t\t//create all the standard eases like Linear, Quad, Cubic, Quart, Quint, Strong, Power0, Power1, Power2, Power3, and Power4 (each with easeIn, easeOut, and easeInOut)\n\t\ta = [\"Linear\",\"Quad\",\"Cubic\",\"Quart\",\"Quint,Strong\"];\n\t\ti = a.length;\n\t\twhile (--i > -1) {\n\t\t\tp = a[i]+\",Power\"+i;\n\t\t\t_easeReg(new Ease(null,null,1,i), p, \"easeOut\", true);\n\t\t\t_easeReg(new Ease(null,null,2,i), p, \"easeIn\" + ((i === 0) ? \",easeNone\" : \"\"));\n\t\t\t_easeReg(new Ease(null,null,3,i), p, \"easeInOut\");\n\t\t}\n\t\t_easeMap.linear = gs.easing.Linear.easeIn;\n\t\t_easeMap.swing = gs.easing.Quad.easeInOut; //for jQuery folks\n\n\n/*\n * ----------------------------------------------------------------\n * EventDispatcher\n * ----------------------------------------------------------------\n */\n\t\tvar EventDispatcher = _class(\"events.EventDispatcher\", function(target) {\n\t\t\tthis._listeners = {};\n\t\t\tthis._eventTarget = target || this;\n\t\t});\n\t\tp = EventDispatcher.prototype;\n\n\t\tp.addEventListener = function(type, callback, scope, useParam, priority) {\n\t\t\tpriority = priority || 0;\n\t\t\tvar list = this._listeners[type],\n\t\t\t\tindex = 0,\n\t\t\t\tlistener, i;\n\t\t\tif (this === _ticker && !_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (list == null) {\n\t\t\t\tthis._listeners[type] = list = [];\n\t\t\t}\n\t\t\ti = list.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tlistener = list[i];\n\t\t\t\tif (listener.c === callback && listener.s === scope) {\n\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t} else if (index === 0 && listener.pr < priority) {\n\t\t\t\t\tindex = i + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist.splice(index, 0, {c:callback, s:scope, up:useParam, pr:priority});\n\t\t};\n\n\t\tp.removeEventListener = function(type, callback) {\n\t\t\tvar list = this._listeners[type], i;\n\t\t\tif (list) {\n\t\t\t\ti = list.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (list[i].c === callback) {\n\t\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp.dispatchEvent = function(type) {\n\t\t\tvar list = this._listeners[type],\n\t\t\t\ti, t, listener;\n\t\t\tif (list) {\n\t\t\t\ti = list.length;\n\t\t\t\tif (i > 1) {\n\t\t\t\t\tlist = list.slice(0); //in case addEventListener() is called from within a listener/callback (otherwise the index could change, resulting in a skip)\n\t\t\t\t}\n\t\t\t\tt = this._eventTarget;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tlistener = list[i];\n\t\t\t\t\tif (listener) {\n\t\t\t\t\t\tif (listener.up) {\n\t\t\t\t\t\t\tlistener.c.call(listener.s || t, {type:type, target:t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlistener.c.call(listener.s || t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\n/*\n * ----------------------------------------------------------------\n * Ticker\n * ----------------------------------------------------------------\n */\n \t\tvar _reqAnimFrame = window.requestAnimationFrame,\n\t\t\t_cancelAnimFrame = window.cancelAnimationFrame,\n\t\t\t_getTime = Date.now || function() {return new Date().getTime();},\n\t\t\t_lastUpdate = _getTime();\n\n\t\t//now try to determine the requestAnimationFrame and cancelAnimationFrame functions and if none are found, we'll use a setTimeout()/clearTimeout() polyfill.\n\t\ta = [\"ms\",\"moz\",\"webkit\",\"o\"];\n\t\ti = a.length;\n\t\twhile (--i > -1 && !_reqAnimFrame) {\n\t\t\t_reqAnimFrame = window[a[i] + \"RequestAnimationFrame\"];\n\t\t\t_cancelAnimFrame = window[a[i] + \"CancelAnimationFrame\"] || window[a[i] + \"CancelRequestAnimationFrame\"];\n\t\t}\n\n\t\t_class(\"Ticker\", function(fps, useRAF) {\n\t\t\tvar _self = this,\n\t\t\t\t_startTime = _getTime(),\n\t\t\t\t_useRAF = (useRAF !== false && _reqAnimFrame) ? \"auto\" : false,\n\t\t\t\t_lagThreshold = 500,\n\t\t\t\t_adjustedLag = 33,\n\t\t\t\t_tickWord = \"tick\", //helps reduce gc burden\n\t\t\t\t_fps, _req, _id, _gap, _nextTime,\n\t\t\t\t_tick = function(manual) {\n\t\t\t\t\tvar elapsed = _getTime() - _lastUpdate,\n\t\t\t\t\t\toverlap, dispatch;\n\t\t\t\t\tif (elapsed > _lagThreshold) {\n\t\t\t\t\t\t_startTime += elapsed - _adjustedLag;\n\t\t\t\t\t}\n\t\t\t\t\t_lastUpdate += elapsed;\n\t\t\t\t\t_self.time = (_lastUpdate - _startTime) / 1000;\n\t\t\t\t\toverlap = _self.time - _nextTime;\n\t\t\t\t\tif (!_fps || overlap > 0 || manual === true) {\n\t\t\t\t\t\t_self.frame++;\n\t\t\t\t\t\t_nextTime += overlap + (overlap >= _gap ? 0.004 : _gap - overlap);\n\t\t\t\t\t\tdispatch = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (manual !== true) { //make sure the request is made before we dispatch the \"tick\" event so that timing is maintained. Otherwise, if processing the \"tick\" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.\n\t\t\t\t\t\t_id = _req(_tick);\n\t\t\t\t\t}\n\t\t\t\t\tif (dispatch) {\n\t\t\t\t\t\t_self.dispatchEvent(_tickWord);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\tEventDispatcher.call(_self);\n\t\t\t_self.time = _self.frame = 0;\n\t\t\t_self.tick = function() {\n\t\t\t\t_tick(true);\n\t\t\t};\n\n\t\t\t_self.lagSmoothing = function(threshold, adjustedLag) {\n\t\t\t\tif (!arguments.length) { //if lagSmoothing() is called with no arguments, treat it like a getter that returns a boolean indicating if it's enabled or not. This is purposely undocumented and is for internal use.\n\t\t\t\t\treturn (_lagThreshold < 1 / _tinyNum);\n\t\t\t\t}\n\t\t\t\t_lagThreshold = threshold || (1 / _tinyNum); //zero should be interpreted as basically unlimited\n\t\t\t\t_adjustedLag = Math.min(adjustedLag, _lagThreshold, 0);\n\t\t\t};\n\n\t\t\t_self.sleep = function() {\n\t\t\t\tif (_id == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!_useRAF || !_cancelAnimFrame) {\n\t\t\t\t\tclearTimeout(_id);\n\t\t\t\t} else {\n\t\t\t\t\t_cancelAnimFrame(_id);\n\t\t\t\t}\n\t\t\t\t_req = _emptyFunc;\n\t\t\t\t_id = null;\n\t\t\t\tif (_self === _ticker) {\n\t\t\t\t\t_tickerActive = false;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t_self.wake = function(seamless) {\n\t\t\t\tif (_id !== null) {\n\t\t\t\t\t_self.sleep();\n\t\t\t\t} else if (seamless) {\n\t\t\t\t\t_startTime += -_lastUpdate + (_lastUpdate = _getTime());\n\t\t\t\t} else if (_self.frame > 10) { //don't trigger lagSmoothing if we're just waking up, and make sure that at least 10 frames have elapsed because of the iOS bug that we work around below with the 1.5-second setTimout().\n\t\t\t\t\t_lastUpdate = _getTime() - _lagThreshold + 5;\n\t\t\t\t}\n\t\t\t\t_req = (_fps === 0) ? _emptyFunc : (!_useRAF || !_reqAnimFrame) ? function(f) { return setTimeout(f, ((_nextTime - _self.time) * 1000 + 1) | 0); } : _reqAnimFrame;\n\t\t\t\tif (_self === _ticker) {\n\t\t\t\t\t_tickerActive = true;\n\t\t\t\t}\n\t\t\t\t_tick(2);\n\t\t\t};\n\n\t\t\t_self.fps = function(value) {\n\t\t\t\tif (!arguments.length) {\n\t\t\t\t\treturn _fps;\n\t\t\t\t}\n\t\t\t\t_fps = value;\n\t\t\t\t_gap = 1 / (_fps || 60);\n\t\t\t\t_nextTime = this.time + _gap;\n\t\t\t\t_self.wake();\n\t\t\t};\n\n\t\t\t_self.useRAF = function(value) {\n\t\t\t\tif (!arguments.length) {\n\t\t\t\t\treturn _useRAF;\n\t\t\t\t}\n\t\t\t\t_self.sleep();\n\t\t\t\t_useRAF = value;\n\t\t\t\t_self.fps(_fps);\n\t\t\t};\n\t\t\t_self.fps(fps);\n\n\t\t\t//a bug in iOS 6 Safari occasionally prevents the requestAnimationFrame from working initially, so we use a 1.5-second timeout that automatically falls back to setTimeout() if it senses this condition.\n\t\t\tsetTimeout(function() {\n\t\t\t\tif (_useRAF === \"auto\" && _self.frame < 5 && (_doc || {}).visibilityState !== \"hidden\") {\n\t\t\t\t\t_self.useRAF(false);\n\t\t\t\t}\n\t\t\t}, 1500);\n\t\t});\n\n\t\tp = gs.Ticker.prototype = new gs.events.EventDispatcher();\n\t\tp.constructor = gs.Ticker;\n\n\n/*\n * ----------------------------------------------------------------\n * Animation\n * ----------------------------------------------------------------\n */\n\t\tvar Animation = _class(\"core.Animation\", function(duration, vars) {\n\t\t\t\tthis.vars = vars = vars || {};\n\t\t\t\tthis._duration = this._totalDuration = duration || 0;\n\t\t\t\tthis._delay = Number(vars.delay) || 0;\n\t\t\t\tthis._timeScale = 1;\n\t\t\t\tthis._active = (vars.immediateRender === true);\n\t\t\t\tthis.data = vars.data;\n\t\t\t\tthis._reversed = (vars.reversed === true);\n\n\t\t\t\tif (!_rootTimeline) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!_tickerActive) { //some browsers (like iOS 6 Safari) shut down JavaScript execution when the tab is disabled and they [occasionally] neglect to start up requestAnimationFrame again when returning - this code ensures that the engine starts up again properly.\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\n\t\t\t\tvar tl = this.vars.useFrames ? _rootFramesTimeline : _rootTimeline;\n\t\t\t\ttl.add(this, tl._time);\n\n\t\t\t\tif (this.vars.paused) {\n\t\t\t\t\tthis.paused(true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t_ticker = Animation.ticker = new gs.Ticker();\n\t\tp = Animation.prototype;\n\t\tp._dirty = p._gc = p._initted = p._paused = false;\n\t\tp._totalTime = p._time = 0;\n\t\tp._rawPrevTime = -1;\n\t\tp._next = p._last = p._onUpdate = p._timeline = p.timeline = null;\n\t\tp._paused = false;\n\n\n\t\t//some browsers (like iOS) occasionally drop the requestAnimationFrame event when the user switches to a different tab and then comes back again, so we use a 2-second setTimeout() to sense if/when that condition occurs and then wake() the ticker.\n\t\tvar _checkTimeout = function() {\n\t\t\t\tif (_tickerActive && _getTime() - _lastUpdate > 2000 && ((_doc || {}).visibilityState !== \"hidden\" || !_ticker.lagSmoothing())) { //note: if the tab is hidden, we should still wake if lagSmoothing has been disabled.\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\t\t\t\tvar t = setTimeout(_checkTimeout, 2000);\n\t\t\t\tif (t.unref) {\n\t\t\t\t\t// allows a node process to exit even if the timeout’s callback hasn't been invoked. Without it, the node process could hang as this function is called every two seconds.\n\t\t\t\t\tt.unref();\n\t\t\t\t}\n\t\t\t};\n\t\t_checkTimeout();\n\n\n\t\tp.play = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek(from, suppressEvents);\n\t\t\t}\n\t\t\treturn this.reversed(false).paused(false);\n\t\t};\n\n\t\tp.pause = function(atTime, suppressEvents) {\n\t\t\tif (atTime != null) {\n\t\t\t\tthis.seek(atTime, suppressEvents);\n\t\t\t}\n\t\t\treturn this.paused(true);\n\t\t};\n\n\t\tp.resume = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek(from, suppressEvents);\n\t\t\t}\n\t\t\treturn this.paused(false);\n\t\t};\n\n\t\tp.seek = function(time, suppressEvents) {\n\t\t\treturn this.totalTime(Number(time), suppressEvents !== false);\n\t\t};\n\n\t\tp.restart = function(includeDelay, suppressEvents) {\n\t\t\treturn this.reversed(false).paused(false).totalTime(includeDelay ? -this._delay : 0, (suppressEvents !== false), true);\n\t\t};\n\n\t\tp.reverse = function(from, suppressEvents) {\n\t\t\tif (from != null) {\n\t\t\t\tthis.seek((from || this.totalDuration()), suppressEvents);\n\t\t\t}\n\t\t\treturn this.reversed(true).paused(false);\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\t//stub - we override this method in subclasses.\n\t\t};\n\n\t\tp.invalidate = function() {\n\t\t\tthis._time = this._totalTime = 0;\n\t\t\tthis._initted = this._gc = false;\n\t\t\tthis._rawPrevTime = -1;\n\t\t\tif (this._gc || !this.timeline) {\n\t\t\t\tthis._enabled(true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.isActive = function() {\n\t\t\tvar tl = this._timeline, //the 2 root timelines won't have a _timeline; they're always active.\n\t\t\t\tstartTime = this._startTime,\n\t\t\t\trawTime;\n\t\t\treturn (!tl || (!this._gc && !this._paused && tl.isActive() && (rawTime = tl.rawTime(true)) >= startTime && rawTime < startTime + this.totalDuration() / this._timeScale - 0.0000001));\n\t\t};\n\n\t\tp._enabled = function (enabled, ignoreTimeline) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tthis._gc = !enabled;\n\t\t\tthis._active = this.isActive();\n\t\t\tif (ignoreTimeline !== true) {\n\t\t\t\tif (enabled && !this.timeline) {\n\t\t\t\t\tthis._timeline.add(this, this._startTime - this._delay);\n\t\t\t\t} else if (!enabled && this.timeline) {\n\t\t\t\t\tthis._timeline._remove(this, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\n\t\tp._kill = function(vars, target) {\n\t\t\treturn this._enabled(false, false);\n\t\t};\n\n\t\tp.kill = function(vars, target) {\n\t\t\tthis._kill(vars, target);\n\t\t\treturn this;\n\t\t};\n\n\t\tp._uncache = function(includeSelf) {\n\t\t\tvar tween = includeSelf ? this : this.timeline;\n\t\t\twhile (tween) {\n\t\t\t\ttween._dirty = true;\n\t\t\t\ttween = tween.timeline;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._swapSelfInParams = function(params) {\n\t\t\tvar i = params.length,\n\t\t\t\tcopy = params.concat();\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (params[i] === \"{self}\") {\n\t\t\t\t\tcopy[i] = this;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn copy;\n\t\t};\n\n\t\tp._callback = function(type) {\n\t\t\tvar v = this.vars,\n\t\t\t\tcallback = v[type],\n\t\t\t\tparams = v[type + \"Params\"],\n\t\t\t\tscope = v[type + \"Scope\"] || v.callbackScope || this,\n\t\t\t\tl = params ? params.length : 0;\n\t\t\tswitch (l) { //speed optimization; call() is faster than apply() so use it when there are only a few parameters (which is by far most common). Previously we simply did var v = this.vars; v[type].apply(v[type + \"Scope\"] || v.callbackScope || this, v[type + \"Params\"] || _blankArray);\n\t\t\t\tcase 0: callback.call(scope); break;\n\t\t\t\tcase 1: callback.call(scope, params[0]); break;\n\t\t\t\tcase 2: callback.call(scope, params[0], params[1]); break;\n\t\t\t\tdefault: callback.apply(scope, params);\n\t\t\t}\n\t\t};\n\n//----Animation getters/setters --------------------------------------------------------\n\n\t\tp.eventCallback = function(type, callback, params, scope) {\n\t\t\tif ((type || \"\").substr(0,2) === \"on\") {\n\t\t\t\tvar v = this.vars;\n\t\t\t\tif (arguments.length === 1) {\n\t\t\t\t\treturn v[type];\n\t\t\t\t}\n\t\t\t\tif (callback == null) {\n\t\t\t\t\tdelete v[type];\n\t\t\t\t} else {\n\t\t\t\t\tv[type] = callback;\n\t\t\t\t\tv[type + \"Params\"] = (_isArray(params) && params.join(\"\").indexOf(\"{self}\") !== -1) ? this._swapSelfInParams(params) : params;\n\t\t\t\t\tv[type + \"Scope\"] = scope;\n\t\t\t\t}\n\t\t\t\tif (type === \"onUpdate\") {\n\t\t\t\t\tthis._onUpdate = callback;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.delay = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._delay;\n\t\t\t}\n\t\t\tif (this._timeline.smoothChildTiming) {\n\t\t\t\tthis.startTime( this._startTime + value - this._delay );\n\t\t\t}\n\t\t\tthis._delay = value;\n\t\t\treturn this;\n\t\t};\n\n\t\tp.duration = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\tthis._dirty = false;\n\t\t\t\treturn this._duration;\n\t\t\t}\n\t\t\tthis._duration = this._totalDuration = value;\n\t\t\tthis._uncache(true); //true in case it's a TweenMax or TimelineMax that has a repeat - we'll need to refresh the totalDuration.\n\t\t\tif (this._timeline.smoothChildTiming) if (this._time > 0) if (this._time < this._duration) if (value !== 0) {\n\t\t\t\tthis.totalTime(this._totalTime * (value / this._duration), true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.totalDuration = function(value) {\n\t\t\tthis._dirty = false;\n\t\t\treturn (!arguments.length) ? this._totalDuration : this.duration(value);\n\t\t};\n\n\t\tp.time = function(value, suppressEvents) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._time;\n\t\t\t}\n\t\t\tif (this._dirty) {\n\t\t\t\tthis.totalDuration();\n\t\t\t}\n\t\t\treturn this.totalTime((value > this._duration) ? this._duration : value, suppressEvents);\n\t\t};\n\n\t\tp.totalTime = function(time, suppressEvents, uncapped) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._totalTime;\n\t\t\t}\n\t\t\tif (this._timeline) {\n\t\t\t\tif (time < 0 && !uncapped) {\n\t\t\t\t\ttime += this.totalDuration();\n\t\t\t\t}\n\t\t\t\tif (this._timeline.smoothChildTiming) {\n\t\t\t\t\tif (this._dirty) {\n\t\t\t\t\t\tthis.totalDuration();\n\t\t\t\t\t}\n\t\t\t\t\tvar totalDuration = this._totalDuration,\n\t\t\t\t\t\ttl = this._timeline;\n\t\t\t\t\tif (time > totalDuration && !uncapped) {\n\t\t\t\t\t\ttime = totalDuration;\n\t\t\t\t\t}\n\t\t\t\t\tthis._startTime = (this._paused ? this._pauseTime : tl._time) - ((!this._reversed ? time : totalDuration - time) / this._timeScale);\n\t\t\t\t\tif (!tl._dirty) { //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.\n\t\t\t\t\t\tthis._uncache(false);\n\t\t\t\t\t}\n\t\t\t\t\t//in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The startTime of that child would get pushed out, but one of the ancestors may have completed.\n\t\t\t\t\tif (tl._timeline) {\n\t\t\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\t\t\tif (tl._timeline._time !== (tl._startTime + tl._totalTime) / tl._timeScale) {\n\t\t\t\t\t\t\t\ttl.totalTime(tl._totalTime, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this._gc) {\n\t\t\t\t\tthis._enabled(true, false);\n\t\t\t\t}\n\t\t\t\tif (this._totalTime !== time || this._duration === 0) {\n\t\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t\tthis.render(time, suppressEvents, false);\n\t\t\t\t\tif (_lazyTweens.length) { //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.\n\t\t\t\t\t\t_lazyRender();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.progress = p.totalProgress = function(value, suppressEvents) {\n\t\t\tvar duration = this.duration();\n\t\t\treturn (!arguments.length) ? (duration ? this._time / duration : this.ratio) : this.totalTime(duration * value, suppressEvents);\n\t\t};\n\n\t\tp.startTime = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._startTime;\n\t\t\t}\n\t\t\tif (value !== this._startTime) {\n\t\t\t\tthis._startTime = value;\n\t\t\t\tif (this.timeline) if (this.timeline._sortChildren) {\n\t\t\t\t\tthis.timeline.add(this, value - this._delay); //ensures that any necessary re-sequencing of Animations in the timeline occurs to make sure the rendering order is correct.\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.endTime = function(includeRepeats) {\n\t\t\treturn this._startTime + ((includeRepeats != false) ? this.totalDuration() : this.duration()) / this._timeScale;\n\t\t};\n\n\t\tp.timeScale = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._timeScale;\n\t\t\t}\n\t\t\tvar pauseTime, t;\n\t\t\tvalue = value || _tinyNum; //can't allow zero because it'll throw the math off\n\t\t\tif (this._timeline && this._timeline.smoothChildTiming) {\n\t\t\t\tpauseTime = this._pauseTime;\n\t\t\t\tt = (pauseTime || pauseTime === 0) ? pauseTime : this._timeline.totalTime();\n\t\t\t\tthis._startTime = t - ((t - this._startTime) * this._timeScale / value);\n\t\t\t}\n\t\t\tthis._timeScale = value;\n\t\t\tt = this.timeline;\n\t\t\twhile (t && t.timeline) { //must update the duration/totalDuration of all ancestor timelines immediately in case in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.\n\t\t\t\tt._dirty = true;\n\t\t\t\tt.totalDuration();\n\t\t\t\tt = t.timeline;\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.reversed = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._reversed;\n\t\t\t}\n\t\t\tif (value != this._reversed) {\n\t\t\t\tthis._reversed = value;\n\t\t\t\tthis.totalTime(((this._timeline && !this._timeline.smoothChildTiming) ? this.totalDuration() - this._totalTime : this._totalTime), true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.paused = function(value) {\n\t\t\tif (!arguments.length) {\n\t\t\t\treturn this._paused;\n\t\t\t}\n\t\t\tvar tl = this._timeline,\n\t\t\t\traw, elapsed;\n\t\t\tif (value != this._paused) if (tl) {\n\t\t\t\tif (!_tickerActive && !value) {\n\t\t\t\t\t_ticker.wake();\n\t\t\t\t}\n\t\t\t\traw = tl.rawTime();\n\t\t\t\telapsed = raw - this._pauseTime;\n\t\t\t\tif (!value && tl.smoothChildTiming) {\n\t\t\t\t\tthis._startTime += elapsed;\n\t\t\t\t\tthis._uncache(false);\n\t\t\t\t}\n\t\t\t\tthis._pauseTime = value ? raw : null;\n\t\t\t\tthis._paused = value;\n\t\t\t\tthis._active = this.isActive();\n\t\t\t\tif (!value && elapsed !== 0 && this._initted && this.duration()) {\n\t\t\t\t\traw = tl.smoothChildTiming ? this._totalTime : (raw - this._startTime) / this._timeScale;\n\t\t\t\t\tthis.render(raw, (raw === this._totalTime), true); //in case the target's properties changed via some other tween or manual update by the user, we should force a render.\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._gc && !value) {\n\t\t\t\tthis._enabled(true, false);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\n/*\n * ----------------------------------------------------------------\n * SimpleTimeline\n * ----------------------------------------------------------------\n */\n\t\tvar SimpleTimeline = _class(\"core.SimpleTimeline\", function(vars) {\n\t\t\tAnimation.call(this, 0, vars);\n\t\t\tthis.autoRemoveChildren = this.smoothChildTiming = true;\n\t\t});\n\n\t\tp = SimpleTimeline.prototype = new Animation();\n\t\tp.constructor = SimpleTimeline;\n\t\tp.kill()._gc = false;\n\t\tp._first = p._last = p._recent = null;\n\t\tp._sortChildren = false;\n\n\t\tp.add = p.insert = function(child, position, align, stagger) {\n\t\t\tvar prevTween, st;\n\t\t\tchild._startTime = Number(position || 0) + child._delay;\n\t\t\tif (child._paused) if (this !== child._timeline) { //we only adjust the _pauseTime if it wasn't in this timeline already. Remember, sometimes a tween will be inserted again into the same timeline when its startTime is changed so that the tweens in the TimelineLite/Max are re-ordered properly in the linked list (so everything renders in the proper order).\n\t\t\t\tchild._pauseTime = this.rawTime() - (child._timeline.rawTime() - child._pauseTime);\n\t\t\t}\n\t\t\tif (child.timeline) {\n\t\t\t\tchild.timeline._remove(child, true); //removes from existing timeline so that it can be properly added to this one.\n\t\t\t}\n\t\t\tchild.timeline = child._timeline = this;\n\t\t\tif (child._gc) {\n\t\t\t\tchild._enabled(true, true);\n\t\t\t}\n\t\t\tprevTween = this._last;\n\t\t\tif (this._sortChildren) {\n\t\t\t\tst = child._startTime;\n\t\t\t\twhile (prevTween && prevTween._startTime > st) {\n\t\t\t\t\tprevTween = prevTween._prev;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (prevTween) {\n\t\t\t\tchild._next = prevTween._next;\n\t\t\t\tprevTween._next = child;\n\t\t\t} else {\n\t\t\t\tchild._next = this._first;\n\t\t\t\tthis._first = child;\n\t\t\t}\n\t\t\tif (child._next) {\n\t\t\t\tchild._next._prev = child;\n\t\t\t} else {\n\t\t\t\tthis._last = child;\n\t\t\t}\n\t\t\tchild._prev = prevTween;\n\t\t\tthis._recent = child;\n\t\t\tif (this._timeline) {\n\t\t\t\tthis._uncache(true);\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._remove = function(tween, skipDisable) {\n\t\t\tif (tween.timeline === this) {\n\t\t\t\tif (!skipDisable) {\n\t\t\t\t\ttween._enabled(false, true);\n\t\t\t\t}\n\n\t\t\t\tif (tween._prev) {\n\t\t\t\t\ttween._prev._next = tween._next;\n\t\t\t\t} else if (this._first === tween) {\n\t\t\t\t\tthis._first = tween._next;\n\t\t\t\t}\n\t\t\t\tif (tween._next) {\n\t\t\t\t\ttween._next._prev = tween._prev;\n\t\t\t\t} else if (this._last === tween) {\n\t\t\t\t\tthis._last = tween._prev;\n\t\t\t\t}\n\t\t\t\ttween._next = tween._prev = tween.timeline = null;\n\t\t\t\tif (tween === this._recent) {\n\t\t\t\t\tthis._recent = this._last;\n\t\t\t\t}\n\n\t\t\t\tif (this._timeline) {\n\t\t\t\t\tthis._uncache(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tvar tween = this._first,\n\t\t\t\tnext;\n\t\t\tthis._totalTime = this._time = this._rawPrevTime = time;\n\t\t\twhile (tween) {\n\t\t\t\tnext = tween._next; //record it here because the value could change after rendering...\n\t\t\t\tif (tween._active || (time >= tween._startTime && !tween._paused && !tween._gc)) {\n\t\t\t\t\tif (!tween._reversed) {\n\t\t\t\t\t\ttween.render((time - tween._startTime) * tween._timeScale, suppressEvents, force);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttween.render(((!tween._dirty) ? tween._totalDuration : tween.totalDuration()) - ((time - tween._startTime) * tween._timeScale), suppressEvents, force);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttween = next;\n\t\t\t}\n\t\t};\n\n\t\tp.rawTime = function() {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\treturn this._totalTime;\n\t\t};\n\n/*\n * ----------------------------------------------------------------\n * TweenLite\n * ----------------------------------------------------------------\n */\n\t\tvar TweenLite = _class(\"TweenLite\", function(target, duration, vars) {\n\t\t\t\tAnimation.call(this, duration, vars);\n\t\t\t\tthis.render = TweenLite.prototype.render; //speed optimization (avoid prototype lookup on this \"hot\" method)\n\n\t\t\t\tif (target == null) {\n\t\t\t\t\tthrow \"Cannot tween a null target.\";\n\t\t\t\t}\n\n\t\t\t\tthis.target = target = (typeof(target) !== \"string\") ? target : TweenLite.selector(target) || target;\n\n\t\t\t\tvar isSelector = (target.jquery || (target.length && target !== window && target[0] && (target[0] === window || (target[0].nodeType && target[0].style && !target.nodeType)))),\n\t\t\t\t\toverwrite = this.vars.overwrite,\n\t\t\t\t\ti, targ, targets;\n\n\t\t\t\tthis._overwrite = overwrite = (overwrite == null) ? _overwriteLookup[TweenLite.defaultOverwrite] : (typeof(overwrite) === \"number\") ? overwrite >> 0 : _overwriteLookup[overwrite];\n\n\t\t\t\tif ((isSelector || target instanceof Array || (target.push && _isArray(target))) && typeof(target[0]) !== \"number\") {\n\t\t\t\t\tthis._targets = targets = _slice(target);  //don't use Array.prototype.slice.call(target, 0) because that doesn't work in IE8 with a NodeList that's returned by querySelectorAll()\n\t\t\t\t\tthis._propLookup = [];\n\t\t\t\t\tthis._siblings = [];\n\t\t\t\t\tfor (i = 0; i < targets.length; i++) {\n\t\t\t\t\t\ttarg = targets[i];\n\t\t\t\t\t\tif (!targ) {\n\t\t\t\t\t\t\ttargets.splice(i--, 1);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (typeof(targ) === \"string\") {\n\t\t\t\t\t\t\ttarg = targets[i--] = TweenLite.selector(targ); //in case it's an array of strings\n\t\t\t\t\t\t\tif (typeof(targ) === \"string\") {\n\t\t\t\t\t\t\t\ttargets.splice(i+1, 1); //to avoid an endless loop (can't imagine why the selector would return a string, but just in case)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (targ.length && targ !== window && targ[0] && (targ[0] === window || (targ[0].nodeType && targ[0].style && !targ.nodeType))) { //in case the user is passing in an array of selector objects (like jQuery objects), we need to check one more level and pull things out if necessary. Also note that <select> elements pass all the criteria regarding length and the first child having style, so we must also check to ensure the target isn't an HTML node itself.\n\t\t\t\t\t\t\ttargets.splice(i--, 1);\n\t\t\t\t\t\t\tthis._targets = targets = targets.concat(_slice(targ));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._siblings[i] = _register(targ, this, false);\n\t\t\t\t\t\tif (overwrite === 1) if (this._siblings[i].length > 1) {\n\t\t\t\t\t\t\t_applyOverwrite(targ, this, null, 1, this._siblings[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tthis._propLookup = {};\n\t\t\t\t\tthis._siblings = _register(target, this, false);\n\t\t\t\t\tif (overwrite === 1) if (this._siblings.length > 1) {\n\t\t\t\t\t\t_applyOverwrite(target, this, null, 1, this._siblings);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.vars.immediateRender || (duration === 0 && this._delay === 0 && this.vars.immediateRender !== false)) {\n\t\t\t\t\tthis._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n\t\t\t\t\tthis.render(Math.min(0, -this._delay)); //in case delay is negative\n\t\t\t\t}\n\t\t\t}, true),\n\t\t\t_isSelector = function(v) {\n\t\t\t\treturn (v && v.length && v !== window && v[0] && (v[0] === window || (v[0].nodeType && v[0].style && !v.nodeType))); //we cannot check \"nodeType\" if the target is window from within an iframe, otherwise it will trigger a security error in some browsers like Firefox.\n\t\t\t},\n\t\t\t_autoCSS = function(vars, target) {\n\t\t\t\tvar css = {},\n\t\t\t\t\tp;\n\t\t\t\tfor (p in vars) {\n\t\t\t\t\tif (!_reservedProps[p] && (!(p in target) || p === \"transform\" || p === \"x\" || p === \"y\" || p === \"width\" || p === \"height\" || p === \"className\" || p === \"border\") && (!_plugins[p] || (_plugins[p] && _plugins[p]._autoCSS))) { //note: <img> elements contain read-only \"x\" and \"y\" properties. We should also prioritize editing css width/height rather than the element's properties.\n\t\t\t\t\t\tcss[p] = vars[p];\n\t\t\t\t\t\tdelete vars[p];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvars.css = css;\n\t\t\t};\n\n\t\tp = TweenLite.prototype = new Animation();\n\t\tp.constructor = TweenLite;\n\t\tp.kill()._gc = false;\n\n//----TweenLite defaults, overwrite management, and root updates ----------------------------------------------------\n\n\t\tp.ratio = 0;\n\t\tp._firstPT = p._targets = p._overwrittenProps = p._startAt = null;\n\t\tp._notifyPluginsOfEnabled = p._lazy = false;\n\n\t\tTweenLite.version = \"2.0.1\";\n\t\tTweenLite.defaultEase = p._ease = new Ease(null, null, 1, 1);\n\t\tTweenLite.defaultOverwrite = \"auto\";\n\t\tTweenLite.ticker = _ticker;\n\t\tTweenLite.autoSleep = 120;\n\t\tTweenLite.lagSmoothing = function(threshold, adjustedLag) {\n\t\t\t_ticker.lagSmoothing(threshold, adjustedLag);\n\t\t};\n\n\t\tTweenLite.selector = window.$ || window.jQuery || function(e) {\n\t\t\tvar selector = window.$ || window.jQuery;\n\t\t\tif (selector) {\n\t\t\t\tTweenLite.selector = selector;\n\t\t\t\treturn selector(e);\n\t\t\t}\n\t\t\tif (!_doc) { //in some dev environments (like Angular 6), GSAP gets loaded before the document is defined! So re-query it here if/when necessary.\n\t\t\t\t_doc = window.document;\n\t\t\t}\n\t\t\treturn (!_doc) ? e : (_doc.querySelectorAll ? _doc.querySelectorAll(e) : _doc.getElementById((e.charAt(0) === \"#\") ? e.substr(1) : e));\n\t\t};\n\n\t\tvar _lazyTweens = [],\n\t\t\t_lazyLookup = {},\n\t\t\t_numbersExp = /(?:(-|-=|\\+=)?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[0-9]/ig,\n\t\t\t_relExp = /[\\+-]=-?[\\.\\d]/,\n\t\t\t//_nonNumbersExp = /(?:([\\-+](?!(\\d|=)))|[^\\d\\-+=e]|(e(?![\\-+][\\d])))+/ig,\n\t\t\t_setRatio = function(v) {\n\t\t\t\tvar pt = this._firstPT,\n\t\t\t\t\tmin = 0.000001,\n\t\t\t\t\tval;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tval = !pt.blob ? pt.c * v + pt.s : (v === 1 && this.end != null) ? this.end : v ? this.join(\"\") : this.start;\n\t\t\t\t\tif (pt.m) {\n\t\t\t\t\t\tval = pt.m.call(this._tween, val, this._target || pt.t, this._tween);\n\t\t\t\t\t} else if (val < min) if (val > -min && !pt.blob) { //prevents issues with converting very small numbers to strings in the browser\n\t\t\t\t\t\tval = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (!pt.f) {\n\t\t\t\t\t\tpt.t[pt.p] = val;\n\t\t\t\t\t} else if (pt.fp) {\n\t\t\t\t\t\tpt.t[pt.p](pt.fp, val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.t[pt.p](val);\n\t\t\t\t\t}\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t},\n\t\t\t//compares two strings (start/end), finds the numbers that are different and spits back an array representing the whole value but with the changing values isolated as elements. For example, \"rgb(0,0,0)\" and \"rgb(100,50,0)\" would become [\"rgb(\", 0, \",\", 50, \",0)\"]. Notice it merges the parts that are identical (performance optimization). The array also has a linked list of PropTweens attached starting with _firstPT that contain the tweening data (t, p, s, c, f, etc.). It also stores the starting value as a \"start\" property so that we can revert to it if/when necessary, like when a tween rewinds fully. If the quantity of numbers differs between the start and end, it will always prioritize the end value(s). The pt parameter is optional - it's for a PropTween that will be appended to the end of the linked list and is typically for actually setting the value after all of the elements have been updated (with array.join(\"\")).\n\t\t\t_blobDif = function(start, end, filter, pt) {\n\t\t\t\tvar a = [],\n\t\t\t\t\tcharIndex = 0,\n\t\t\t\t\ts = \"\",\n\t\t\t\t\tcolor = 0,\n\t\t\t\t\tstartNums, endNums, num, i, l, nonNumbers, currentNum;\n\t\t\t\ta.start = start;\n\t\t\t\ta.end = end;\n\t\t\t\tstart = a[0] = start + \"\"; //ensure values are strings\n\t\t\t\tend = a[1] = end + \"\";\n\t\t\t\tif (filter) {\n\t\t\t\t\tfilter(a); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.\n\t\t\t\t\tstart = a[0];\n\t\t\t\t\tend = a[1];\n\t\t\t\t}\n\t\t\t\ta.length = 0;\n\t\t\t\tstartNums = start.match(_numbersExp) || [];\n\t\t\t\tendNums = end.match(_numbersExp) || [];\n\t\t\t\tif (pt) {\n\t\t\t\t\tpt._next = null;\n\t\t\t\t\tpt.blob = 1;\n\t\t\t\t\ta._firstPT = a._applyPT = pt; //apply last in the linked list (which means inserting it first)\n\t\t\t\t}\n\t\t\t\tl = endNums.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tcurrentNum = endNums[i];\n\t\t\t\t\tnonNumbers = end.substr(charIndex, end.indexOf(currentNum, charIndex)-charIndex);\n\t\t\t\t\ts += (nonNumbers || !i) ? nonNumbers : \",\"; //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.\n\t\t\t\t\tcharIndex += nonNumbers.length;\n\t\t\t\t\tif (color) { //sense rgba() values and round them.\n\t\t\t\t\t\tcolor = (color + 1) % 5;\n\t\t\t\t\t} else if (nonNumbers.substr(-5) === \"rgba(\") {\n\t\t\t\t\t\tcolor = 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (currentNum === startNums[i] || startNums.length <= i) {\n\t\t\t\t\t\ts += currentNum;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (s) {\n\t\t\t\t\t\t\ta.push(s);\n\t\t\t\t\t\t\ts = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnum = parseFloat(startNums[i]);\n\t\t\t\t\t\ta.push(num);\n\t\t\t\t\t\ta._firstPT = {_next: a._firstPT, t:a, p: a.length-1, s:num, c:((currentNum.charAt(1) === \"=\") ? parseInt(currentNum.charAt(0) + \"1\", 10) * parseFloat(currentNum.substr(2)) : (parseFloat(currentNum) - num)) || 0, f:0, m:(color && color < 4) ? Math.round : 0};\n\t\t\t\t\t\t//note: we don't set _prev because we'll never need to remove individual PropTweens from this list.\n\t\t\t\t\t}\n\t\t\t\t\tcharIndex += currentNum.length;\n\t\t\t\t}\n\t\t\t\ts += end.substr(charIndex);\n\t\t\t\tif (s) {\n\t\t\t\t\ta.push(s);\n\t\t\t\t}\n\t\t\t\ta.setRatio = _setRatio;\n\t\t\t\tif (_relExp.test(end)) { //if the end string contains relative values, delete it so that on the final render (in _setRatio()), we don't actually set it to the string with += or -= characters (forces it to use the calculated value).\n\t\t\t\t\ta.end = null;\n\t\t\t\t}\n\t\t\t\treturn a;\n\t\t\t},\n\t\t\t//note: \"funcParam\" is only necessary for function-based getters/setters that require an extra parameter like getAttribute(\"width\") and setAttribute(\"width\", value). In this example, funcParam would be \"width\". Used by AttrPlugin for example.\n\t\t\t_addPropTween = function(target, prop, start, end, overwriteProp, mod, funcParam, stringFilter, index) {\n\t\t\t\tif (typeof(end) === \"function\") {\n\t\t\t\t\tend = end(index || 0, target);\n\t\t\t\t}\n\t\t\t\tvar type = typeof(target[prop]),\n\t\t\t\t\tgetterName = (type !== \"function\") ? \"\" : ((prop.indexOf(\"set\") || typeof(target[\"get\" + prop.substr(3)]) !== \"function\") ? prop : \"get\" + prop.substr(3)),\n\t\t\t\t\ts = (start !== \"get\") ? start : !getterName ? target[prop] : funcParam ? target[getterName](funcParam) : target[getterName](),\n\t\t\t\t\tisRelative = (typeof(end) === \"string\" && end.charAt(1) === \"=\"),\n\t\t\t\t\tpt = {t:target, p:prop, s:s, f:(type === \"function\"), pg:0, n:overwriteProp || prop, m:(!mod ? 0 : (typeof(mod) === \"function\") ? mod : Math.round), pr:0, c:isRelative ? parseInt(end.charAt(0) + \"1\", 10) * parseFloat(end.substr(2)) : (parseFloat(end) - s) || 0},\n\t\t\t\t\tblob;\n\n\t\t\t\tif (typeof(s) !== \"number\" || (typeof(end) !== \"number\" && !isRelative)) {\n\t\t\t\t\tif (funcParam || isNaN(s) || (!isRelative && isNaN(end)) || typeof(s) === \"boolean\" || typeof(end) === \"boolean\") {\n\t\t\t\t\t\t//a blob (string that has multiple numbers in it)\n\t\t\t\t\t\tpt.fp = funcParam;\n\t\t\t\t\t\tblob = _blobDif(s, (isRelative ? (parseFloat(pt.s) + pt.c) + (pt.s + \"\").replace(/[0-9\\-\\.]/g, \"\") : end), stringFilter || TweenLite.defaultStringFilter, pt);\n\t\t\t\t\t\tpt = {t: blob, p: \"setRatio\", s: 0, c: 1, f: 2, pg: 0, n: overwriteProp || prop, pr: 0, m: 0}; //\"2\" indicates it's a Blob property tween. Needed for RoundPropsPlugin for example.\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.s = parseFloat(s);\n\t\t\t\t\t\tif (!isRelative) {\n\t\t\t\t\t\t\tpt.c = (parseFloat(end) - pt.s) || 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pt.c) { //only add it to the linked list if there's a change.\n\t\t\t\t\tif ((pt._next = this._firstPT)) {\n\t\t\t\t\t\tpt._next._prev = pt;\n\t\t\t\t\t}\n\t\t\t\t\tthis._firstPT = pt;\n\t\t\t\t\treturn pt;\n\t\t\t\t}\n\t\t\t},\n\t\t\t_internals = TweenLite._internals = {isArray:_isArray, isSelector:_isSelector, lazyTweens:_lazyTweens, blobDif:_blobDif}, //gives us a way to expose certain private values to other GreenSock classes without contaminating tha main TweenLite object.\n\t\t\t_plugins = TweenLite._plugins = {},\n\t\t\t_tweenLookup = _internals.tweenLookup = {},\n\t\t\t_tweenLookupNum = 0,\n\t\t\t_reservedProps = _internals.reservedProps = {ease:1, delay:1, overwrite:1, onComplete:1, onCompleteParams:1, onCompleteScope:1, useFrames:1, runBackwards:1, startAt:1, onUpdate:1, onUpdateParams:1, onUpdateScope:1, onStart:1, onStartParams:1, onStartScope:1, onReverseComplete:1, onReverseCompleteParams:1, onReverseCompleteScope:1, onRepeat:1, onRepeatParams:1, onRepeatScope:1, easeParams:1, yoyo:1, immediateRender:1, repeat:1, repeatDelay:1, data:1, paused:1, reversed:1, autoCSS:1, lazy:1, onOverwrite:1, callbackScope:1, stringFilter:1, id:1, yoyoEase:1},\n\t\t\t_overwriteLookup = {none:0, all:1, auto:2, concurrent:3, allOnStart:4, preexisting:5, \"true\":1, \"false\":0},\n\t\t\t_rootFramesTimeline = Animation._rootFramesTimeline = new SimpleTimeline(),\n\t\t\t_rootTimeline = Animation._rootTimeline = new SimpleTimeline(),\n\t\t\t_nextGCFrame = 30,\n\t\t\t_lazyRender = _internals.lazyRender = function() {\n\t\t\t\tvar i = _lazyTweens.length,\n\t\t\t\t\ttween;\n\t\t\t\t_lazyLookup = {};\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\ttween = _lazyTweens[i];\n\t\t\t\t\tif (tween && tween._lazy !== false) {\n\t\t\t\t\t\ttween.render(tween._lazy[0], tween._lazy[1], true);\n\t\t\t\t\t\ttween._lazy = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_lazyTweens.length = 0;\n\t\t\t};\n\n\t\t_rootTimeline._startTime = _ticker.time;\n\t\t_rootFramesTimeline._startTime = _ticker.frame;\n\t\t_rootTimeline._active = _rootFramesTimeline._active = true;\n\t\tsetTimeout(_lazyRender, 1); //on some mobile devices, there isn't a \"tick\" before code runs which means any lazy renders wouldn't run before the next official \"tick\".\n\n\t\tAnimation._updateRoot = TweenLite.render = function() {\n\t\t\t\tvar i, a, p;\n\t\t\t\tif (_lazyTweens.length) { //if code is run outside of the requestAnimationFrame loop, there may be tweens queued AFTER the engine refreshed, so we need to ensure any pending renders occur before we refresh again.\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\t_rootTimeline.render((_ticker.time - _rootTimeline._startTime) * _rootTimeline._timeScale, false, false);\n\t\t\t\t_rootFramesTimeline.render((_ticker.frame - _rootFramesTimeline._startTime) * _rootFramesTimeline._timeScale, false, false);\n\t\t\t\tif (_lazyTweens.length) {\n\t\t\t\t\t_lazyRender();\n\t\t\t\t}\n\t\t\t\tif (_ticker.frame >= _nextGCFrame) { //dump garbage every 120 frames or whatever the user sets TweenLite.autoSleep to\n\t\t\t\t\t_nextGCFrame = _ticker.frame + (parseInt(TweenLite.autoSleep, 10) || 120);\n\t\t\t\t\tfor (p in _tweenLookup) {\n\t\t\t\t\t\ta = _tweenLookup[p].tweens;\n\t\t\t\t\t\ti = a.length;\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tif (a[i]._gc) {\n\t\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (a.length === 0) {\n\t\t\t\t\t\t\tdelete _tweenLookup[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t//if there are no more tweens in the root timelines, or if they're all paused, make the _timer sleep to reduce load on the CPU slightly\n\t\t\t\t\tp = _rootTimeline._first;\n\t\t\t\t\tif (!p || p._paused) if (TweenLite.autoSleep && !_rootFramesTimeline._first && _ticker._listeners.tick.length === 1) {\n\t\t\t\t\t\twhile (p && p._paused) {\n\t\t\t\t\t\t\tp = p._next;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!p) {\n\t\t\t\t\t\t\t_ticker.sleep();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t_ticker.addEventListener(\"tick\", Animation._updateRoot);\n\n\t\tvar _register = function(target, tween, scrub) {\n\t\t\t\tvar id = target._gsTweenID, a, i;\n\t\t\t\tif (!_tweenLookup[id || (target._gsTweenID = id = \"t\" + (_tweenLookupNum++))]) {\n\t\t\t\t\t_tweenLookup[id] = {target:target, tweens:[]};\n\t\t\t\t}\n\t\t\t\tif (tween) {\n\t\t\t\t\ta = _tweenLookup[id].tweens;\n\t\t\t\t\ta[(i = a.length)] = tween;\n\t\t\t\t\tif (scrub) {\n\t\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\t\tif (a[i] === tween) {\n\t\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn _tweenLookup[id].tweens;\n\t\t\t},\n\t\t\t_onOverwrite = function(overwrittenTween, overwritingTween, target, killedProps) {\n\t\t\t\tvar func = overwrittenTween.vars.onOverwrite, r1, r2;\n\t\t\t\tif (func) {\n\t\t\t\t\tr1 = func(overwrittenTween, overwritingTween, target, killedProps);\n\t\t\t\t}\n\t\t\t\tfunc = TweenLite.onOverwrite;\n\t\t\t\tif (func) {\n\t\t\t\t\tr2 = func(overwrittenTween, overwritingTween, target, killedProps);\n\t\t\t\t}\n\t\t\t\treturn (r1 !== false && r2 !== false);\n\t\t\t},\n\t\t\t_applyOverwrite = function(target, tween, props, mode, siblings) {\n\t\t\t\tvar i, changed, curTween, l;\n\t\t\t\tif (mode === 1 || mode >= 4) {\n\t\t\t\t\tl = siblings.length;\n\t\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\t\tif ((curTween = siblings[i]) !== tween) {\n\t\t\t\t\t\t\tif (!curTween._gc) {\n\t\t\t\t\t\t\t\tif (curTween._kill(null, target, tween)) {\n\t\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (mode === 5) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn changed;\n\t\t\t\t}\n\t\t\t\t//NOTE: Add 0.0000000001 to overcome floating point errors that can cause the startTime to be VERY slightly off (when a tween's time() is set for example)\n\t\t\t\tvar startTime = tween._startTime + _tinyNum,\n\t\t\t\t\toverlaps = [],\n\t\t\t\t\toCount = 0,\n\t\t\t\t\tzeroDur = (tween._duration === 0),\n\t\t\t\t\tglobalStart;\n\t\t\t\ti = siblings.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif ((curTween = siblings[i]) === tween || curTween._gc || curTween._paused) {\n\t\t\t\t\t\t//ignore\n\t\t\t\t\t} else if (curTween._timeline !== tween._timeline) {\n\t\t\t\t\t\tglobalStart = globalStart || _checkOverlap(tween, 0, zeroDur);\n\t\t\t\t\t\tif (_checkOverlap(curTween, globalStart, zeroDur) === 0) {\n\t\t\t\t\t\t\toverlaps[oCount++] = curTween;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (curTween._startTime <= startTime) if (curTween._startTime + curTween.totalDuration() / curTween._timeScale > startTime) if (!((zeroDur || !curTween._initted) && startTime - curTween._startTime <= 0.0000000002)) {\n\t\t\t\t\t\toverlaps[oCount++] = curTween;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ti = oCount;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tcurTween = overlaps[i];\n\t\t\t\t\tif (mode === 2) if (curTween._kill(props, target, tween)) {\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (mode !== 2 || (!curTween._firstPT && curTween._initted)) {\n\t\t\t\t\t\tif (mode !== 2 && !_onOverwrite(curTween, tween)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (curTween._enabled(false, false)) { //if all property tweens have been overwritten, kill the tween.\n\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn changed;\n\t\t\t},\n\t\t\t_checkOverlap = function(tween, reference, zeroDur) {\n\t\t\t\tvar tl = tween._timeline,\n\t\t\t\t\tts = tl._timeScale,\n\t\t\t\t\tt = tween._startTime;\n\t\t\t\twhile (tl._timeline) {\n\t\t\t\t\tt += tl._startTime;\n\t\t\t\t\tts *= tl._timeScale;\n\t\t\t\t\tif (tl._paused) {\n\t\t\t\t\t\treturn -100;\n\t\t\t\t\t}\n\t\t\t\t\ttl = tl._timeline;\n\t\t\t\t}\n\t\t\t\tt /= ts;\n\t\t\t\treturn (t > reference) ? t - reference : ((zeroDur && t === reference) || (!tween._initted && t - reference < 2 * _tinyNum)) ? _tinyNum : ((t += tween.totalDuration() / tween._timeScale / ts) > reference + _tinyNum) ? 0 : t - reference - _tinyNum;\n\t\t\t};\n\n\n//---- TweenLite instance methods -----------------------------------------------------------------------------\n\n\t\tp._init = function() {\n\t\t\tvar v = this.vars,\n\t\t\t\top = this._overwrittenProps,\n\t\t\t\tdur = this._duration,\n\t\t\t\timmediate = !!v.immediateRender,\n\t\t\t\tease = v.ease,\n\t\t\t\ti, initPlugins, pt, p, startVars, l;\n\t\t\tif (v.startAt) {\n\t\t\t\tif (this._startAt) {\n\t\t\t\t\tthis._startAt.render(-1, true); //if we've run a startAt previously (when the tween instantiated), we should revert it so that the values re-instantiate correctly particularly for relative tweens. Without this, a TweenLite.fromTo(obj, 1, {x:\"+=100\"}, {x:\"-=100\"}), for example, would actually jump to +=200 because the startAt would run twice, doubling the relative change.\n\t\t\t\t\tthis._startAt.kill();\n\t\t\t\t}\n\t\t\t\tstartVars = {};\n\t\t\t\tfor (p in v.startAt) { //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, 1, from, to).fromTo(e, 1, to, from);\n\t\t\t\t\tstartVars[p] = v.startAt[p];\n\t\t\t\t}\n\t\t\t\tstartVars.data = \"isStart\";\n\t\t\t\tstartVars.overwrite = false;\n\t\t\t\tstartVars.immediateRender = true;\n\t\t\t\tstartVars.lazy = (immediate && v.lazy !== false);\n\t\t\t\tstartVars.startAt = startVars.delay = null; //no nesting of startAt objects allowed (otherwise it could cause an infinite loop).\n\t\t\t\tstartVars.onUpdate = v.onUpdate;\n\t\t\t\tstartVars.onUpdateParams = v.onUpdateParams;\n\t\t\t\tstartVars.onUpdateScope = v.onUpdateScope || v.callbackScope || this;\n\t\t\t\tthis._startAt = TweenLite.to(this.target || {}, 0, startVars);\n\t\t\t\tif (immediate) {\n\t\t\t\t\tif (this._time > 0) {\n\t\t\t\t\t\tthis._startAt = null; //tweens that render immediately (like most from() and fromTo() tweens) shouldn't revert when their parent timeline's playhead goes backward past the startTime because the initial render could have happened anytime and it shouldn't be directly correlated to this tween's startTime. Imagine setting up a complex animation where the beginning states of various objects are rendered immediately but the tween doesn't happen for quite some time - if we revert to the starting values as soon as the playhead goes backward past the tween's startTime, it will throw things off visually. Reversion should only happen in TimelineLite/Max instances where immediateRender was false (which is the default in the convenience methods like from()).\n\t\t\t\t\t} else if (dur !== 0) {\n\t\t\t\t\t\treturn; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a TimelineLite or TimelineMax, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (v.runBackwards && dur !== 0) {\n\t\t\t\t//from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)\n\t\t\t\tif (this._startAt) {\n\t\t\t\t\tthis._startAt.render(-1, true);\n\t\t\t\t\tthis._startAt.kill();\n\t\t\t\t\tthis._startAt = null;\n\t\t\t\t} else {\n\t\t\t\t\tif (this._time !== 0) { //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0\n\t\t\t\t\t\timmediate = false;\n\t\t\t\t\t}\n\t\t\t\t\tpt = {};\n\t\t\t\t\tfor (p in v) { //copy props into a new object and skip any reserved props, otherwise onComplete or onUpdate or onStart could fire. We should, however, permit autoCSS to go through.\n\t\t\t\t\t\tif (!_reservedProps[p] || p === \"autoCSS\") {\n\t\t\t\t\t\t\tpt[p] = v[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpt.overwrite = 0;\n\t\t\t\t\tpt.data = \"isFromStart\"; //we tag the tween with as \"isFromStart\" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a \"from()\" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:\"height\", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.\n\t\t\t\t\tpt.lazy = (immediate && v.lazy !== false);\n\t\t\t\t\tpt.immediateRender = immediate; //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)\n\t\t\t\t\tthis._startAt = TweenLite.to(this.target, 0, pt);\n\t\t\t\t\tif (!immediate) {\n\t\t\t\t\t\tthis._startAt._init(); //ensures that the initial values are recorded\n\t\t\t\t\t\tthis._startAt._enabled(false); //no need to have the tween render on the next cycle. Disable it because we'll always manually control the renders of the _startAt tween.\n\t\t\t\t\t\tif (this.vars.immediateRender) {\n\t\t\t\t\t\t\tthis._startAt = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (this._time === 0) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._ease = ease = (!ease) ? TweenLite.defaultEase : (ease instanceof Ease) ? ease : (typeof(ease) === \"function\") ? new Ease(ease, v.easeParams) : _easeMap[ease] || TweenLite.defaultEase;\n\t\t\tif (v.easeParams instanceof Array && ease.config) {\n\t\t\t\tthis._ease = ease.config.apply(ease, v.easeParams);\n\t\t\t}\n\t\t\tthis._easeType = this._ease._type;\n\t\t\tthis._easePower = this._ease._power;\n\t\t\tthis._firstPT = null;\n\n\t\t\tif (this._targets) {\n\t\t\t\tl = this._targets.length;\n\t\t\t\tfor (i = 0; i < l; i++) {\n\t\t\t\t\tif ( this._initProps( this._targets[i], (this._propLookup[i] = {}), this._siblings[i], (op ? op[i] : null), i) ) {\n\t\t\t\t\t\tinitPlugins = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tinitPlugins = this._initProps(this.target, this._propLookup, this._siblings, op, 0);\n\t\t\t}\n\n\t\t\tif (initPlugins) {\n\t\t\t\tTweenLite._onPluginEvent(\"_onInitAllProps\", this); //reorders the array in order of priority. Uses a static TweenPlugin method in order to minimize file size in TweenLite\n\t\t\t}\n\t\t\tif (op) if (!this._firstPT) if (typeof(this.target) !== \"function\") { //if all tweening properties have been overwritten, kill the tween. If the target is a function, it's probably a delayedCall so let it live.\n\t\t\t\tthis._enabled(false, false);\n\t\t\t}\n\t\t\tif (v.runBackwards) {\n\t\t\t\tpt = this._firstPT;\n\t\t\t\twhile (pt) {\n\t\t\t\t\tpt.s += pt.c;\n\t\t\t\t\tpt.c = -pt.c;\n\t\t\t\t\tpt = pt._next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._onUpdate = v.onUpdate;\n\t\t\tthis._initted = true;\n\t\t};\n\n\t\tp._initProps = function(target, propLookup, siblings, overwrittenProps, index) {\n\t\t\tvar p, i, initPlugins, plugin, pt, v;\n\t\t\tif (target == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (_lazyLookup[target._gsTweenID]) {\n\t\t\t\t_lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)\n\t\t\t}\n\n\t\t\tif (!this.vars.css) if (target.style) if (target !== window && target.nodeType) if (_plugins.css) if (this.vars.autoCSS !== false) { //it's so common to use TweenLite/Max to animate the css of DOM elements, we assume that if the target is a DOM element, that's what is intended (a convenience so that users don't have to wrap things in css:{}, although we still recommend it for a slight performance boost and better specificity). Note: we cannot check \"nodeType\" on the window inside an iframe.\n\t\t\t\t_autoCSS(this.vars, target);\n\t\t\t}\n\t\t\tfor (p in this.vars) {\n\t\t\t\tv = this.vars[p];\n\t\t\t\tif (_reservedProps[p]) {\n\t\t\t\t\tif (v) if ((v instanceof Array) || (v.push && _isArray(v))) if (v.join(\"\").indexOf(\"{self}\") !== -1) {\n\t\t\t\t\t\tthis.vars[p] = v = this._swapSelfInParams(v, this);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (_plugins[p] && (plugin = new _plugins[p]())._onInitTween(target, this.vars[p], this, index)) {\n\n\t\t\t\t\t//t - target \t\t[object]\n\t\t\t\t\t//p - property \t\t[string]\n\t\t\t\t\t//s - start\t\t\t[number]\n\t\t\t\t\t//c - change\t\t[number]\n\t\t\t\t\t//f - isFunction\t[boolean]\n\t\t\t\t\t//n - name\t\t\t[string]\n\t\t\t\t\t//pg - isPlugin \t[boolean]\n\t\t\t\t\t//pr - priority\t\t[number]\n\t\t\t\t\t//m - mod           [function | 0]\n\t\t\t\t\tthis._firstPT = pt = {_next:this._firstPT, t:plugin, p:\"setRatio\", s:0, c:1, f:1, n:p, pg:1, pr:plugin._priority, m:0};\n\t\t\t\t\ti = plugin._overwriteProps.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tpropLookup[plugin._overwriteProps[i]] = this._firstPT;\n\t\t\t\t\t}\n\t\t\t\t\tif (plugin._priority || plugin._onInitAllProps) {\n\t\t\t\t\t\tinitPlugins = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (plugin._onDisable || plugin._onEnable) {\n\t\t\t\t\t\tthis._notifyPluginsOfEnabled = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\tpt._next._prev = pt;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tpropLookup[p] = _addPropTween.call(this, target, p, \"get\", v, p, 0, null, this.vars.stringFilter, index);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (overwrittenProps) if (this._kill(overwrittenProps, target)) { //another tween may have tried to overwrite properties of this tween before init() was called (like if two tweens start at the same time, the one created second will run first)\n\t\t\t\treturn this._initProps(target, propLookup, siblings, overwrittenProps, index);\n\t\t\t}\n\t\t\tif (this._overwrite > 1) if (this._firstPT) if (siblings.length > 1) if (_applyOverwrite(target, this, propLookup, this._overwrite, siblings)) {\n\t\t\t\tthis._kill(propLookup, target);\n\t\t\t\treturn this._initProps(target, propLookup, siblings, overwrittenProps, index);\n\t\t\t}\n\t\t\tif (this._firstPT) if ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration)) { //zero duration tweens don't lazy render by default; everything else does.\n\t\t\t\t_lazyLookup[target._gsTweenID] = true;\n\t\t\t}\n\t\t\treturn initPlugins;\n\t\t};\n\n\t\tp.render = function(time, suppressEvents, force) {\n\t\t\tvar prevTime = this._time,\n\t\t\t\tduration = this._duration,\n\t\t\t\tprevRawPrevTime = this._rawPrevTime,\n\t\t\t\tisComplete, callback, pt, rawPrevTime;\n\t\t\tif (time >= duration - 0.0000001 && time >= 0) { //to work around occasional floating point math artifacts.\n\t\t\t\tthis._totalTime = this._time = duration;\n\t\t\t\tthis.ratio = this._ease._calcEnd ? this._ease.getRatio(1) : 1;\n\t\t\t\tif (!this._reversed ) {\n\t\t\t\t\tisComplete = true;\n\t\t\t\t\tcallback = \"onComplete\";\n\t\t\t\t\tforce = (force || this._timeline.autoRemoveChildren); //otherwise, if the animation is unpaused/activated after it's already finished, it doesn't get removed from the parent timeline.\n\t\t\t\t}\n\t\t\t\tif (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\tif (this._startTime === this._timeline._duration) { //if a zero-duration tween is at the VERY end of a timeline and that timeline renders at its end, it will typically add a tiny bit of cushion to the render time to prevent rounding errors from getting in the way of tweens rendering their VERY end. If we then reverse() that timeline, the zero-duration tween will trigger its onReverseComplete even though technically the playhead didn't pass over it again. It's a very specific edge case we must accommodate.\n\t\t\t\t\t\ttime = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (prevRawPrevTime < 0 || (time <= 0 && time >= -0.0000001) || (prevRawPrevTime === _tinyNum && this.data !== \"isPause\")) if (prevRawPrevTime !== time) { //note: when this.data is \"isPause\", it's a callback added by addPause() on a timeline that we should not be triggered when LEAVING its exact start time. In other words, tl.addPause(1).play(1) shouldn't pause.\n\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\tif (prevRawPrevTime > _tinyNum) {\n\t\t\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t}\n\n\t\t\t} else if (time < 0.0000001) { //to work around occasional floating point math artifacts, round super small values to 0.\n\t\t\t\tthis._totalTime = this._time = 0;\n\t\t\t\tthis.ratio = this._ease._calcEnd ? this._ease.getRatio(0) : 0;\n\t\t\t\tif (prevTime !== 0 || (duration === 0 && prevRawPrevTime > 0)) {\n\t\t\t\t\tcallback = \"onReverseComplete\";\n\t\t\t\t\tisComplete = this._reversed;\n\t\t\t\t}\n\t\t\t\tif (time < 0) {\n\t\t\t\t\tthis._active = false;\n\t\t\t\t\tif (duration === 0) if (this._initted || !this.vars.lazy || force) { //zero-duration tweens are tricky because we must discern the momentum/direction of time in order to determine whether the starting values should be rendered or the ending values. If the \"playhead\" of its timeline goes past the zero-duration tween in the forward direction or lands directly on it, the end values should be rendered, but if the timeline's \"playhead\" moves past it in the backward direction (from a postitive time to a negative time), the starting values must be rendered.\n\t\t\t\t\t\tif (prevRawPrevTime >= 0 && !(prevRawPrevTime === _tinyNum && this.data === \"isPause\")) {\n\t\t\t\t\t\t\tforce = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._rawPrevTime = rawPrevTime = (!suppressEvents || time || prevRawPrevTime === time) ? time : _tinyNum; //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect. We set the _rawPrevTime to be a precise tiny number to indicate this scenario rather than using another property/variable which would increase memory usage. This technique is less readable, but more efficient.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!this._initted || (this._startAt && this._startAt.progress())) { //if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately. Also, we check progress() because if startAt has already rendered at its end, we should force a render at its beginning. Otherwise, if you put the playhead directly on top of where a fromTo({immediateRender:false}) starts, and then move it backwards, the from() won't revert its values.\n\t\t\t\t\tforce = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._totalTime = this._time = time;\n\n\t\t\t\tif (this._easeType) {\n\t\t\t\t\tvar r = time / duration, type = this._easeType, pow = this._easePower;\n\t\t\t\t\tif (type === 1 || (type === 3 && r >= 0.5)) {\n\t\t\t\t\t\tr = 1 - r;\n\t\t\t\t\t}\n\t\t\t\t\tif (type === 3) {\n\t\t\t\t\t\tr *= 2;\n\t\t\t\t\t}\n\t\t\t\t\tif (pow === 1) {\n\t\t\t\t\t\tr *= r;\n\t\t\t\t\t} else if (pow === 2) {\n\t\t\t\t\t\tr *= r * r;\n\t\t\t\t\t} else if (pow === 3) {\n\t\t\t\t\t\tr *= r * r * r;\n\t\t\t\t\t} else if (pow === 4) {\n\t\t\t\t\t\tr *= r * r * r * r;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (type === 1) {\n\t\t\t\t\t\tthis.ratio = 1 - r;\n\t\t\t\t\t} else if (type === 2) {\n\t\t\t\t\t\tthis.ratio = r;\n\t\t\t\t\t} else if (time / duration < 0.5) {\n\t\t\t\t\t\tthis.ratio = r / 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.ratio = 1 - (r / 2);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tthis.ratio = this._ease.getRatio(time / duration);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this._time === prevTime && !force) {\n\t\t\t\treturn;\n\t\t\t} else if (!this._initted) {\n\t\t\t\tthis._init();\n\t\t\t\tif (!this._initted || this._gc) { //immediateRender tweens typically won't initialize until the playhead advances (_time is greater than 0) in order to ensure that overwriting occurs properly. Also, if all of the tweening properties have been overwritten (which would cause _gc to be true, as set in _init()), we shouldn't continue otherwise an onStart callback could be called for example.\n\t\t\t\t\treturn;\n\t\t\t\t} else if (!force && this._firstPT && ((this.vars.lazy !== false && this._duration) || (this.vars.lazy && !this._duration))) {\n\t\t\t\t\tthis._time = this._totalTime = prevTime;\n\t\t\t\t\tthis._rawPrevTime = prevRawPrevTime;\n\t\t\t\t\t_lazyTweens.push(this);\n\t\t\t\t\tthis._lazy = [time, suppressEvents];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//_ease is initially set to defaultEase, so now that init() has run, _ease is set properly and we need to recalculate the ratio. Overall this is faster than using conditional logic earlier in the method to avoid having to set ratio twice because we only init() once but renderTime() gets called VERY frequently.\n\t\t\t\tif (this._time && !isComplete) {\n\t\t\t\t\tthis.ratio = this._ease.getRatio(this._time / duration);\n\t\t\t\t} else if (isComplete && this._ease._calcEnd) {\n\t\t\t\t\tthis.ratio = this._ease.getRatio((this._time === 0) ? 0 : 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._lazy !== false) { //in case a lazy render is pending, we should flush it because the new render is occurring now (imagine a lazy tween instantiating and then immediately the user calls tween.seek(tween.duration()), skipping to the end - the end render would be forced, and then if we didn't flush the lazy render, it'd fire AFTER the seek(), rendering it at the wrong time.\n\t\t\t\tthis._lazy = false;\n\t\t\t}\n\t\t\tif (!this._active) if (!this._paused && this._time !== prevTime && time >= 0) {\n\t\t\t\tthis._active = true;  //so that if the user renders a tween (as opposed to the timeline rendering it), the timeline is forced to re-render and align it with the proper time/frame on the next rendering cycle. Maybe the tween already finished but the user manually re-renders it as halfway done.\n\t\t\t}\n\t\t\tif (prevTime === 0) {\n\t\t\t\tif (this._startAt) {\n\t\t\t\t\tif (time >= 0) {\n\t\t\t\t\t\tthis._startAt.render(time, true, force);\n\t\t\t\t\t} else if (!callback) {\n\t\t\t\t\t\tcallback = \"_dummyGS\"; //if no callback is defined, use a dummy value just so that the condition at the end evaluates as true because _startAt should render AFTER the normal render loop when the time is negative. We could handle this in a more intuitive way, of course, but the render loop is the MOST important thing to optimize, so this technique allows us to avoid adding extra conditional logic in a high-frequency area.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.vars.onStart) if (this._time !== 0 || duration === 0) if (!suppressEvents) {\n\t\t\t\t\tthis._callback(\"onStart\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tpt = this._firstPT;\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.f) {\n\t\t\t\t\tpt.t[pt.p](pt.c * this.ratio + pt.s);\n\t\t\t\t} else {\n\t\t\t\t\tpt.t[pt.p] = pt.c * this.ratio + pt.s;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\n\t\t\tif (this._onUpdate) {\n\t\t\t\tif (time < 0) if (this._startAt && time !== -0.0001) { //if the tween is positioned at the VERY beginning (_startTime 0) of its parent timeline, it's illegal for the playhead to go back further, so we should not render the recorded startAt values.\n\t\t\t\t\tthis._startAt.render(time, true, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents) if (this._time !== prevTime || isComplete || force) {\n\t\t\t\t\tthis._callback(\"onUpdate\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (callback) if (!this._gc || force) { //check _gc because there's a chance that kill() could be called in an onUpdate\n\t\t\t\tif (time < 0 && this._startAt && !this._onUpdate && time !== -0.0001) { //-0.0001 is a special value that we use when looping back to the beginning of a repeated TimelineMax, in which case we shouldn't render the _startAt values.\n\t\t\t\t\tthis._startAt.render(time, true, force);\n\t\t\t\t}\n\t\t\t\tif (isComplete) {\n\t\t\t\t\tif (this._timeline.autoRemoveChildren) {\n\t\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t\tthis._active = false;\n\t\t\t\t}\n\t\t\t\tif (!suppressEvents && this.vars[callback]) {\n\t\t\t\t\tthis._callback(callback);\n\t\t\t\t}\n\t\t\t\tif (duration === 0 && this._rawPrevTime === _tinyNum && rawPrevTime !== _tinyNum) { //the onComplete or onReverseComplete could trigger movement of the playhead and for zero-duration tweens (which must discern direction) that land directly back on their start time, we don't want to fire again on the next render. Think of several addPause()'s in a timeline that forces the playhead to a certain spot, but what if it's already paused and another tween is tweening the \"time\" of the timeline? Each time it moves [forward] past that spot, it would move back, and since suppressEvents is true, it'd reset _rawPrevTime to _tinyNum so that when it begins again, the callback would fire (so ultimately it could bounce back and forth during that tween). Again, this is a very uncommon scenario, but possible nonetheless.\n\t\t\t\t\tthis._rawPrevTime = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tp._kill = function(vars, target, overwritingTween) {\n\t\t\tif (vars === \"all\") {\n\t\t\t\tvars = null;\n\t\t\t}\n\t\t\tif (vars == null) if (target == null || target === this.target) {\n\t\t\t\tthis._lazy = false;\n\t\t\t\treturn this._enabled(false, false);\n\t\t\t}\n\t\t\ttarget = (typeof(target) !== \"string\") ? (target || this._targets || this.target) : TweenLite.selector(target) || target;\n\t\t\tvar simultaneousOverwrite = (overwritingTween && this._time && overwritingTween._startTime === this._startTime && this._timeline === overwritingTween._timeline),\n\t\t\t\ti, overwrittenProps, p, pt, propLookup, changed, killProps, record, killed;\n\t\t\tif ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== \"number\") {\n\t\t\t\ti = target.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (this._kill(vars, target[i], overwritingTween)) {\n\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._targets) {\n\t\t\t\t\ti = this._targets.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tif (target === this._targets[i]) {\n\t\t\t\t\t\t\tpropLookup = this._propLookup[i] || {};\n\t\t\t\t\t\t\tthis._overwrittenProps = this._overwrittenProps || [];\n\t\t\t\t\t\t\toverwrittenProps = this._overwrittenProps[i] = vars ? this._overwrittenProps[i] || {} : \"all\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (target !== this.target) {\n\t\t\t\t\treturn false;\n\t\t\t\t} else {\n\t\t\t\t\tpropLookup = this._propLookup;\n\t\t\t\t\toverwrittenProps = this._overwrittenProps = vars ? this._overwrittenProps || {} : \"all\";\n\t\t\t\t}\n\n\t\t\t\tif (propLookup) {\n\t\t\t\t\tkillProps = vars || propLookup;\n\t\t\t\t\trecord = (vars !== overwrittenProps && overwrittenProps !== \"all\" && vars !== propLookup && (typeof(vars) !== \"object\" || !vars._tempKill)); //_tempKill is a super-secret way to delete a particular tweening property but NOT have it remembered as an official overwritten property (like in BezierPlugin)\n\t\t\t\t\tif (overwritingTween && (TweenLite.onOverwrite || this.vars.onOverwrite)) {\n\t\t\t\t\t\tfor (p in killProps) {\n\t\t\t\t\t\t\tif (propLookup[p]) {\n\t\t\t\t\t\t\t\tif (!killed) {\n\t\t\t\t\t\t\t\t\tkilled = [];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tkilled.push(p);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((killed || !vars) && !_onOverwrite(this, overwritingTween, target, killed)) { //if the onOverwrite returned false, that means the user wants to override the overwriting (cancel it).\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (p in killProps) {\n\t\t\t\t\t\tif ((pt = propLookup[p])) {\n\t\t\t\t\t\t\tif (simultaneousOverwrite) { //if another tween overwrites this one and they both start at exactly the same time, yet this tween has already rendered once (for example, at 0.001) because it's first in the queue, we should revert the values to where they were at 0 so that the starting values aren't contaminated on the overwriting tween.\n\t\t\t\t\t\t\t\tif (pt.f) {\n\t\t\t\t\t\t\t\t\tpt.t[pt.p](pt.s);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tpt.t[pt.p] = pt.s;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tchanged = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (pt.pg && pt.t._kill(killProps)) {\n\t\t\t\t\t\t\t\tchanged = true; //some plugins need to be notified so they can perform cleanup tasks first\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!pt.pg || pt.t._overwriteProps.length === 0) {\n\t\t\t\t\t\t\t\tif (pt._prev) {\n\t\t\t\t\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t\t\t\t\t} else if (pt === this._firstPT) {\n\t\t\t\t\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpt._next = pt._prev = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdelete propLookup[p];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (record) {\n\t\t\t\t\t\t\toverwrittenProps[p] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!this._firstPT && this._initted) { //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.\n\t\t\t\t\t\tthis._enabled(false, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\tp.invalidate = function() {\n\t\t\tif (this._notifyPluginsOfEnabled) {\n\t\t\t\tTweenLite._onPluginEvent(\"_onDisable\", this);\n\t\t\t}\n\t\t\tthis._firstPT = this._overwrittenProps = this._startAt = this._onUpdate = null;\n\t\t\tthis._notifyPluginsOfEnabled = this._active = this._lazy = false;\n\t\t\tthis._propLookup = (this._targets) ? {} : [];\n\t\t\tAnimation.prototype.invalidate.call(this);\n\t\t\tif (this.vars.immediateRender) {\n\t\t\t\tthis._time = -_tinyNum; //forces a render without having to set the render() \"force\" parameter to true because we want to allow lazying by default (using the \"force\" parameter always forces an immediate full render)\n\t\t\t\tthis.render(Math.min(0, -this._delay)); //in case delay is negative.\n\t\t\t}\n\t\t\treturn this;\n\t\t};\n\n\t\tp._enabled = function(enabled, ignoreTimeline) {\n\t\t\tif (!_tickerActive) {\n\t\t\t\t_ticker.wake();\n\t\t\t}\n\t\t\tif (enabled && this._gc) {\n\t\t\t\tvar targets = this._targets,\n\t\t\t\t\ti;\n\t\t\t\tif (targets) {\n\t\t\t\t\ti = targets.length;\n\t\t\t\t\twhile (--i > -1) {\n\t\t\t\t\t\tthis._siblings[i] = _register(targets[i], this, true);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._siblings = _register(this.target, this, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tAnimation.prototype._enabled.call(this, enabled, ignoreTimeline);\n\t\t\tif (this._notifyPluginsOfEnabled) if (this._firstPT) {\n\t\t\t\treturn TweenLite._onPluginEvent((enabled ? \"_onEnable\" : \"_onDisable\"), this);\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\n//----TweenLite static methods -----------------------------------------------------\n\n\t\tTweenLite.to = function(target, duration, vars) {\n\t\t\treturn new TweenLite(target, duration, vars);\n\t\t};\n\n\t\tTweenLite.from = function(target, duration, vars) {\n\t\t\tvars.runBackwards = true;\n\t\t\tvars.immediateRender = (vars.immediateRender != false);\n\t\t\treturn new TweenLite(target, duration, vars);\n\t\t};\n\n\t\tTweenLite.fromTo = function(target, duration, fromVars, toVars) {\n\t\t\ttoVars.startAt = fromVars;\n\t\t\ttoVars.immediateRender = (toVars.immediateRender != false && fromVars.immediateRender != false);\n\t\t\treturn new TweenLite(target, duration, toVars);\n\t\t};\n\n\t\tTweenLite.delayedCall = function(delay, callback, params, scope, useFrames) {\n\t\t\treturn new TweenLite(callback, 0, {delay:delay, onComplete:callback, onCompleteParams:params, callbackScope:scope, onReverseComplete:callback, onReverseCompleteParams:params, immediateRender:false, lazy:false, useFrames:useFrames, overwrite:0});\n\t\t};\n\n\t\tTweenLite.set = function(target, vars) {\n\t\t\treturn new TweenLite(target, 0, vars);\n\t\t};\n\n\t\tTweenLite.getTweensOf = function(target, onlyActive) {\n\t\t\tif (target == null) { return []; }\n\t\t\ttarget = (typeof(target) !== \"string\") ? target : TweenLite.selector(target) || target;\n\t\t\tvar i, a, j, t;\n\t\t\tif ((_isArray(target) || _isSelector(target)) && typeof(target[0]) !== \"number\") {\n\t\t\t\ti = target.length;\n\t\t\t\ta = [];\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\ta = a.concat(TweenLite.getTweensOf(target[i], onlyActive));\n\t\t\t\t}\n\t\t\t\ti = a.length;\n\t\t\t\t//now get rid of any duplicates (tweens of arrays of objects could cause duplicates)\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tt = a[i];\n\t\t\t\t\tj = i;\n\t\t\t\t\twhile (--j > -1) {\n\t\t\t\t\t\tif (t === a[j]) {\n\t\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (target._gsTweenID) {\n\t\t\t\ta = _register(target).concat();\n\t\t\t\ti = a.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (a[i]._gc || (onlyActive && !a[i].isActive())) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn a || [];\n\t\t};\n\n\t\tTweenLite.killTweensOf = TweenLite.killDelayedCallsTo = function(target, onlyActive, vars) {\n\t\t\tif (typeof(onlyActive) === \"object\") {\n\t\t\t\tvars = onlyActive; //for backwards compatibility (before \"onlyActive\" parameter was inserted)\n\t\t\t\tonlyActive = false;\n\t\t\t}\n\t\t\tvar a = TweenLite.getTweensOf(target, onlyActive),\n\t\t\t\ti = a.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\ta[i]._kill(vars, target);\n\t\t\t}\n\t\t};\n\n\n\n/*\n * ----------------------------------------------------------------\n * TweenPlugin   (could easily be split out as a separate file/class, but included for ease of use (so that people don't need to include another script call before loading plugins which is easy to forget)\n * ----------------------------------------------------------------\n */\n\t\tvar TweenPlugin = _class(\"plugins.TweenPlugin\", function(props, priority) {\n\t\t\t\t\tthis._overwriteProps = (props || \"\").split(\",\");\n\t\t\t\t\tthis._propName = this._overwriteProps[0];\n\t\t\t\t\tthis._priority = priority || 0;\n\t\t\t\t\tthis._super = TweenPlugin.prototype;\n\t\t\t\t}, true);\n\n\t\tp = TweenPlugin.prototype;\n\t\tTweenPlugin.version = \"1.19.0\";\n\t\tTweenPlugin.API = 2;\n\t\tp._firstPT = null;\n\t\tp._addTween = _addPropTween;\n\t\tp.setRatio = _setRatio;\n\n\t\tp._kill = function(lookup) {\n\t\t\tvar a = this._overwriteProps,\n\t\t\t\tpt = this._firstPT,\n\t\t\t\ti;\n\t\t\tif (lookup[this._propName] != null) {\n\t\t\t\tthis._overwriteProps = [];\n\t\t\t} else {\n\t\t\t\ti = a.length;\n\t\t\t\twhile (--i > -1) {\n\t\t\t\t\tif (lookup[a[i]] != null) {\n\t\t\t\t\t\ta.splice(i, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (pt) {\n\t\t\t\tif (lookup[pt.n] != null) {\n\t\t\t\t\tif (pt._next) {\n\t\t\t\t\t\tpt._next._prev = pt._prev;\n\t\t\t\t\t}\n\t\t\t\t\tif (pt._prev) {\n\t\t\t\t\t\tpt._prev._next = pt._next;\n\t\t\t\t\t\tpt._prev = null;\n\t\t\t\t\t} else if (this._firstPT === pt) {\n\t\t\t\t\t\tthis._firstPT = pt._next;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tp._mod = p._roundProps = function(lookup) {\n\t\t\tvar pt = this._firstPT,\n\t\t\t\tval;\n\t\t\twhile (pt) {\n\t\t\t\tval = lookup[this._propName] || (pt.n != null && lookup[ pt.n.split(this._propName + \"_\").join(\"\") ]);\n\t\t\t\tif (val && typeof(val) === \"function\") { //some properties that are very plugin-specific add a prefix named after the _propName plus an underscore, so we need to ignore that extra stuff here.\n\t\t\t\t\tif (pt.f === 2) {\n\t\t\t\t\t\tpt.t._applyPT.m = val;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpt.m = val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t};\n\n\t\tTweenLite._onPluginEvent = function(type, tween) {\n\t\t\tvar pt = tween._firstPT,\n\t\t\t\tchanged, pt2, first, last, next;\n\t\t\tif (type === \"_onInitAllProps\") {\n\t\t\t\t//sorts the PropTween linked list in order of priority because some plugins need to render earlier/later than others, like MotionBlurPlugin applies its effects after all x/y/alpha tweens have rendered on each frame.\n\t\t\t\twhile (pt) {\n\t\t\t\t\tnext = pt._next;\n\t\t\t\t\tpt2 = first;\n\t\t\t\t\twhile (pt2 && pt2.pr > pt.pr) {\n\t\t\t\t\t\tpt2 = pt2._next;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._prev = pt2 ? pt2._prev : last)) {\n\t\t\t\t\t\tpt._prev._next = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfirst = pt;\n\t\t\t\t\t}\n\t\t\t\t\tif ((pt._next = pt2)) {\n\t\t\t\t\t\tpt2._prev = pt;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlast = pt;\n\t\t\t\t\t}\n\t\t\t\t\tpt = next;\n\t\t\t\t}\n\t\t\t\tpt = tween._firstPT = first;\n\t\t\t}\n\t\t\twhile (pt) {\n\t\t\t\tif (pt.pg) if (typeof(pt.t[type]) === \"function\") if (pt.t[type]()) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t\tpt = pt._next;\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\tTweenPlugin.activate = function(plugins) {\n\t\t\tvar i = plugins.length;\n\t\t\twhile (--i > -1) {\n\t\t\t\tif (plugins[i].API === TweenPlugin.API) {\n\t\t\t\t\t_plugins[(new plugins[i]())._propName] = plugins[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\t//provides a more concise way to define plugins that have no dependencies besides TweenPlugin and TweenLite, wrapping common boilerplate stuff into one function (added in 1.9.0). You don't NEED to use this to define a plugin - the old way still works and can be useful in certain (rare) situations.\n\t\t_gsDefine.plugin = function(config) {\n\t\t\tif (!config || !config.propName || !config.init || !config.API) { throw \"illegal plugin definition.\"; }\n\t\t\tvar propName = config.propName,\n\t\t\t\tpriority = config.priority || 0,\n\t\t\t\toverwriteProps = config.overwriteProps,\n\t\t\t\tmap = {init:\"_onInitTween\", set:\"setRatio\", kill:\"_kill\", round:\"_mod\", mod:\"_mod\", initAll:\"_onInitAllProps\"},\n\t\t\t\tPlugin = _class(\"plugins.\" + propName.charAt(0).toUpperCase() + propName.substr(1) + \"Plugin\",\n\t\t\t\t\tfunction() {\n\t\t\t\t\t\tTweenPlugin.call(this, propName, priority);\n\t\t\t\t\t\tthis._overwriteProps = overwriteProps || [];\n\t\t\t\t\t}, (config.global === true)),\n\t\t\t\tp = Plugin.prototype = new TweenPlugin(propName),\n\t\t\t\tprop;\n\t\t\tp.constructor = Plugin;\n\t\t\tPlugin.API = config.API;\n\t\t\tfor (prop in map) {\n\t\t\t\tif (typeof(config[prop]) === \"function\") {\n\t\t\t\t\tp[map[prop]] = config[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t\tPlugin.version = config.version;\n\t\t\tTweenPlugin.activate([Plugin]);\n\t\t\treturn Plugin;\n\t\t};\n\n\n\t\t//now run through all the dependencies discovered and if any are missing, log that to the console as a warning. This is why it's best to have TweenLite load last - it can check all the dependencies for you.\n\t\ta = window._gsQueue;\n\t\tif (a) {\n\t\t\tfor (i = 0; i < a.length; i++) {\n\t\t\t\ta[i]();\n\t\t\t}\n\t\t\tfor (p in _defLookup) {\n\t\t\t\tif (!_defLookup[p].func) {\n\t\t\t\t\twindow.console.log(\"GSAP encountered missing dependency: \" + p);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_tickerActive = false; //ensures that the first official animation forces a ticker.tick() to update the time when it is instantiated\n\n\t\treturn TweenLite;\n\n})(_gsScope, \"TweenLite\");\n\nconst gs = _gsScope.com.greensock;\nexport { TweenLite as default };\nexport const SimpleTimeline = gs.core.SimpleTimeline;\nexport const Animation = gs.core.Animation;\nexport const Ease = _gsScope.Ease;\nexport const Linear = _gsScope.Linear;\nexport const Power0 = Linear;\nexport const Power1 = _gsScope.Power1;\nexport const Power2 = _gsScope.Power2;\nexport const Power3 = _gsScope.Power3;\nexport const Power4 = _gsScope.Power4;\nexport const TweenPlugin = _gsScope.TweenPlugin;\nexport const EventDispatcher = gs.events.EventDispatcher;\n","import { ShowGreet } from \"./greet\";\r\n\r\nconst greetEl = document.getElementById(\"greeting\");\r\n\r\nif (greetEl != null) {\r\n    ShowGreet();\r\n} "],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}